//********************************************************************************************
//* 0.18um Calibre ANTENNA DRC COMMAND FILE - CLM18_LM16_LM152_6M_ANT.215_5a (10/31/2023)			               *
// * FOR TSMC 0.18UM CMOS LOGIC/MS/RF AND 0.16UM/0.152UM CMOS LOGIC/MS 1P6M PROCESS DESIGN RULE*
// *          (CL018G/LV/LP, CM018G, CR018G, CL016G, CM016G, CL0152G, CM0152)                  *
//* DESIGN RULE DOCUMENT: T-018-LO-DR-001 VER 2.15_5                                           *
//* DRC COMMAND FILE DOCUMENT:  T-018-LO-DR-001-C1 VER 2.15_5a     


///***********************************************************************************
//* TSMC developed this deck using Mentor Graphics proprietary SVRF and TVF formats.
//* The deck is to be used only in Calibre tools.
//************************************************************************************
//* Tech File Ver: v2.15_5a

///  DISCLAIMER
///
///  The information contained herein is provided by TSMC on an "AS IS" basis
///  without any warranty, and TSMC has no obligation to support or otherwise
///  maintain the information.  TSMC disclaims any representation that the
///  information does not infringe any intellectual property rights or proprietary
///  rights of any third parties.  There are no other warranties given by TSMC,
///  whether express, implied or statutory, including, without limitation, implied
///  warranties of merchantability and fitness for a particular purpose.
///
///  STATEMENT OF USE
///
///  This information contains confidential and proprietary information of TSMC.
///  No part of this information may be reproduced, transmitted, transcribed,
///  stored in a retrieval system, or translated into any human or computer
///  language, in any form or by any means, electronic, mechanical, magnetic,
///  optical, chemical, manual, or otherwise, without the prior written permission
///  of TSMC.  This information was prepared for informational purpose and is for
///  use by TSMC's customers only.  TSMC reserves the right to make changes in the
///  information at any time and without notice.
///
///-------------------------------------------------------------------------------------------
///
///  NOTICE: (Read Me First!)
///
///  1. If the input GDS file does not include all the layers in the
///     INPUT LAYER BLOCK, for example, they are generated by logic
///     operations, please make sure the consistence with original
///     layer definition.
///
//*  2. The runset is tested and developed on Calibre v2018.4_25.17, please use 
///     this or newer TSMC qualified version of Calibre to execute this runset.
///

///-------------------------------------------------------------------------------------------
///	
///  * To correctly use this DRC deck, the following settings are very important in
///    this DRC command file:
///	
//*  (0) Calibre v2018.4_25.17 is used to develop and QA this command file. 
///      Please execute the DRC with this or newer TSMC qualified version of Calibre.
///


///  (1) Variable for Thick Top Metal check:
///
///	By default, the Top Metal is Normal Top Metal. If customer uses 20KA or 40KA Thick Top 
///	Metal, please remove // to the option 'THICK_40K' or 'THICK_20K',But only one should be turn on every time.
///
///	For 20k Top metal:
//*		//#DEFINE THICK_40K
//*		#DEFINE THICK_20K
///
///	For 40k Top metal:
//*		#DEFINE THICK_40K
//*		//#DEFINE THICK_20K


///  (2) Variable for 1.5fF/um2 and 2fF/um2 check:
///
///       By default, the 1.5fF/um2 and 2fF/um2 MIMCAP are not used. If customer uses 1.5fF/um2 or 2fF/um2 MIMCAP,
///       Please turn on this switch:
///      
//*	        #DEFINE MIMCAP_1d5F_2F

///  (3) Variable for A.R.MIM.6 rule checking:
///
///	      By default, A.R.MIM.6 is checked in this deck. If A.R.MIM.6 is not required
///	      to check, please add // to this option:
///
//*		//#DEFINE CHECK_ALRDL




///-------------------------------------------------------------------------------------------

// OPTION SETUP
//===============
/* SWITCH DEFINITION START */
//#DEFINE MIMCAP_1d5F_2F  // turn on only when customer use 1.5fF/um2 or 2fF/um2 MIMCAP. otherwise please turn off it


//#DEFINE THICK_40K       // turn on only when 40KA Thick Top Metal is used. otherwise please turn off it

//#DEFINE THICK_20K       // turn on only when 20KA Thick Top Metal is used. otherwise please turn off it
#DEFINE CHECK_ALRDL      // turn off when A.R.MIM.6 is not checked






//
// ENVIRONMENT SETUP
//------------------
PRECISION    1000
RESOLUTION     5   //Set layout grid  check to 0.005

LAYOUT SYSTEM GDSII
LAYOUT PATH "./gds/mavg.gds"
LAYOUT PRIMARY "mavg"

DRC RESULTS DATABASE "./drc/ANT_DRC_RES.db"
DRC SUMMARY REPORT "./drc/ANT_DRC.rep" 
DRC CHECK TEXT ALL
DRC MAXIMUM RESULTS ALL
//DRC INCREMENTAL CONNECT YES

FLAG OFFGRID YES     // For layout grid check. default grid value is resolution size
FLAG ACUTE YES
FLAG SKEW YES
FLAG NONSIMPLE YES
FLAG NONSIMPLE PATH YES

LAYOUT PROCESS BOX RECORD YES
/*SWITCH DEFINITION END*/



VARIABLE M1_THICKNESS 0.53	// The Thickness of First Metal is 5.3K A

VARIABLE M2_THICKNESS 0.53	// The Thickness of Inter Metal is 5.3K A
VARIABLE M3_THICKNESS 0.53	// The Thickness of Inter Metal is 5.3K A
VARIABLE M4_THICKNESS 0.53	// The Thickness of Inter Metal is 5.3K A
VARIABLE M5_THICKNESS 0.53	// The Thickness of Inter Metal is 5.3K A
#IFDEF THICK_40K
VARIABLE M6_THICKNESS 4.6	// The Thickness of Top Metal is 40K A
#ELSE
  #IFDEF THICK_20K
  VARIABLE M6_THICKNESS 2.34	// The Thickness of Top Metal is 20K A
  #ELSE
  VARIABLE M6_THICKNESS 0.99	// The Thickness of Top Metal is 9.9K A
  #ENDIF
#ENDIF

VARIABLE MD_THICKNESS       0.99


VARIABLE PO_THICKNESS	    0.2


VARIABLE Mx_S_1             0.28
VARIABLE Balance_Ratio      6000
VARIABLE unBalance_Ratio     100

VARIABLE DIO_AREA    0.203

VARIABLE DNW_R_7         500000
VARIABLE DNW_R_20_1_DNW_MIN 1000
VARIABLE DNW_R_20_2_DNW_MIN 1000
VARIABLE DNW_R_20_2_GATE  20

VARIABLE DNW_R_20_1_1_RC1 1.0E-2
VARIABLE DNW_R_20_1_1_RC2 1.0E2
VARIABLE DNW_R_20_1_1 1.0E14
VARIABLE DNW_R_20_1_2_RC1 0.067
VARIABLE DNW_R_20_1_2_RC2 0.25
VARIABLE DNW_R_20_1_2 1.0E14
VARIABLE DNW_R_20_1_3_RC1 4
VARIABLE DNW_R_20_1_3_RC2 15
VARIABLE DNW_R_20_1_3 1.0E14
VARIABLE DNW_R_20_1_4_RC1 1.0E-2
VARIABLE DNW_R_20_1_4 1.0E13
VARIABLE DNW_R_20_1_5_RC1 1.0E2 
VARIABLE DNW_R_20_1_5 1.0E13

VARIABLE DNW_R_20_2_1_DNW1 5000
VARIABLE DNW_R_20_2_1_DNW2 1.0E6
VARIABLE DNW_R_20_2_1 1.0E4
VARIABLE DNW_R_20_2_2_DNW1 1.0E6
VARIABLE DNW_R_20_2_2_DNW2 1.0E7
VARIABLE DNW_R_20_2_2 10
VARIABLE DNW_R_20_2_3 1.0E7

VARIABLE DNW_R_20_3_1_RC1 1.0E-2
VARIABLE DNW_R_20_3_1_RC2 1.0E2
VARIABLE DNW_R_20_3_1 1.0E13
VARIABLE DNW_R_20_3_2_RC1 1.0E2
VARIABLE DNW_R_20_3_2_RC2 1500
VARIABLE DNW_R_20_3_2 1.0E12
VARIABLE DNW_R_20_3_3_RC1 1.0E2
VARIABLE DNW_R_20_3_3 1.0E12
VARIABLE DNW_R_20_3_4_RC1 0.00067
VARIABLE DNW_R_20_3_4_RC2 1.0E-2
VARIABLE DNW_R_20_3_4 1.0E12
VARIABLE DNW_R_20_3_5_RC1 1.0E-2
VARIABLE DNW_R_20_3_5 1.0E12

VARIABLE DNW_R_20_4_1_DNW1 5000
VARIABLE DNW_R_20_4_1_DNW2 1.0E6
VARIABLE DNW_R_20_4_1 1.0E3
VARIABLE DNW_R_20_4_2_DNW1 1.0E6
VARIABLE DNW_R_20_4_2_DNW2 1.0E7
VARIABLE DNW_R_20_4_2 1
VARIABLE DNW_R_20_4_3 1.0E7

VARIABLE DNW_R_20_5_1_DNW1 5000
VARIABLE DNW_R_20_5_1_DNW2 1E4
VARIABLE DNW_R_20_5_1 1.0E4
VARIABLE DNW_R_20_5_2_DNW1 1E4
VARIABLE DNW_R_20_5_2_DNW2 2.0E5
VARIABLE DNW_R_20_5_2 1.0E3
VARIABLE DNW_R_20_5_3 2.0E5

VARIABLE DNW_R_20_6_1_DNW1 5000
VARIABLE DNW_R_20_6_1_DNW2 1E4
VARIABLE DNW_R_20_6_1 1.0E2
VARIABLE DNW_R_20_6_2_DNW1 1E4
VARIABLE DNW_R_20_6_2_DNW2 1.0E6
VARIABLE DNW_R_20_6_2 1.0E1
VARIABLE DNW_R_20_6_3 1.0E6

VARIABLE DNW_R_21_1_1    3.0E5
VARIABLE DNW_R_21_1_2    1E7
VARIABLE DNW_R_21_2_1    1E7
VARIABLE DNW_R_21_2_2    1E7
VARIABLE DNW_R_21_3_1    3.0E5
VARIABLE DNW_R_21_3_2    1.0E6
VARIABLE DNW_R_21_4_1    1.0E7
VARIABLE DNW_R_21_4_2    1.0E5

VARIABLE DNW_R_22_1_1 3.0E5
VARIABLE DNW_R_22_1_2 1E8
VARIABLE DNW_R_22_2_1 1E7
VARIABLE DNW_R_22_2_2 1E7
VARIABLE DNW_R_22_3_1 3.0E5
VARIABLE DNW_R_22_3_2 1.0E6
VARIABLE DNW_R_22_4_1 1.0E7
VARIABLE DNW_R_22_4_2 1.0E6

VARIABLE DNW_R_23 600
VARIABLE DNW_R_23_A 5E4



DRC INCREMENTAL CONNECT YES

// DRAWN LAYER DEFINITIONS
//========================
LAYER NWi 2		// Nwell technology
LAYER PPi 7		// P+ S/D imlant
LAYER NPi 8		// N+ S/D imlant
LAYER DNWi 82		// Deep N-WELL
LAYER ODi 3 11 12		
LAYER OD2i 4		
LAYER POLYi 13		
LAYER COi 15		
LAYER M1i 16		
LAYER VIA1i 17		
LAYER M2i 18		
LAYER MSIi 3041		
LAYER MAP 210 DATATYPE 1	3041
LAYER M0i 210		
LAYER SICR_V1i 3042		
LAYER MAP 210 DATATYPE 2	3042

LAYER VIA2i 27		
LAYER M3i 28		
LAYER VIA3i 29		// Define connection from M4 to M3
LAYER M4i 31		// Fourth Metal layer

LAYER VIA4i 32		// Define connection from M5 to M4
LAYER M5i 33		// Fifth Metal layer

LAYER VIA5i 39		// Define connection from MTOP to M5
LAYER M6i 38		// Sixth Metal layer  

LAYER VIADi 167		// Define connection from MD to MTOP
LAYER MDi 168		// RDL Metal layer  
LAYER UBMi 170		// Bond Pad definition for RDL
LAYER PPIi 189		// Post Passivation RDL
LAYER CBi 19		// Passivation opening for Bond Pad
LAYER CBDi 169		// Definition of passivation window for bump
LAYER ULLNWi 128		// Nwell for ULL devices
LAYER RPDUMMY 54		
LAYER RLPPDMY 134		
LAYER RWDMY 52		
LAYER RPOi 34		

// In TSMC standard mapping, datatype 1 is for dummy metal and datatype 2 is for metal slot
// Metal Slot layers
//--------------------
LAYER M1SLOTi 3000		// Metal1 slot (if drawn)
LAYER MAP 16 DATATYPE 2	3000
LAYER M2SLOTi 3001		// Metal2 slot (if drawn)
LAYER MAP 18 DATATYPE 2	3001
LAYER M3SLOTi 3002		// Metal3 slot (if drawn)
LAYER MAP 28 DATATYPE 2	3002
LAYER M4SLOTi 3003		// Metal4 slot (if drawn)
LAYER MAP 31 DATATYPE 2	3003
LAYER M5SLOTi 3004		// Metal5 slot (if drawn)
LAYER MAP 33 DATATYPE 2	3004
LAYER M6SLOTi 3005		// Metal6 slot (if drawn)
LAYER MAP 38 DATATYPE 2	3005
LAYER MDSLOTi 3007		// MD slot (if drawn)
LAYER MAP 168 DATATYPE 2	3007
// Dummy Metal layers
//---------------------
LAYER M1DMY 3008		
LAYER MAP 16 DATATYPE 1	3008
LAYER M2DMY 3009		
LAYER MAP 18 DATATYPE 1	3009
LAYER M3DMY 3010		
LAYER MAP 28 DATATYPE 1	3010
LAYER M4DMY 3011		
LAYER MAP 31 DATATYPE 1	3011
LAYER M5DMY 3012		
LAYER MAP 33 DATATYPE 1	3012
LAYER M6DMY 3013		
LAYER MAP 38 DATATYPE 1	3013
LAYER MDDMY 3015		
LAYER MAP 168 DATATYPE 1	3015
// Capacitor Top Metal Layers
//-----------------------------
LAYER CTM2i 3016		// Capacitor Top Metal-2
LAYER MAP 67 DATATYPE 2	3016
LAYER CTM3i 3017		// Capacitor Top Metal-3
LAYER MAP 67 DATATYPE 3	3017
LAYER CTM4i 3018		// Capacitor Top Metal-4
LAYER MAP 67 DATATYPE 4	3018
LAYER CTM5i 3019		// Capacitor Top Metal-5
LAYER MAP 67 DATATYPE 5	3019
LAYER CMM2i 3046		// Capacitor Top Metal-2
LAYER MAP 73 DATATYPE 2	3046
LAYER CMM3i 3047		// Capacitor Top Metal-3
LAYER MAP 73 DATATYPE 3	3047
LAYER CMM4i 3048		// Capacitor Top Metal-4
LAYER MAP 73 DATATYPE 4	3048
LAYER CMM5i 3049		// Capacitor Top Metal-5
LAYER MAP 73 DATATYPE 5	3049
LAYOUT TOP LAYER M1i VIA1i M1SLOTi M1DMY
LAYOUT TOP LAYER M2i VIA2i M2SLOTi M2DMY
LAYOUT TOP LAYER M3i VIA3i M3SLOTi M3DMY
LAYOUT TOP LAYER M4i VIA4i M4SLOTi M4DMY
LAYOUT TOP LAYER M5i VIA5i M5SLOTi M5DMY
LAYOUT TOP LAYER MDi VIADi MDSLOTi MDDMY M6i M6SLOTi M6DMY
// Metal in silicon
//-------------------
M1 = (M1i NOT M1SLOTi) OR M1DMY
M2 = (M2i NOT M2SLOTi) OR M2DMY
M3 = (M3i NOT M3SLOTi) OR M3DMY
M4 = (M4i NOT M4SLOTi) OR M4DMY
M5 = (M5i NOT M5SLOTi) OR M5DMY
M6 = (M6i NOT M6SLOTi) OR M6DMY
MD = (MDi NOT MDSLOTi) OR MDDMY















// Exclude the via upon CTM region
//----------------------------------


VIAt = VIA5i NOT INTERACT (CTM5i OR CMM5i)
VIAm = (VIA5i NOT INTERACT CTM5i) AND CMM5i
VIAc = VIA5i AND CTM5i
GATE = ODi AND POLYi
SD   = ODi NOT POLYi



CTM = CTM5i NOT INTERACT CMM
CMM = COPY CMM5i

CTM_3D = CTM5i INTERACT CMM 
CBM_3D = M5 AND (SIZE CMM BY 2 INSIDE OF M5 STEP Mx_S_1 * 0.7)
CBM = M5 AND (SIZE (CTM NOT INTERACT CMM) BY 2 INSIDE OF M5 STEP Mx_S_1 * 0.7)


VIA_CTM = VIA5i AND CTM



VIA_CBM = (VIA5i NOT (CTM OR CMM5i) ) AND CBM
VIA_NO_CTM_CMM_CBM = ((VIA5i NOT CTM) NOT CBM) NOT CMM5i

// POLY CHECKS
//==============

CONNECT POLYi GATE
A.R.1.POLY { @ (Poly perim*thickness / gate area) > 200 
  NET AREA RATIO POLYi GATE > 200
    [
      PERIMETER(POLYi)*0.2/AREA(GATE)
    ] RDB A.R.1.POLYi.rep POLYi GATE
}

// CO CHECKS
//============
CONNECT COi POLYi
A.R.4.CO { @ (contact area / gate area) > 10 
  CO_POLYi = COi AND POLYi
  NET AREA RATIO POLYi CO_POLYi GATE > 10   // error highlight on POLY
    [
      AREA(CO_POLYi)/AREA(GATE) + AREA(POLYi)/AREA(POLYi) - 1
    ] RDB A.R.4.CO.rep CO_POLYi GATE  
}

// M1 CHECKS
//============

CONNECT M1 POLYi SD BY COi

M1_DIOD = NET AREA RATIO SD M1 > 0
M1_MIN_DIO = NET AREA M1_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M1 { @ (M1 perim*thickness / gate area) > 400 (without effective diode) 
		 @ (M1 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M1 M1_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M1) * !!AREA(GATE) *
      (!AREA(M1_MIN_DIO) * ( PERIMETER(M1)*M1_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M1_MIN_DIO) * ( PERIMETER(M1)*M1_THICKNESS/AREA(GATE) - AREA(M1_MIN_DIO)*400 - 2200 ))
    ] RDB A.R.2.M1.rep M1 M1_MIN_DIO GATE
}









// VIA1 CHECKS
//==============



CONNECT VIA1i M1
VIA1_DIO = NET AREA RATIO SD VIA1i > 0
VIA1_MIN_DIO = NET AREA VIA1_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIA1i
// 'A.R.6' is checked by A.R.5_A.R.6.VIA1i
A.R.5_A.R.6.VIA1i { @ (VIA1 area / gate area) > 20 (without effective diode)
                    @ (VIA1 area / gate area) > Ratio (with effective diode)
   NET AREA RATIO M1 VIA1i VIA1_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M1) * !!AREA(GATE) * 
      (!AREA(VIA1_MIN_DIO) * ( AREA(VIA1i)/AREA(GATE) - 20 ) +       
      !!AREA(VIA1_MIN_DIO) * ( AREA(VIA1i)/AREA(GATE) - AREA(VIA1_MIN_DIO)*83.33 - 75 ))
    ] RDB A.R.5_A.R.6.VIA1.rep VIA1i VIA1_MIN_DIO GATE
}



// M2 CHECKS
//============

CONNECT M2 M1 BY VIA1i
CONNECT M2 M0i BY SICR_V1i
CONNECT M0i MSIi

M2_DIOD = NET AREA RATIO SD M2 > 0
M2_MIN_DIO = NET AREA M2_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M2 { @ (M2 perim*thickness / gate area) > 400 (without effective diode) 
		 @ (M2 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M2 M2_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M2) * !!AREA(GATE) *
      (!AREA(M2_MIN_DIO) * ( PERIMETER(M2)*M2_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M2_MIN_DIO) * ( PERIMETER(M2)*M2_THICKNESS/AREA(GATE) - AREA(M2_MIN_DIO)*400 - 2200 ))
    ] RDB A.R.2.M2.rep M2 M2_MIN_DIO GATE
}









// VIA2 CHECKS
//==============



CONNECT VIA2i M2
VIA2_DIO = NET AREA RATIO SD VIA2i > 0
VIA2_MIN_DIO = NET AREA VIA2_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIA2i
// 'A.R.6' is checked by A.R.5_A.R.6.VIA2i
A.R.5_A.R.6.VIA2i { @ (VIA2 area / gate area) > 20 (without effective diode)
                    @ (VIA2 area / gate area) > Ratio (with effective diode)
   NET AREA RATIO M2 VIA2i VIA2_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M2) * !!AREA(GATE) * 
      (!AREA(VIA2_MIN_DIO) * ( AREA(VIA2i)/AREA(GATE) - 20 ) +       
      !!AREA(VIA2_MIN_DIO) * ( AREA(VIA2i)/AREA(GATE) - AREA(VIA2_MIN_DIO)*83.33 - 75 ))
    ] RDB A.R.5_A.R.6.VIA2.rep VIA2i VIA2_MIN_DIO GATE
}



// M3 CHECKS
//============


CONNECT M3 M2 BY VIA2i


M3_DIOD = NET AREA RATIO SD M3 > 0
M3_MIN_DIO = NET AREA M3_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M3 { @ (M3 perim*thickness / gate area) > 400 (without effective diode) 
		 @ (M3 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M3 M3_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M3) * !!AREA(GATE) *
      (!AREA(M3_MIN_DIO) * ( PERIMETER(M3)*M3_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M3_MIN_DIO) * ( PERIMETER(M3)*M3_THICKNESS/AREA(GATE) - AREA(M3_MIN_DIO)*400 - 2200 ))
    ] RDB A.R.2.M3.rep M3 M3_MIN_DIO GATE
}









// VIA3 CHECKS
//==============



CONNECT VIA3i M3
VIA3_DIO = NET AREA RATIO SD VIA3i > 0
VIA3_MIN_DIO = NET AREA VIA3_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIA3i
// 'A.R.6' is checked by A.R.5_A.R.6.VIA3i
A.R.5_A.R.6.VIA3i { @ (VIA3 area / gate area) > 20 (without effective diode)
                    @ (VIA3 area / gate area) > Ratio (with effective diode)
   NET AREA RATIO M3 VIA3i VIA3_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M3) * !!AREA(GATE) * 
      (!AREA(VIA3_MIN_DIO) * ( AREA(VIA3i)/AREA(GATE) - 20 ) +       
      !!AREA(VIA3_MIN_DIO) * ( AREA(VIA3i)/AREA(GATE) - AREA(VIA3_MIN_DIO)*83.33 - 75 ))
    ] RDB A.R.5_A.R.6.VIA3.rep VIA3i VIA3_MIN_DIO GATE
}



// M4 CHECKS
//============


CONNECT M4 M3 BY VIA3i


M4_DIOD = NET AREA RATIO SD M4 > 0
M4_MIN_DIO = NET AREA M4_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M4 { @ (M4 perim*thickness / gate area) > 400 (without effective diode) 
		 @ (M4 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M4 M4_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M4) * !!AREA(GATE) *
      (!AREA(M4_MIN_DIO) * ( PERIMETER(M4)*M4_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M4_MIN_DIO) * ( PERIMETER(M4)*M4_THICKNESS/AREA(GATE) - AREA(M4_MIN_DIO)*400 - 2200 ))
    ] RDB A.R.2.M4.rep M4 M4_MIN_DIO GATE
}









// VIA4 CHECKS
//==============



CONNECT VIA4i M4
VIA4_DIO = NET AREA RATIO SD VIA4i > 0
VIA4_MIN_DIO = NET AREA VIA4_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIA4i
// 'A.R.6' is checked by A.R.5_A.R.6.VIA4i
A.R.5_A.R.6.VIA4i { @ (VIA4 area / gate area) > 20 (without effective diode)
                    @ (VIA4 area / gate area) > Ratio (with effective diode)
   NET AREA RATIO M4 VIA4i VIA4_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M4) * !!AREA(GATE) * 
      (!AREA(VIA4_MIN_DIO) * ( AREA(VIA4i)/AREA(GATE) - 20 ) +       
      !!AREA(VIA4_MIN_DIO) * ( AREA(VIA4i)/AREA(GATE) - AREA(VIA4_MIN_DIO)*83.33 - 75 ))
    ] RDB A.R.5_A.R.6.VIA4.rep VIA4i VIA4_MIN_DIO GATE
}



// M5 CHECKS
//============


CONNECT M5 M4 BY VIA4i


M5_DIOD = NET AREA RATIO SD M5 > 0
M5_MIN_DIO = NET AREA M5_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M5 { @ (M5 perim*thickness / gate area) > 400 (without effective diode) 
		 @ (M5 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M5 M5_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M5) * !!AREA(GATE) *
      (!AREA(M5_MIN_DIO) * ( PERIMETER(M5)*M5_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M5_MIN_DIO) * ( PERIMETER(M5)*M5_THICKNESS/AREA(GATE) - AREA(M5_MIN_DIO)*400 - 2200 ))
    ] RDB A.R.2.M5.rep M5 M5_MIN_DIO GATE
}









// VIA5 CHECKS
//==============



CONNECT CBM M5
#IFDEF MIMCAP_1d5F_2F
A.R.MIM.5.M5_CBM { @ Mx as MIM capacitor bottom metal directly connecting to OD
                   @ through underneath VIA is not allowed
  NET AREA RATIO CBM SD > 0
  NET AREA RATIO CBM GATE > 0
}
#ENDIF
#IFDEF CHECK_ALRDL
//'A.R.MIM.6CBM' is checked by A.R.MIM.6.M5_CBM
A.R.MIM.6.M5_CBM { @ Mx as MIM capacitor bottom metal directly connecting to OD
                   @ through underneath VIA is not allowed
  NET AREA RATIO CBM SD > 0
  NET AREA RATIO CBM GATE > 0
}
#ENDIF



CONNECT VIAt M5

VIA5_DIO = NET AREA RATIO SD VIAt > 0
VIA5_MIN_DIO = NET AREA VIA5_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIAt
// 'A.R.6' is checked by A.R.5_A.R.6.VIAt
A.R.5_A.R.6.VIAt { @ (VIA5 area / gate area) > 20 (without effective diode)
                    @ (VIA5 area / gate area) > Ratio (with effective diode)
   NET AREA RATIO M5 VIAt VIA5_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M5) * !!AREA(GATE) * 
      (!AREA(VIA5_MIN_DIO) * ( AREA(VIAt)/AREA(GATE) - 20 ) +       
      !!AREA(VIA5_MIN_DIO) * ( AREA(VIAt)/AREA(GATE) - AREA(VIA5_MIN_DIO)*83.33 - 75 ))
    ] RDB A.R.5_A.R.6.VIA5.rep VIAt VIA5_MIN_DIO GATE
}






CONNECT CBM_3D M5
A.R.3DMIM.R.1_CBM { @ CBM directly connecting to OD through underneath VIA is not allowed
   NET AREA RATIO CBM_3D SD > 0
     RDB A.R.3DMIM.R.1_CBM.rep CBM_3D SD
}






// M6 CHECKS
//============
//============


CONNECT CBM M5
CTMc = COPY CTM
CONNECT VIA_CTM CTM
CONNECT VIA_CBM CBM
CONNECT CTMc CBM







CONNECT M6 CTM_3D CTM CMM M5 BY VIA5i



M6_DIOD = NET AREA RATIO SD M6 > 0
M6_MIN_DIO = NET AREA M6_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.M6 { @ (M6 perim*thickness / gate area) > 400 (without effective diode) 
                 @ (M6 perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M6 M6_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(M6) * !!AREA(GATE) *
      (!AREA(M6_MIN_DIO) * ( PERIMETER(M6)*M6_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(M6_MIN_DIO) * ( PERIMETER(M6)*M6_THICKNESS/AREA(GATE) - AREA(M6_MIN_DIO)*8000 - 30000 ))
    ] RDB A.R.2.M6.rep M6 M6_MIN_DIO GATE
}







CTM_M6_WI_OD = NET AREA RATIO CTM SD > 0
CTM_M6_WO_OD = CTM NOT CTM_M6_WI_OD
CTM_M6_W_GATE_pre = NET AREA RATIO CTM GATE > 0
CTM_M6_W_GATE = CTM_M6_W_GATE_pre AND CTM_M6_WO_OD
CTM_M6_FLOATING = CTM NOT (CTM_M6_WI_OD OR CTM_M6_W_GATE)

CBM_M6_WI_OD = NET AREA RATIO CBM SD > 0
CBM_M6_WO_OD = CBM NOT CBM_M6_WI_OD
CBM_M6_W_GATE = NET AREA RATIO CBM GATE > 0
CBM_M6_FLOATING = CBM NOT (CBM_M6_WI_OD OR CBM_M6_W_GATE)


BAL_CTM_M6_GROUND = CTM_M6_WI_OD INTERACT CBM_M6_WI_OD
BAL_CBM_M6_GROUND = CBM_M6_WI_OD INTERACT CTM_M6_WI_OD
BAL_CTM_M6_FLOAT  = CTM_M6_FLOATING INTERACT CBM_M6_FLOATING
BAL_CBM_M6_FLOAT  = CBM_M6_FLOATING INTERACT CTM_M6_FLOATING

BAL_CTM_M6   = BAL_CTM_M6_GROUND OR BAL_CTM_M6_FLOAT
BAL_CBM_M6   = BAL_CBM_M6_GROUND OR BAL_CBM_M6_FLOAT
unBAL_CTM_M6 = CTM NOT INTERACT BAL_CTM_M6
unBAL_CBM_M6 = CBM NOT INTERACT BAL_CBM_M6
unBAL_CTM_M6_FLOAT  = CTM_M6_WO_OD INTERACT unBAL_CTM_M6
unBAL_CTM_M6_GROUND = CTM_M6_WI_OD INTERACT unBAL_CTM_M6
unBAL_CBM_M6_FLOAT  = CBM_M6_WO_OD INTERACT unBAL_CBM_M6
unBAL_CBM_M6_GROUND = CBM_M6_WI_OD INTERACT unBAL_CBM_M6

CTM_NODE_BAL_M6_WI_OD = CTM INTERACT BAL_CTM_M6_GROUND
CTM_NODE_BAL_M6_WO_OD = CTM INTERACT BAL_CTM_M6_FLOAT
CONNECT CTM_NODE_BAL_M6_WI_OD CTM
CONNECT CTM_NODE_BAL_M6_WO_OD CTM
CBM_NODE_BAL_M6_WI_OD = CTM INTERACT BAL_CBM_M6_GROUND
CBM_NODE_BAL_M6_WO_OD = CTM INTERACT BAL_CBM_M6_FLOAT
CONNECT CBM_NODE_BAL_M6_WI_OD CBM
CONNECT CBM_NODE_BAL_M6_WO_OD CBM
CTM_NODE_unBAL_M6_WI_OD = CTM INTERACT unBAL_CTM_M6_GROUND
CTM_NODE_unBAL_M6_WO_OD = CTM INTERACT unBAL_CTM_M6_FLOAT
CONNECT CTM_NODE_unBAL_M6_WI_OD CTM
CONNECT CTM_NODE_unBAL_M6_WO_OD CTM
CBM_NODE_unBAL_M6_WI_OD = CTM INTERACT unBAL_CBM_M6_GROUND
CBM_NODE_unBAL_M6_WO_OD = CTM INTERACT unBAL_CBM_M6_FLOAT
CONNECT CBM_NODE_unBAL_M6_WI_OD CBM
CONNECT CBM_NODE_unBAL_M6_WO_OD CBM

CTM_M6_DIO = NET AREA SD >= DIO_AREA

A.R.MIM.1.M6.CBM { @ Maximum ratio of M6 perimeter area to the MIM cap. when
                      @ CTM is not connected to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^Balance_Ratio
   NET AREA RATIO M6 CBM_NODE_BAL_M6_WO_OD > Balance_Ratio ACCUMULATE
   [!!AREA(CBM_NODE_BAL_M6_WO_OD)*(PERIMETER(M6)*M6_THICKNESS/AREA(CBM_NODE_BAL_M6_WO_OD))]
     RDB A.R.MIM.1.M6.CBM.rep M6 CBM_NODE_BAL_M6_WO_OD BY LAYER
}

A.R.MIM.1.M6.CTM { @ Maximum ratio of M6 perimeter area to the MIM cap. when
                      @ CTM is not connected to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^Balance_Ratio
   NET AREA RATIO M6 CTM_NODE_BAL_M6_WO_OD > Balance_Ratio ACCUMULATE
   [!!AREA(CTM_NODE_BAL_M6_WO_OD)*(PERIMETER(M6)*M6_THICKNESS/AREA(CTM_NODE_BAL_M6_WO_OD))]
     RDB A.R.MIM.1.M6.CTM.rep M6 CTM_NODE_BAL_M6_WO_OD BY LAYER
}

A.R.MIM.2.M6.CTM.A { @ Unbalanced MIM structure:
                      @ CTM is connceted to OD with OD area < ^DIO_AREA and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD
  NET AREA RATIO M6 CTM_NODE_unBAL_M6_WI_OD SD > 0 ACCUMULATE
      [!!AREA(CTM_NODE_unBAL_M6_WI_OD) * (DIO_AREA - AREA(SD))]
      RDB A.R.MIM.2.M6.CTM.WO_DIO.rep M6 CTM_NODE_unBAL_M6_WI_OD SD BY LAYER
}

A.R.MIM.2.M6.CTM.B { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD
  NET AREA RATIO M6 CTM_M6_DIO CTM_NODE_unBAL_M6_WI_OD > 0 ACCUMULATE		      
  [!!AREA(CTM_NODE_unBAL_M6_WI_OD)*!!AREA(CTM_M6_DIO)*(PERIMETER(M6)*M6_THICKNESS/AREA(CTM_NODE_unBAL_M6_WI_OD) - AREA(CTM_M6_DIO)*400 - 2200 )]
     RDB A.R.MIM.2.M6.CTM.WI_DIO.rep M6 CTM_NODE_unBAL_M6_WI_OD CTM_M6_DIO BY LAYER
}

A.R.MIM.2.M6.CBM { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^unBalance_Ratio
  NET AREA RATIO M6 CBM_NODE_unBAL_M6_WO_OD > unBalance_Ratio ACCUMULATE
  [!!AREA(CBM_NODE_unBAL_M6_WO_OD)*(PERIMETER(M6)*M6_THICKNESS/AREA(CBM_NODE_unBAL_M6_WO_OD))]
     RDB A.R.MIM.2.M6.CBM.rep M6 CBM_NODE_unBAL_M6_WO_OD BY LAYER
}

A.R.MIM.3.M6.CTM { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD < ^unBalance_Ratio
  NET AREA RATIO M6 CTM_NODE_unBAL_M6_WO_OD > unBalance_Ratio ACCUMULATE
  [!!AREA(CTM_NODE_unBAL_M6_WO_OD)*(PERIMETER(M6)*M6_THICKNESS/AREA(CTM_NODE_unBAL_M6_WO_OD))]
     RDB A.R.MIM.3.M6.CTM.rep M6 CTM_NODE_unBAL_M6_WO_OD BY LAYER
}

A.R.MIM.3.M6.CBM.A { @ Unbalanced MIM structure:
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD with OD area < ^DIO_AREA
  NET AREA RATIO M6 CBM_NODE_unBAL_M6_WI_OD SD > 0 ACCUMULATE
     [!!AREA(CBM_NODE_unBAL_M6_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.3.M6.CBM.WO_DIO.rep M6 CBM_NODE_unBAL_M6_WI_OD SD BY LAYER
}

A.R.MIM.3.M6.CBM.B { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD
  NET AREA RATIO M6 CTM_M6_DIO CBM_NODE_unBAL_M6_WI_OD > 0 ACCUMULATE		      
  [!!AREA(CBM_NODE_unBAL_M6_WI_OD)*!!AREA(CTM_M6_DIO)*(PERIMETER(M6)*M6_THICKNESS/AREA(CBM_NODE_unBAL_M6_WI_OD) - AREA(CTM_M6_DIO)*400 - 2200 )]
     RDB A.R.MIM.3.M6.CBM.WI_DIO.rep M6 CBM_NODE_unBAL_M6_WI_OD CTM_M6_DIO BY LAYER
 }

A.R.MIM.4.M6.CTM.A { @ Balanced MIM structure but the OD area connected to CTM < ^DIO_AREA
  NET AREA RATIO M6 CTM_NODE_BAL_M6_WI_OD SD > 0 ACCUMULATE
    [!!AREA(CTM_NODE_BAL_M6_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.4.M6.CTM.WO_DIO.rep M6 CTM_NODE_BAL_M6_WI_OD SD BY LAYER
}

A.R.MIM.4.M6.CTM.B { @ Max. ratio of M6 metal side-wall area to CTM area.
                @ Both CTM and CBM associated M5 are connected to OD.
  NET AREA RATIO M6 CTM_M6_DIO CTM_NODE_BAL_M6_WI_OD > 0 ACCUMULATE
  [ !!AREA(CTM_NODE_BAL_M6_WI_OD) * ( (PERIMETER(M6) * M6_THICKNESS) / AREA(CTM_NODE_BAL_M6_WI_OD) - AREA(CTM_M6_DIO)*400 - 2200 )
    ] RDB A.R.MIM.4.M6.CTM.WI_DIO.rep M6 CTM_NODE_BAL_M6_WI_OD CTM_M6_DIO BY LAYER
}

A.R.MIM.4.M6.CBM.A { @ Balanced MIM structure but the OD area connected to Mx as capacitor bottom metal < ^DIO_AREA
  NET AREA RATIO M6 CBM_NODE_BAL_M6_WI_OD SD > 0 ACCUMULATE
    [!!AREA(CBM_NODE_BAL_M6_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.4.M6.CBM.WO_DIO.rep M6 CBM_NODE_BAL_M6_WI_OD SD BY LAYER
}

A.R.MIM.4.M6.CBM.B { @ Max. ratio of M6 metal side-wall area to CBM area.
                @ Both CTM and CBM associated M5 are connected to OD.
  NET AREA RATIO M6 CTM_M6_DIO CBM_NODE_BAL_M6_WI_OD > 0 ACCUMULATE		    
  [
      !!AREA(CBM_NODE_BAL_M6_WI_OD) * ( (PERIMETER(M6) * M6_THICKNESS) / AREA(CBM_NODE_BAL_M6_WI_OD) - AREA(CTM_M6_DIO)*400 - 2200 )
    ] RDB A.R.MIM.4.CBM.M6.WI_DIO.rep M6 CBM_NODE_BAL_M6_WI_OD CTM_M6_DIO BY LAYER
}

#IFDEF MIMCAP_1d5F_2F


A.R.MIM.5.M6_CTM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is not connected to OD and
                      @ M6 as capacitor bottom metal is connected to OD
  A = STAMP unBAL_CTM_M6 BY CTM
  NET AREA RATIO A M6 > 0 [!!AREA(M6)*AREA(A)]
}

A.R.MIM.5.M6_CBM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is connected to OD and
                      @ M6 as capacitor bottom metal is not connected to OD
  A = STAMP unBAL_CBM_M6 BY CBM
  NET AREA RATIO A M6 > 0 [!!AREA(M6)*AREA(A)]
}
#ENDIF

#IFDEF CHECK_ALRDL
//'A.R.MIM.6CTM' is checked by A.R.MIM.6.M6_CTM 
A.R.MIM.6.M6_CTM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is not connected to OD and
                      @ M6 as capacitor bottom metal is connected to OD
  A = STAMP unBAL_CTM_M6 BY CTM
  NET AREA RATIO A M6 > 0 [!!AREA(M6)*AREA(A)]
}
//'A.R.MIM.6CBM' is checked by A.R.MIM.6.M6_CBM
A.R.MIM.6.M6_CBM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is connected to OD and
                      @ M6 as capacitor bottom metal is not connected to OD
  A = STAMP unBAL_CBM_M6 BY CBM
  NET AREA RATIO A M6 > 0 [!!AREA(M6)*AREA(A)]
}

#ENDIF









ACC_M6_CTM  = NET AREA RATIO M6 CTM  > 0 ACCUMULATE
                     [!!AREA(M6) * PERIMETER(M6) * M6_THICKNESS / AREA(CTM)]
ACC_M6_CTMc = NET AREA RATIO M6 CTMc > 0 ACCUMULATE
                     [!!AREA(M6) * PERIMETER(M6) * M6_THICKNESS / AREA(CTMc)]

					 
					 


//3D MIM CHECK
//============

CTM_SD     = NET AREA RATIO SD CTM_3D > 0
CTM_DIO    = NET AREA CTM_SD >= 0.203
CTM_WI_DIO = NET AREA RATIO CTM_3D CTM_DIO > 0	// CTM with DIODE
CTM_WO_DIO = CTM_3D NOT  CTM_WI_DIO		// CTM without DIODE
CONNECT CTM_WO_DIO CTM_3D
CTM_DIOD   = NET AREA SD >= 0.203
CONNECT CTM_DIOD SD
VARIABLE MT_THICKNESS       0.99


VIA_CBM_3D = (VIA5i NOT (CTM_3D OR CMM)) AND CBM_3D
VIA_CMM = (VIA5i NOT CTM_3D ) AND CMM

CONNECT CBM_3D M5
CTMa = COPY CTM_3D
CONNECT VIA_CMM CMM
CONNECT VIA_CBM_3D CBM_3D
CONNECT CTMa CBM_3D

CMM_SD     = NET AREA RATIO SD CMM > 0
CMM_DIO    = NET AREA CMM_SD >= 0.203
CMM_WI_DIO = NET AREA RATIO CMM CMM_DIO > 0	// CMM with DIODE
CMM_WO_DIO = CMM NOT  CMM_WI_DIO		// CMM without DIODE
CONNECT CMM_WO_DIO CMM
CBM_3D_SD     = NET AREA RATIO SD CBM_3D > 0
CBM_3D_DIO    = NET AREA CBM_3D_SD >= 0.203
CBM_3D_WI_DIO = NET AREA RATIO CBM_3D CBM_3D_DIO > 0	// CBM with DIODE
CBM_3D_WO_DIO = CBM_3D  NOT  CBM_3D_WI_DIO		// CBM without DIODE
CONNECT CBM_3D_WO_DIO  CBM_3D
CTM_BAL_11 = CTM_WO_DIO INTERACT CMM_WO_DIO
CTM_BAL_1  = CTM_3D INTERACT CTM_BAL_11
CONNECT CTM_BAL_1 CTM_3D
CTM_UNBAL_22 = CTM_WI_DIO INTERACT CMM_WO_DIO
CTM_UNBAL_2  = CTM_3D INTERACT CTM_UNBAL_22
CONNECT CTM_UNBAL_2 CTM_3D
CTM_UNBAL_33 = CTM_WO_DIO INTERACT CMM_WI_DIO
CTM_UNBAL_3  = CTM_3D INTERACT CTM_UNBAL_33
CONNECT CTM_UNBAL_3 CTM_3D
CTM_BAL_44 = CTM_WI_DIO INTERACT CMM_WI_DIO
CTM_BAL_4  = CTM_3D INTERACT CTM_BAL_44 
CONNECT CTM_BAL_4 CTM_3D


CMM_11 = CMM_WO_DIO INTERACT CTM_WO_DIO
CMM_1  = CTM_3D INTERACT CMM_11
CONNECT CMM_1 CMM
CMM_22 = CMM_WO_DIO INTERACT CTM_WI_DIO
CMM_2  = CTM_3D INTERACT CMM_22
CONNECT CMM_2 CMM
CMM_33 = CMM_WI_DIO INTERACT CTM_WO_DIO
CMM_3  = CTM_3D INTERACT CMM_33
CONNECT CMM_3 CMM
CMM_44 = CMM_WI_DIO INTERACT CTM_WI_DIO
CMM_4  = CTM_3D INTERACT CMM_44 
CONNECT CMM_4 CMM

CMM_DIOD   = NET AREA SD >= 0.203
CONNECT CMM_DIOD SD
CBM_3D_DIOD   = NET AREA SD >= 0.203
CONNECT CBM_3D_DIOD SD

CMM_BAL_11 = CMM_WO_DIO INTERACT CBM_3D_WO_DIO
CMM_BAL_1  = CMM INTERACT CMM_BAL_11
CONNECT CMM_BAL_1 CMM
CMM_UNBAL_22 = CMM_WI_DIO INTERACT CBM_3D_WO_DIO
CMM_UNBAL_2  = CMM INTERACT CMM_UNBAL_22
CONNECT CMM_UNBAL_2 CMM
CMM_UNBAL_33 = CMM_WO_DIO INTERACT CBM_3D_WI_DIO
CMM_UNBAL_3  = CMM INTERACT CMM_UNBAL_33
CONNECT CMM_UNBAL_3 CMM
CMM_BAL_44 = CMM_WI_DIO INTERACT CBM_3D_WI_DIO
CMM_BAL_4  = CMM INTERACT CMM_BAL_44 
CONNECT CMM_BAL_4 CMM


CBM_BAL_11 = CBM_3D_WO_DIO INTERACT CMM_WO_DIO
CBM_BAL_1  = CMM INTERACT CBM_BAL_11
CONNECT CBM_BAL_1 CBM_3D
CBM_UNBAL_22 = CBM_3D_WO_DIO INTERACT CMM_WI_DIO
CBM_UNBAL_2  = CMM INTERACT CBM_UNBAL_22
CONNECT CBM_UNBAL_2 CBM_3D
CBM_UNBAL_33 = CBM_3D_WI_DIO INTERACT CMM_WO_DIO
CBM_UNBAL_3  = CMM INTERACT CBM_UNBAL_33
CONNECT CBM_UNBAL_3 CBM_3D
CBM_BAL_44 = CBM_3D_WI_DIO INTERACT CMM_WI_DIO
CBM_BAL_4  = CMM INTERACT CBM_BAL_44
CONNECT CBM_BAL_4 CBM_3D






A.R.3DMIM.CTM.1 { @ Max. ratio of M6 perimeter area to CTM area.
                  @ When neither CTM nor CMM is connected to OD.
  NET AREA RATIO M6  CTM_BAL_1 > 0
    [
      !!AREA(CTM_BAL_1) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CTM_BAL_1) - 1000 )
    ] RDB A.R.3DMIM.CTM.1.rep M6 CTM_BAL_1
}

A.R.3DMIM.CMM.1 { @ Max. ratio of M6 perimeter area to CTM area.
                  @ When neither CTM nor CMM is connected to OD.
  NET AREA RATIO M6  CMM_1 > 0
    [
      !!AREA(CMM_1) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CMM_1) - 1000 )
    ] RDB A.R.3DMIM.CMM.1.rep M6 CMM_1
}


A.R.3DMIM.CMM.2 { @ Max. ratio of M6 perimeter area to CMM area.
                  @ When neither CMM nor CBM is connected to OD.
  NET AREA RATIO M6  CMM_BAL_1 > 0
    [
      !!AREA(CMM_BAL_1) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CMM_BAL_1) - 1000 )
    ] RDB A.R.3DMIM.CMM.2.rep M6 CMM_BAL_1
}

A.R.3DMIM.CBM.1 { @ Max. ratio of M6 perimeter area to CMM area.
                  @ When neither CMM nor CBM is connected to OD.
  NET AREA RATIO M6  CBM_BAL_1 > 0
    [
      !!AREA(CBM_BAL_1) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CBM_BAL_1) - 1000 )
    ] RDB A.R.3DMIM.CBM.1.rep M6 CBM_BAL_1
}



A.R.3DMIM.CTM.2 { @ Max. ratio of M6 perimeter area to CTM area.
                  @ When both CTM and CMM are connected to OD.
  NET AREA RATIO M6 CTM_DIOD CTM_BAL_4 > 0
    [
      !!AREA(CTM_BAL_4) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CTM_BAL_4) - AREA(CTM_DIOD)*400 - 2200 )
    ] RDB A.R.3DMIM.CTM.2.rep M6 CTM_DIOD CTM_BAL_4
}


A.R.3DMIM.CMM.3 { @ Max. ratio of M6 perimeter area to CTM area.
                  @ When both CTM and CMM are connected to OD.
  NET AREA RATIO M6 CMM_DIOD CMM_4 > 0
    [
      !!AREA(CMM_4) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CMM_4) - AREA(CMM_DIOD)*400 - 2200 )
    ] RDB A.R.3DMIM.CMM.3.rep M6 CMM_DIOD CMM_4
}




A.R.3DMIM.CMM.4 { @ Max. ratio of M6 perimeter area to CMM area.
                  @ When both CMM and CBM are connected to OD.
  NET AREA RATIO M6 CMM_DIOD CMM_BAL_4 > 0
    [
      !!AREA(CMM_BAL_4) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CMM_BAL_4) - AREA(CMM_DIOD)*400 - 2200 )
    ] RDB A.R.3DMIM.CMM.4.rep M6 CMM_DIOD CMM_BAL_4
}

A.R.3DMIM.CBM.2 { @ Max. ratio of M6 perimeter area to CMM area.
                  @ When both CMM and CBM are connected to OD.
  NET AREA RATIO M6 CBM_3D_DIOD CBM_BAL_4  > 0
    [
      !!AREA(CBM_BAL_4) * ( (PERIMETER(M6)*MT_THICKNESS)/AREA(CBM_BAL_4) - AREA(CBM_3D_DIOD)*400 - 2200 )
    ] RDB A.R.3DMIM.CBM.2.rep M6 CBM_3D_DIOD CBM_BAL_4
}



A.R.3DMIM.R.1_A_CTM { @ Unbalance structure is not allowed 
					  @ CTM is connected to OD and CMM is not connected to OD
	NET AREA RATIO CTM_UNBAL_2 CTM_3D > 0
    [
      !!AREA(CTM_UNBAL_2) + AREA(CTM_3D)/AREA(CTM_3D) -1
    ] RDB A.R.3DMIM.R.1_A_CTM.rep  CTM_3D	
	
}

A.R.3DMIM.R.1_B_CTM { @ Unbalance structure is not allowed 
				      @ CTM is not connected to OD and CMM is connected to OD
	  NET AREA RATIO CMM_3 CMM > 0
    [
      !!AREA(CMM_3) + AREA(CMM)/AREA(CMM) -1
    ] RDB A.R.3DMIM.R.1_B_CTM.rep CMM
}
A.R.3DMIM.R.1_C_CTM { @ Unbalance structure is not allowed 
				      @ CTM or CMM is only connected to Gate and not connected to OD
					  @ when one terminal of MIM is connected to both OD and Gate, it is treated as the terminal connecting "OD".
	  NET AREA RATIO CTM_WO_DIO GATE > 0
	  NET AREA RATIO CMM_WO_DIO GATE > 0
}

A.R.3DMIM.R.1_A_CMM { @ Unbalance structure is not allowed 
					  @ CMM is connected to OD and CBM is not connected to OD
	NET AREA RATIO CMM_UNBAL_2 CMM > 0
    [
      !!AREA(CMM_UNBAL_2) + AREA(CMM)/AREA(CMM) -1
    ] RDB A.R.3DMIM.R.1_A_CMM.rep  CMM	
	
}

A.R.3DMIM.R.1_B_CMM { @ Unbalance structure is not allowed 
				      @ CMM is not connected to OD and CBM is connected to OD
    NET AREA RATIO CBM_UNBAL_3 CBM_3D > 0
    [
      !!AREA(CBM_UNBAL_3) + AREA(CBM_3D)/AREA(CBM_3D) -1
    ] RDB A.R.3DMIM.R.1_B_CMM.rep CBM_3D
}

A.R.3DMIM.R.1_C_CMM { @ Unbalance structure is not allowed 
				      @ CMM or CBM is only connected to Gate and not connected to OD
					  @ when one terminal of MIM is connected to both OD and Gate, it is treated as the terminal connecting "OD".
	  NET AREA RATIO CMM_WO_DIO GATE > 0
	  NET AREA RATIO CBM_3D_WO_DIO GATE > 0
}
					 
                    
#IFNDEF THICK_40K
#IFNDEF THICK_20K




    
// VIAD CHECKS
//==============

CONNECT VIADi M6


VIAD_DIO = NET AREA RATIO SD VIADi > 0
VIAD_MIN_DIO = NET AREA VIAD_DIO > 0.203	// minimum effective diode 0.203
// 'A.R.5' is checked by A.R.5_A.R.6.VIAD
// 'A.R.6' is checked by A.R.5_A.R.6.VIAD
A.R.5_A.R.6.VIAD { @ (VIAD area / gate area) > 20 (without effective diode) 
	 	   @ (VIAD area / gate area) > Ratio (with effective diode) 
  NET AREA RATIO M6 VIADi VIAD_MIN_DIO GATE > 0	// no effective diode
    [
      !!AREA(M6) * !!AREA(GATE) * 
      (!AREA(VIAD_MIN_DIO) * ( AREA(VIADi)/AREA(GATE) - 20 ) +       
      !!AREA(VIAD_MIN_DIO) * ( AREA(VIADi)/AREA(GATE) - AREA(VIAD_MIN_DIO)*83.33 - 75 ))	
    ] RDB A.R.5_A.R.6.VIAD.rep VIADi VIAD_MIN_DIO GATE
}



CONNECT MD M6 BY VIADi


CTM_MD_WI_OD = NET AREA RATIO CTM SD > 0
CTM_MD_WO_OD = CTM NOT CTM_MD_WI_OD
CTM_MD_W_GATE_pre = NET AREA RATIO CTM GATE > 0
CTM_MD_W_GATE = CTM_MD_W_GATE_pre AND CTM_MD_WO_OD
CTM_MD_FLOATING = CTM NOT (CTM_MD_WI_OD OR CTM_MD_W_GATE)

CBM_MD_WI_OD = NET AREA RATIO CBM SD > 0
CBM_MD_WO_OD = CBM NOT CBM_MD_WI_OD
CBM_MD_W_GATE = NET AREA RATIO CBM GATE > 0
CBM_MD_FLOATING = CBM NOT (CBM_MD_WI_OD OR CBM_MD_W_GATE)


BAL_CTM_MD_GROUND = CTM_MD_WI_OD INTERACT CBM_MD_WI_OD
BAL_CBM_MD_GROUND = CBM_MD_WI_OD INTERACT CTM_MD_WI_OD
BAL_CTM_MD_FLOAT  = CTM_MD_FLOATING INTERACT CBM_MD_FLOATING
BAL_CBM_MD_FLOAT  = CBM_MD_FLOATING INTERACT CTM_MD_FLOATING

BAL_CTM_MD   = BAL_CTM_MD_GROUND OR BAL_CTM_MD_FLOAT
BAL_CBM_MD   = BAL_CBM_MD_GROUND OR BAL_CBM_MD_FLOAT
unBAL_CTM_MD = CTM NOT INTERACT BAL_CTM_MD
unBAL_CBM_MD = CBM NOT INTERACT BAL_CBM_MD
unBAL_CTM_MD_FLOAT  = CTM_MD_WO_OD INTERACT unBAL_CTM_MD
unBAL_CTM_MD_GROUND = CTM_MD_WI_OD INTERACT unBAL_CTM_MD
unBAL_CBM_MD_FLOAT  = CBM_MD_WO_OD INTERACT unBAL_CBM_MD
unBAL_CBM_MD_GROUND = CBM_MD_WI_OD INTERACT unBAL_CBM_MD

CTM_NODE_BAL_MD_WI_OD = CTM INTERACT BAL_CTM_MD_GROUND
CTM_NODE_BAL_MD_WO_OD = CTM INTERACT BAL_CTM_MD_FLOAT
CONNECT CTM_NODE_BAL_MD_WI_OD CTM
CONNECT CTM_NODE_BAL_MD_WO_OD CTM
CBM_NODE_BAL_MD_WI_OD = CTM INTERACT BAL_CBM_MD_GROUND
CBM_NODE_BAL_MD_WO_OD = CTM INTERACT BAL_CBM_MD_FLOAT
CONNECT CBM_NODE_BAL_MD_WI_OD CBM
CONNECT CBM_NODE_BAL_MD_WO_OD CBM
CTM_NODE_unBAL_MD_WI_OD = CTM INTERACT unBAL_CTM_MD_GROUND
CTM_NODE_unBAL_MD_WO_OD = CTM INTERACT unBAL_CTM_MD_FLOAT
CONNECT CTM_NODE_unBAL_MD_WI_OD CTM
CONNECT CTM_NODE_unBAL_MD_WO_OD CTM
CBM_NODE_unBAL_MD_WI_OD = CTM INTERACT unBAL_CBM_MD_GROUND
CBM_NODE_unBAL_MD_WO_OD = CTM INTERACT unBAL_CBM_MD_FLOAT
CONNECT CBM_NODE_unBAL_MD_WI_OD CBM
CONNECT CBM_NODE_unBAL_MD_WO_OD CBM

CTM_MD_DIO = NET AREA SD >= DIO_AREA


A.R.MIM.1.MD.CBM { @ Maximum ratio of MD perimeter area to the MIM cap. when
                      @ CTM is not connected to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^Balance_Ratio
  A = NET AREA RATIO MD M6 CBM_NODE_BAL_MD_WO_OD CTMc > Balance_Ratio ACCUMULATE ACC_M6_CTMc
    [!!AREA(CBM_NODE_BAL_MD_WO_OD)*(PERIMETER(MD)*MD_THICKNESS/AREA(CBM_NODE_BAL_MD_WO_OD))]
     RDB A.R.MIM.1.MD.CBM.rep MD CBM_NODE_BAL_MD_WO_OD BY LAYER
     A INTERACT CBM_NODE_BAL_MD_WO_OD
}

A.R.MIM.1.MD.CTM { @ Maximum ratio of MD perimeter area to the MIM cap. when
                      @ CTM is not connected to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^Balance_Ratio
  A = NET AREA RATIO MD M6 CTM_NODE_BAL_MD_WO_OD CTM > Balance_Ratio ACCUMULATE ACC_M6_CTM
     [!!AREA(CTM_NODE_BAL_MD_WO_OD)*(PERIMETER(MD)*MD_THICKNESS/AREA(CTM_NODE_BAL_MD_WO_OD))]
     RDB A.R.MIM.1.MD.CTM.rep MD CTM_NODE_BAL_MD_WO_OD BY LAYER
  A INTERACT CTM_NODE_BAL_MD_WO_OD
}

A.R.MIM.2.MD.CTM.A { @ Unbalanced MIM structure:
                      @ CTM is connceted to OD with OD area < ^DIO_AREA and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD
  NET AREA RATIO MD CTM_NODE_unBAL_MD_WI_OD SD > 0 ACCUMULATE
      [!!AREA(CTM_NODE_unBAL_MD_WI_OD) * (DIO_AREA - AREA(SD))]
      RDB A.R.MIM.2.MD.CTM.WO_DIO.rep MD CTM_NODE_unBAL_MD_WI_OD SD BY LAYER
}

A.R.MIM.2.MD.CTM.B { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD
  A = NET AREA RATIO MD M6 CTM_NODE_unBAL_MD_WI_OD CTM_MD_DIO CTM > 0 ACCUMULATE ACC_M6_CTM
  [!!AREA(CTM_NODE_unBAL_MD_WI_OD)*!!AREA(CTM_MD_DIO)*(PERIMETER(MD)*MD_THICKNESS/AREA(CTM_NODE_unBAL_MD_WI_OD) - AREA(CTM_MD_DIO)*400 - 2200 )]
     RDB A.R.MIM.2.MD.CTM.WI_DIO.rep MD CTM_NODE_unBAL_MD_WI_OD CTM_MD_DIO BY LAYER
  A INTERACT CTM_NODE_unBAL_MD_WI_OD
}

A.R.MIM.2.MD.CBM { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is not connected to OD < ^unBalance_Ratio
  A = NET AREA RATIO MD M6 CBM_NODE_unBAL_MD_WO_OD CTMc > unBalance_Ratio ACCUMULATE ACC_M6_CTMc
  
    [!!AREA(CBM_NODE_unBAL_MD_WO_OD)*(PERIMETER(MD)*MD_THICKNESS/AREA(CBM_NODE_unBAL_MD_WO_OD))]
     RDB A.R.MIM.2.MD.CBM.rep MD CBM_NODE_unBAL_MD_WO_OD BY LAYER
  A INTERACT CBM_NODE_unBAL_MD_WO_OD
}

A.R.MIM.3.MD.CTM { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD < ^unBalance_Ratio
  A = NET AREA RATIO MD M6 CTM_NODE_unBAL_MD_WO_OD CTM > unBalance_Ratio ACCUMULATE ACC_M6_CTM
  [!!AREA(CTM_NODE_unBAL_MD_WO_OD)*(PERIMETER(MD)*MD_THICKNESS/AREA(CTM_NODE_unBAL_MD_WO_OD))]
     RDB A.R.MIM.3.MD.CTM.rep MD CTM_NODE_unBAL_MD_WO_OD BY LAYER
  A INTERACT CTM_NODE_unBAL_MD_WO_OD
}

A.R.MIM.3.MD.CBM.A { @ Unbalanced MIM structure:
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD with OD area < ^DIO_AREA
  NET AREA RATIO MD CBM_NODE_unBAL_MD_WI_OD SD > 0 ACCUMULATE
     [!!AREA(CBM_NODE_unBAL_MD_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.3.MD.CBM.WO_DIO.rep MD CBM_NODE_unBAL_MD_WI_OD SD BY LAYER
}

A.R.MIM.3.MD.CBM.B { @ Maximum ratio of the metal area to the MIM cap. when
                      @ CTM is not connceted to OD and
                      @ Mx as MIM capacitor metal bottom metal is connected to OD
  A = NET AREA RATIO MD M6 CBM_NODE_unBAL_MD_WI_OD CTM_MD_DIO CTMc > 0 ACCUMULATE ACC_M6_CTMc
  
    [!!AREA(CBM_NODE_unBAL_MD_WI_OD)*!!AREA(CTM_MD_DIO)*(PERIMETER(MD)*MD_THICKNESS/AREA(CBM_NODE_unBAL_MD_WI_OD) - AREA(CTM_MD_DIO)*400 - 2200 )]
     RDB A.R.MIM.3.MD.CBM.WI_DIO.rep MD CBM_NODE_unBAL_MD_WI_OD CTM_MD_DIO BY LAYER
  A INTERACT CBM_NODE_unBAL_MD_WI_OD
 }

A.R.MIM.4.MD.CTM.A { @ Balanced MIM structure but the OD area connected to CTM < ^DIO_AREA
  NET AREA RATIO MD CTM_NODE_BAL_MD_WI_OD SD > 0 ACCUMULATE
    [!!AREA(CTM_NODE_BAL_MD_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.4.MD.CTM.WO_DIO.rep MD CTM_NODE_BAL_MD_WI_OD SD BY LAYER
}

A.R.MIM.4.MD.CTM.B { @ Max. ratio of M6 metal side-wall area to CTM area.
                @ Both CTM and CBM associated M5 are connected to OD.
  A = NET AREA RATIO MD CTM_NODE_BAL_MD_WI_OD CTM_MD_DIO CTM > 0 ACCUMULATE ACC_M6_CTM
  
    [ !!AREA(CTM_NODE_BAL_MD_WI_OD) * ( (PERIMETER(MD) * MD_THICKNESS) / AREA(CTM_NODE_BAL_MD_WI_OD) - AREA(CTM_MD_DIO)*400 - 2200 )
    ] RDB A.R.MIM.4.MD.CTM.WI_DIO.rep MD CTM_NODE_BAL_MD_WI_OD CTM_MD_DIO BY LAYER
  A INTERACT CTM_NODE_BAL_MD_WI_OD
}

A.R.MIM.4.MD.CBM.A { @ Balanced MIM structure but the OD area connected to Mx as capacitor bottom metal < ^DIO_AREA
  NET AREA RATIO MD CBM_NODE_BAL_MD_WI_OD SD > 0 ACCUMULATE
    [!!AREA(CBM_NODE_BAL_MD_WI_OD) * (DIO_AREA - AREA(SD))]
     RDB A.R.MIM.4.MD.CBM.WO_DIO.rep MD CBM_NODE_BAL_MD_WI_OD SD BY LAYER
}

A.R.MIM.4.MD.CBM.B { @ Max. ratio of M6 metal side-wall area to CBM area.
                @ Both CTM and CBM associated M5 are connected to OD.
  A = NET AREA RATIO MD CBM_NODE_BAL_MD_WI_OD CTM_MD_DIO CTMc > 0 ACCUMULATE ACC_M6_CTMc
  
    [
      !!AREA(CBM_NODE_BAL_MD_WI_OD) * ( (PERIMETER(MD) * MD_THICKNESS) / AREA(CBM_NODE_BAL_MD_WI_OD) - AREA(CTM_MD_DIO)*400 - 2200 )
    ] RDB A.R.MIM.4.CBM.MD.WI_DIO.rep MD CBM_NODE_BAL_MD_WI_OD CTM_MD_DIO BY LAYER
  A INTERACT CBM_NODE_BAL_MD_WI_OD
}

#IFDEF MIMCAP_1d5F_2F


A.R.MIM.5.MD_CTM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is not connected to OD and
                      @ MD as capacitor bottom metal is connected to OD
  A = STAMP unBAL_CTM_MD BY CTM
  NET AREA RATIO A MD > 0 [!!AREA(MD)*AREA(A)]
}

A.R.MIM.5.MD_CBM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is connected to OD and
                      @ MD as capacitor bottom metal is not connected to OD
  A = STAMP unBAL_CBM_MD BY CBM
  NET AREA RATIO A MD > 0 [!!AREA(MD)*AREA(A)]
}
#ENDIF

#IFDEF CHECK_ALRDL
//'A.R.MIM.6CTM' is checked by A.R.MIM.6.MD_CTM 
A.R.MIM.6.MD_CTM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is not connected to OD and
                      @ MD as capacitor bottom metal is connected to OD
  A = STAMP unBAL_CTM_MD BY CTM
  NET AREA RATIO A MD > 0 [!!AREA(MD)*AREA(A)]
}
//'A.R.MIM.6CBM' is checked by A.R.MIM.6.MD_CBM
A.R.MIM.6.MD_CBM { @ Below condition is not allowed for 1.5fF/um2 and 2fF/um2 MIM capacitance
                      @ CTM is connected to OD and
                      @ MD as capacitor bottom metal is not connected to OD
  A = STAMP unBAL_CBM_MD BY CBM
  NET AREA RATIO A MD > 0 [!!AREA(MD)*AREA(A)]
}

#ENDIF












// MD CHECKS
//============

MD_DIOD = NET AREA RATIO SD MD > 0
MD_MIN_DIO = NET AREA MD_DIOD > 0.203		// minimum effective diode 0.203

A.R.2_A.R.3.MD { @ (MD perim*thickness / gate area) > 400 (without effective diode) 
		 @ (MD perim*thickness / gate area) > Ratio (with effective diode) 
  NET AREA RATIO MD MD_MIN_DIO GATE > 0		// no effective diode
    [
      !!AREA(MD) * !!AREA(GATE) *
      (!AREA(MD_MIN_DIO) * ( PERIMETER(MD)*MD_THICKNESS/AREA(GATE) - 400 ) +
      !!AREA(MD_MIN_DIO) * ( PERIMETER(MD)*MD_THICKNESS/AREA(GATE) - AREA(MD_MIN_DIO)*8000 - 30000 ))
    ] RDB A.R.2.MD.rep MD MD_MIN_DIO GATE
}

#ENDIF
#ENDIF









DISCONNECT

CHIP         = EXTENT
BULK       	 = SIZE CHIP BY 1.0
PWi     	 = BULK NOT (NWi OR ULLNWi)
EMPTYi  	 = CHIP NOT BULK // for DRC coding

// Derived layer
NPOD 			= NPi AND ODi
PPOD 			= PPi AND ODi
NACT 			= NPOD AND PWi
NW_ULLNW = NWi OR ULLNWi
PACT 			= PPOD AND NW_ULLNW 
PSTP 			= PPOD AND PWi

NW_IN_DNW 		= NW_ULLNW INTERACT DNWi
PW_OUT_DNW		= PWi NOT DNWi

UBMn = (UBMi NOT INTERACT PPIi) NOT INTERACT MDi  // UBM lie on Top Metal
UBMd = UBMi NOT UBMn                             // UBM lie on PPI or MD
NACT_CORE       = NACT NOT INSIDE OD2i
PACT_CORE       = COPY PACT
PSTP_CORE		= PSTP NOT INTERACT OD2i

PACT_CORE_DNW		= (PACT_CORE NOT POLYi) INSIDE NW_IN_DNW
NMOS_GATE_CORE_NDNW	= (NACT_CORE AND POLYi) INSIDE PWi
PACT_CORE_DNW_R_7_pre	= EMPTYi OR PACT_CORE_DNW
B_PATH_GATE_NDNW_pre    = EMPTYi OR NMOS_GATE_CORE_NDNW 

POLY_R_7_pre	= EMPTYi OR POLYi
CO_R_7_pre		= EMPTYi OR COi
M0_R_7_pre		= EMPTYi OR M0i
SICR_V1_R_7_pre		= EMPTYi OR SICR_V1i
MSI_R_7_pre		= EMPTYi OR MSIi
M1_R_7_pre 		= EMPTYi OR M1
M2_R_7_pre 		= EMPTYi OR M2
M3_R_7_pre 		= EMPTYi OR M3
M4_R_7_pre 		= EMPTYi OR M4
M5_R_7_pre 		= EMPTYi OR M5
M6_R_7_pre 		= EMPTYi OR M6
MD_R_7_pre		= EMPTYi OR MD
CBi_R_7_pre = EMPTYi OR CBi
CBDi_R_7_pre = EMPTYi OR CBDi

UBMn_R_7_pre = EMPTYi OR UBMn
UBMd_R_7_pre = EMPTYi OR UBMd
PPIi_R_7_pre = EMPTYi OR PPIi
VIA1_R_7_pre	= EMPTYi OR VIA1i
VIA2_R_7_pre	= EMPTYi OR VIA2i
VIA3_R_7_pre	= EMPTYi OR VIA3i
VIA4_R_7_pre	= EMPTYi OR VIA4i
VIA5_R_7_pre	= EMPTYi OR VIA5i
VIAD_R_7_pre	= EMPTYi OR VIADi
CTM2_R_7_pre    = EMPTYi OR CTM2i
CBM2_R_7_pre    = EMPTYi OR (M2 AND (SIZE CTM2i BY 2 INSIDE OF M2 STEP Mx_S_1 * 0.7))
CTM3_R_7_pre    = EMPTYi OR CTM3i
CBM3_R_7_pre    = EMPTYi OR (M3 AND (SIZE CTM3i BY 2 INSIDE OF M3 STEP Mx_S_1 * 0.7))
CTM4_R_7_pre    = EMPTYi OR CTM4i
CBM4_R_7_pre    = EMPTYi OR (M4 AND (SIZE CTM4i BY 2 INSIDE OF M4 STEP Mx_S_1 * 0.7))
CTM5_R_7_pre    = EMPTYi OR CTM5i
CBM5_R_7_pre    = EMPTYi OR (M5 AND (SIZE CTM5i BY 2 INSIDE OF M5 STEP Mx_S_1 * 0.7))
CMM2_R_7_pre    = EMPTYi OR CMM2i
CMM3_R_7_pre    = EMPTYi OR CMM3i
CMM4_R_7_pre    = EMPTYi OR CMM4i
CMM5_R_7_pre    = EMPTYi OR CMM5i


CONNECT B_PATH_GATE_NDNW_pre   POLY_R_7_pre
CONNECT M1_R_7_pre   PACT_CORE_DNW_R_7_pre   POLY_R_7_pre BY CO_R_7_pre
CONNECT M2_R_7_pre   M1_R_7_pre	BY VIA1_R_7_pre
CONNECT M2_R_7_pre M0_R_7_pre BY SICR_V1_R_7_pre
CONNECT M0_R_7_pre MSI_R_7_pre
CONNECT M3_R_7_pre   CTM2_R_7_pre CMM2_R_7_pre  M2_R_7_pre BY VIA2_R_7_pre
CONNECT M4_R_7_pre   CTM3_R_7_pre CMM3_R_7_pre  M3_R_7_pre BY VIA3_R_7_pre
CONNECT M5_R_7_pre   CTM4_R_7_pre CMM4_R_7_pre  M4_R_7_pre BY VIA4_R_7_pre
CONNECT M6_R_7_pre   CTM5_R_7_pre CMM5_R_7_pre  M5_R_7_pre BY VIA5_R_7_pre
CONNECT	M6_R_7_pre   MD_R_7_pre BY VIAD_R_7_pre
CONNECT M6_R_7_pre CBi_R_7_pre
CONNECT M6_R_7_pre UBMn_R_7_pre BY CBDi_R_7_pre
CONNECT MD_R_7_pre UBMd_R_7_pre
CONNECT M6_R_7_pre PPIi_R_7_pre BY CBDi_R_7_pre
CONNECT PPIi_R_7_pre UBMd_R_7_pre

TARGET_PACT_CORE_DNW_R_7 = NET AREA RATIO PACT_CORE_DNW_R_7_pre B_PATH_GATE_NDNW_pre > 0

BULK_new = SIZE CHIP BY 2.0
EMPTYi_new = CHIP NOT BULK_new // for DRC coding

DNW_R_7 = EMPTYi_new OR (DNWi INTERACT TARGET_PACT_CORE_DNW_R_7)
B_PATH_GATE_NDNW = EMPTYi_new OR NMOS_GATE_CORE_NDNW
PACT_CORE_DNW_R_7 = EMPTYi_new OR (PACT_CORE_DNW INTERACT TARGET_PACT_CORE_DNW_R_7)

POLY_R_7	= EMPTYi_new OR POLYi
CO_R_7		= EMPTYi_new OR COi
M0_R_7		= EMPTYi_new OR M0i
SICR_V1_R_7		= EMPTYi_new OR SICR_V1i
MSI_R_7		= EMPTYi_new OR MSIi
M1_R_7 		= EMPTYi_new OR M1
M2_R_7 		= EMPTYi_new OR M2
M3_R_7 		= EMPTYi_new OR M3
M4_R_7 		= EMPTYi_new OR M4
M5_R_7 		= EMPTYi_new OR M5
M6_R_7 		= EMPTYi_new OR M6
MD_R_7		= EMPTYi_new OR MD
CBi_R_7 = EMPTYi_new OR CBi
CBDi_R_7 = EMPTYi_new OR CBDi

UBMn_R_7 = EMPTYi_new OR UBMn
UBMd_R_7 = EMPTYi_new OR UBMd
PPIi_R_7 = EMPTYi_new OR PPIi
VIA1_R_7	= EMPTYi_new OR VIA1i
VIA2_R_7	= EMPTYi_new OR VIA2i
VIA3_R_7	= EMPTYi_new OR VIA3i
VIA4_R_7	= EMPTYi_new OR VIA4i
VIA5_R_7	= EMPTYi_new OR VIA5i
VIAD_R_7	= EMPTYi_new OR VIADi
CTM2_R_7    = EMPTYi_new OR CTM2i
CBM2_R_7    = EMPTYi_new OR (M2 AND (SIZE CTM2i BY 2 INSIDE OF M2 STEP Mx_S_1 * 0.7))
CTM3_R_7    = EMPTYi_new OR CTM3i
CBM3_R_7    = EMPTYi_new OR (M3 AND (SIZE CTM3i BY 2 INSIDE OF M3 STEP Mx_S_1 * 0.7))
CTM4_R_7    = EMPTYi_new OR CTM4i
CBM4_R_7    = EMPTYi_new OR (M4 AND (SIZE CTM4i BY 2 INSIDE OF M4 STEP Mx_S_1 * 0.7))
CTM5_R_7    = EMPTYi_new OR CTM5i
CBM5_R_7    = EMPTYi_new OR (M5 AND (SIZE CTM5i BY 2 INSIDE OF M5 STEP Mx_S_1 * 0.7))
CMM2_R_7    = EMPTYi_new OR CMM2i
CMM3_R_7    = EMPTYi_new OR CMM3i
CMM4_R_7    = EMPTYi_new OR CMM4i
CMM5_R_7    = EMPTYi_new OR CMM5i


CONNECT PACT_CORE_DNW_R_7   DNW_R_7
CONNECT B_PATH_GATE_NDNW    POLY_R_7
CONNECT M1_R_7   PACT_CORE_DNW_R_7   POLY_R_7 BY CO_R_7
CONNECT M2_R_7   M1_R_7 BY VIA1_R_7
CONNECT M2_R_7 M0_R_7 BY SICR_V1_R_7
CONNECT M0_R_7 MSI_R_7
CONNECT M3_R_7   CTM2_R_7 CMM2_R_7  M2_R_7 BY VIA2_R_7
CONNECT M4_R_7   CTM3_R_7 CMM3_R_7  M3_R_7 BY VIA3_R_7
CONNECT M5_R_7   CTM4_R_7 CMM4_R_7  M4_R_7 BY VIA4_R_7
CONNECT M6_R_7   CTM5_R_7 CMM5_R_7  M5_R_7 BY VIA5_R_7

CONNECT	M6_R_7   MD_R_7 BY VIAD_R_7
CONNECT M6_R_7 CBi_R_7
CONNECT M6_R_7 UBMn_R_7 BY CBDi_R_7
CONNECT MD_R_7 UBMd_R_7
CONNECT M6_R_7 PPIi_R_7 BY CBDi_R_7
CONNECT PPIi_R_7 UBMd_R_7



DNW.R.7 { @ Max. cumulative area ratio of DNW to {(LV NMOS core gates) OUTSIDE DNW} [connects to 
          @ {((PP AND OD) AND NW) INSIDE (NW INTERACT DNW)} ] <= ^DNW_R_7
          @ This rule is checked by the ANTENNA DRC command file
  NET AREA RATIO B_PATH_GATE_NDNW PACT_CORE_DNW_R_7 DNW_R_7 > DNW_R_7
       [
       !!AREA(B_PATH_GATE_NDNW) * !!AREA(PACT_CORE_DNW_R_7) * !!AREA(DNW_R_7) * (AREA(DNW_R_7)/AREA(B_PATH_GATE_NDNW))
       ] RDB DNW.R.7.rep DNW_R_7 B_PATH_GATE_NDNW BY LAYER
}

// DNW.R.7.1/2 check
//========
VARIABLE DNW_R_7_1 	 5.0E5
VARIABLE DNW_R_7_1_A  1.0E6
VARIABLE DNW_R_7_2  500000
VARIABLE DNW_R_7_2_RX  4100000
VARIABLE DNW_R_7_2_A_bg 1000000
VARIABLE DNW_R_7_2_A_sm 1000
VARIABLE DNW_R_7_2_DioA  4

NSTP = NPOD AND NW_ULLNW
STP = NSTP OR PSTP
PSD = SD AND PACT
NSD = SD AND NACT
POLY = COPY POLYi
CO = COPY COi
VIA1 = COPY VIA1i
VIA2 = COPY VIA2i
VIA3 = COPY VIA3i
VIA4 = COPY VIA4i
VIA5 = COPY VIA5i
VIAD = COPY VIADi
LV_NGATE = (NACT AND POLYi) NOT INSIDE OD2i
CTM_all = COPY CTM5i
CMM_all = COPY CMM5i


DISCONNECT


DNWi_BIG_DNW_R_7_1 = AREA DNWi >= DNW_R_7_1_A
NW_ULLNW_IN_DNWi_DNW_R_7_1 = NW_ULLNW INTERACT DNWi_BIG_DNW_R_7_1
PACT_CORE_DNW_R_7_1_pre = ((PPOD AND NW_ULLNW) NOT POLY) INSIDE NW_ULLNW_IN_DNWi_DNW_R_7_1
GATE_DNWi_PRE_DNW_R_7_1 = LV_NGATE OUTSIDE DNWi
PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_1 = EMPTY_DNW_R_7_1_pre OR PACT_CORE_DNW_R_7_1_pre


BULK_DNW_R_7_1_pre = SIZE CHIP BY 4
EMPTY_DNW_R_7_1_pre = CHIP NOT BULK_DNW_R_7_1_pre

GATE_DNWi_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR GATE_DNWi_PRE_DNW_R_7_1
POLY_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR POLY
CO_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR CO
NSD_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR NSD
PSD_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR PSD
PSD_NSD_DNW_R_7_1_pre = NSD_DNW_R_7_1_pre OR PSD_DNW_R_7_1_pre
STP_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR STP
M1_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M1
VIA1_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIA1
MSI_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR MSIi
M0_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M0i
SICR_V1_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR SICR_V1i
M2_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M2
VIA2_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIA2
M3_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M3
VIA3_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIA3
M4_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M4
VIA4_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIA4
M5_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M5
VIA5_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIA5
M6_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR M6
MD_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR MD
VIAD_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR VIAD
CTM_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR CTM_all
CMM_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR CMM_all
CBi_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR CBi
CBDi_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR CBDi

UBMn_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR UBMn
UBMd_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR UBMd
PPIi_DNW_R_7_1_pre = EMPTY_DNW_R_7_1_pre OR PPIi

CONNECT GATE_DNWi_DNW_R_7_1_pre POLY_DNW_R_7_1_pre
CONNECT PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_1 PSD_DNW_R_7_1_pre 
CONNECT M1_DNW_R_7_1_pre POLY_DNW_R_7_1_pre PSD_DNW_R_7_1_pre NSD_DNW_R_7_1_pre STP_DNW_R_7_1_pre BY CO_DNW_R_7_1_pre
CONNECT PSD_NSD_DNW_R_7_1_pre PSD_DNW_R_7_1_pre
CONNECT PSD_NSD_DNW_R_7_1_pre NSD_DNW_R_7_1_pre
CO_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO CO_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M2_DNW_R_7_1_pre M0_DNW_R_7_1_pre  BY SICR_V1_DNW_R_7_1_pre 
CONNECT M0_DNW_R_7_1_pre MSI_DNW_R_7_1_pre 
CONNECT M2_DNW_R_7_1_pre M1_DNW_R_7_1_pre BY VIA1_DNW_R_7_1_pre
VIA1_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIA1_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M3_DNW_R_7_1_pre M2_DNW_R_7_1_pre BY VIA2_DNW_R_7_1_pre
VIA2_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIA2_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M4_DNW_R_7_1_pre M3_DNW_R_7_1_pre BY VIA3_DNW_R_7_1_pre
VIA3_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIA3_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M5_DNW_R_7_1_pre M4_DNW_R_7_1_pre BY VIA4_DNW_R_7_1_pre
VIA4_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIA4_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M6_DNW_R_7_1_pre CTM_DNW_R_7_1_pre CMM_DNW_R_7_1_pre M5_DNW_R_7_1_pre BY VIA5_DNW_R_7_1_pre
VIA5_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIA5_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT MD_DNW_R_7_1_pre M6_DNW_R_7_1_pre BY VIAD_DNW_R_7_1_pre
CONNECT M6_DNW_R_7_1_pre VIAD_DNW_R_7_1_pre
VIAD_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO VIAD_DNW_R_7_1_pre STP_DNW_R_7_1_pre == 0 // avoid discharge path on VDD/VSS network

CONNECT M6_DNW_R_7_1_pre CBi_DNW_R_7_1_pre
CONNECT M6_DNW_R_7_1_pre UBMn_DNW_R_7_1_pre BY CBDi_DNW_R_7_1_pre
CONNECT MD_DNW_R_7_1_pre UBMd_DNW_R_7_1_pre
CONNECT M6_DNW_R_7_1_pre PPIi_DNW_R_7_1_pre BY CBDi_DNW_R_7_1_pre
CONNECT PPIi_DNW_R_7_1_pre UBMd_DNW_R_7_1_pre


PACT_DNWi_CHARGE_OUT_DNW_R_7_1 = NET AREA RATIO PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_1 GATE_DNWi_DNW_R_7_1_pre > 0
OD_DNWi_CHARGE_PATH_DNW_R_7_1 = NET AREA RATIO PSD_NSD_DNW_R_7_1_pre GATE_DNWi_DNW_R_7_1_pre > 0
DNWi_DISCHARGE_DIODE_DNW_R_7_1 = (OD_DNWi_CHARGE_PATH_DNW_R_7_1 NOT PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_1) OUTSIDE DNWi
DISCONNECT




BULK_DNW_R_7_1 = SIZE CHIP BY 5
EMPTY_DNW_R_7_1 = CHIP NOT BULK_DNW_R_7_1



NW_ULLNW_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR NW_ULLNW
GATE_DNWi_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR GATE_DNWi_PRE_DNW_R_7_1
POLY_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR POLY
CO_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR CO
NSD_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR NSD
PSD_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR PSD
PSD_NSD_DNW_R_7_1 = NSD_DNW_R_7_1 OR PSD_DNW_R_7_1
STP_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR STP
M1_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M1
VIA1_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIA1
MSI_DNW_R_7_1 = EMPTY_DNW_R_7_1_pre OR MSIi
M0_DNW_R_7_1 = EMPTY_DNW_R_7_1_pre OR M0i
SICR_V1_DNW_R_7_1 = EMPTY_DNW_R_7_1_pre OR SICR_V1i
M2_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M2
VIA2_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIA2
M3_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M3
VIA3_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIA3
M4_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M4
VIA4_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIA4
M5_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M5
VIA5_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIA5
M6_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR M6
MD_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR MD
VIAD_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR VIAD
CTM_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR CTM_all
CMM_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR CMM_all
CBi_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR CBi
CBDi_DNW_R_7_1 = EMPTY_DNW_R_7_1 OR CBDi


DNWi_CHARGE_POOL_DNW_R_7_1 = DNWi_BIG_DNW_R_7_1 INTERACT (NW_ULLNW_DNW_R_7_1 INTERACT PACT_DNWi_CHARGE_OUT_DNW_R_7_1)
CONNECT NW_ULLNW_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1
CONNECT PACT_DNWi_CHARGE_OUT_DNW_R_7_1 NW_ULLNW_DNW_R_7_1
CONNECT GATE_DNWi_DNW_R_7_1 POLY_DNW_R_7_1
CONNECT M1_DNW_R_7_1 POLY_DNW_R_7_1 OD_DNWi_CHARGE_PATH_DNW_R_7_1 BY CO_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
CONNECT OD_DNWi_CHARGE_PATH_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1
CONNECT OD_DNWi_CHARGE_PATH_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1


//DNW.R.7.1 is checked by DNW.R.7.1:M1

DNW.R.7.1:M1 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M1_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M1_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M1.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M2_DNW_R_7_1 M0_DNW_R_7_1  BY SICR_V1_DNW_R_7_1 
CONNECT M0_DNW_R_7_1 MSI_DNW_R_7_1 
CONNECT M2_DNW_R_7_1 M1_DNW_R_7_1 BY VIA1_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:M2

DNW.R.7.1:M2 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M2_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M2_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M2.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M3_DNW_R_7_1 M2_DNW_R_7_1 BY VIA2_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:M3

DNW.R.7.1:M3 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M3_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M3_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M3.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M4_DNW_R_7_1 M3_DNW_R_7_1 BY VIA3_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:M4

DNW.R.7.1:M4 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M4_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M4_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M4.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M5_DNW_R_7_1 M4_DNW_R_7_1 BY VIA4_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:M5

DNW.R.7.1:M5 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M5_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M5_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M5.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M6_DNW_R_7_1 CTM_DNW_R_7_1 CMM_DNW_R_7_1 M5_DNW_R_7_1 BY VIA5_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:M6

DNW.R.7.1:M6 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 M6_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(M6_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.M6.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}

CONNECT M6_DNW_R_7_1 VIAD_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
CONNECT MD_DNW_R_7_1 M6_DNW_R_7_1 BY VIAD_DNW_R_7_1_DNWi_CHARGE_PATH_DNW_R_7_1
//DNW.R.7.1 is checked by DNW.R.7.1:MD

DNW.R.7.1:MD { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_1_A um2] to {LV_NGATE OUTSIDE DNWi}
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and does not connect to STRAP] <= ^DNW_R_7_1
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_1 MD_DNW_R_7_1 PACT_DNWi_CHARGE_OUT_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 > DNW_R_7_1
       [!!AREA(MD_DNW_R_7_1) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_1) * (!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1) + !!AREA(DNWi_DISCHARGE_DIODE_DNW_R_7_1)) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_1)/AREA(GATE_DNWi_DNW_R_7_1)) ]
       RDB DNW.R.7.1.MD.rep GATE_DNWi_DNW_R_7_1 DNWi_CHARGE_POOL_DNW_R_7_1 DNWi_DISCHARGE_DIODE_DNW_R_7_1 BY LAYER
}



DISCONNECT


DNWi_SMALL_DNW_R_7_2 = AREA DNWi <= DNW_R_7_2_A_sm
DNWi_BIG_DNW_R_7_2 = AREA DNWi >= DNW_R_7_2_A_bg
NW_ULLNW_IN_DNWi_DNW_R_7_2 = NW_ULLNW INTERACT DNWi_BIG_DNW_R_7_2
PACT_CORE_DNW_R_7_2_pre = ((PPOD AND NW_ULLNW) NOT POLY) INSIDE NW_ULLNW_IN_DNWi_DNW_R_7_2
GATE_DNWi_PRE_DNW_R_7_2 = LV_NGATE INSIDE DNWi_SMALL_DNW_R_7_2
PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_2 = EMPTY_DNW_R_7_2_pre OR PACT_CORE_DNW_R_7_2_pre


BULK_DNW_R_7_2_pre = SIZE CHIP BY 4
EMPTY_DNW_R_7_2_pre = CHIP NOT BULK_DNW_R_7_2_pre

GATE_DNWi_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR GATE_DNWi_PRE_DNW_R_7_2
POLY_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR POLY
CO_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR CO
NSD_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR NSD
PSD_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR PSD
PSD_NSD_DNW_R_7_2_pre = NSD_DNW_R_7_2_pre OR PSD_DNW_R_7_2_pre
STP_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR STP
M1_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M1
VIA1_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIA1
MSI_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR MSIi
M0_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M0i
SICR_V1_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR SICR_V1i
M2_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M2
VIA2_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIA2
M3_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M3
VIA3_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIA3
M4_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M4
VIA4_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIA4
M5_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M5
VIA5_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIA5
M6_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR M6
MD_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR MD
VIAD_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR VIAD
CTM_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR CTM_all
CMM_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR CMM_all
CBi_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR CBi
CBDi_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR CBDi

UBMn_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR UBMn
UBMd_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR UBMd
PPIi_DNW_R_7_2_pre = EMPTY_DNW_R_7_2_pre OR PPIi

CONNECT GATE_DNWi_DNW_R_7_2_pre POLY_DNW_R_7_2_pre
CONNECT PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_2 PSD_DNW_R_7_2_pre 
CONNECT M1_DNW_R_7_2_pre POLY_DNW_R_7_2_pre PSD_DNW_R_7_2_pre NSD_DNW_R_7_2_pre STP_DNW_R_7_2_pre BY CO_DNW_R_7_2_pre
CONNECT PSD_NSD_DNW_R_7_2_pre PSD_DNW_R_7_2_pre
CONNECT PSD_NSD_DNW_R_7_2_pre NSD_DNW_R_7_2_pre
CO_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO CO_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M2_DNW_R_7_2_pre M0_DNW_R_7_2_pre  BY SICR_V1_DNW_R_7_2_pre 
CONNECT M0_DNW_R_7_2_pre MSI_DNW_R_7_2_pre 
CONNECT M2_DNW_R_7_2_pre M1_DNW_R_7_2_pre BY VIA1_DNW_R_7_2_pre
VIA1_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIA1_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M3_DNW_R_7_2_pre M2_DNW_R_7_2_pre BY VIA2_DNW_R_7_2_pre
VIA2_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIA2_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M4_DNW_R_7_2_pre M3_DNW_R_7_2_pre BY VIA3_DNW_R_7_2_pre
VIA3_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIA3_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M5_DNW_R_7_2_pre M4_DNW_R_7_2_pre BY VIA4_DNW_R_7_2_pre
VIA4_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIA4_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT M6_DNW_R_7_2_pre CTM_DNW_R_7_2_pre CMM_DNW_R_7_2_pre M5_DNW_R_7_2_pre BY VIA5_DNW_R_7_2_pre
VIA5_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIA5_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network
CONNECT MD_DNW_R_7_2_pre M6_DNW_R_7_2_pre BY VIAD_DNW_R_7_2_pre
CONNECT M6_DNW_R_7_2_pre VIAD_DNW_R_7_2_pre
VIAD_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO VIAD_DNW_R_7_2_pre STP_DNW_R_7_2_pre == 0 // avoid discharge path on VDD/VSS network

CONNECT M6_DNW_R_7_2_pre CBi_DNW_R_7_2_pre
CONNECT M6_DNW_R_7_2_pre UBMn_DNW_R_7_2_pre BY CBDi_DNW_R_7_2_pre
CONNECT MD_DNW_R_7_2_pre UBMd_DNW_R_7_2_pre
CONNECT M6_DNW_R_7_2_pre PPIi_DNW_R_7_2_pre BY CBDi_DNW_R_7_2_pre
CONNECT PPIi_DNW_R_7_2_pre UBMd_DNW_R_7_2_pre


PACT_DNWi_CHARGE_OUT_DNW_R_7_2 = NET AREA RATIO PACT_DNWi_CHARGE_OUT_PRE_DNW_R_7_2 GATE_DNWi_DNW_R_7_2_pre > 0
OD_DNWi_CHARGE_PATH_DNW_R_7_2 = NET AREA RATIO PSD_NSD_DNW_R_7_2_pre GATE_DNWi_DNW_R_7_2_pre > 0
PROTECT_DIODE_DNW_R_7_2 = AREA ((NPOD AND PWi) OUTSIDE DNWi) >= DNW_R_7_2_DioA
DISCONNECT




BULK_DNW_R_7_2 = SIZE CHIP BY 5
EMPTY_DNW_R_7_2 = CHIP NOT BULK_DNW_R_7_2



NW_ULLNW_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR NW_ULLNW
GATE_DNWi_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR GATE_DNWi_PRE_DNW_R_7_2
POLY_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR POLY
CO_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR CO
NSD_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR NSD
PSD_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR PSD
PSD_NSD_DNW_R_7_2 = NSD_DNW_R_7_2 OR PSD_DNW_R_7_2
STP_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR STP
M1_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M1
VIA1_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIA1
MSI_DNW_R_7_2 = EMPTY_DNW_R_7_2_pre OR MSIi
M0_DNW_R_7_2 = EMPTY_DNW_R_7_2_pre OR M0i
SICR_V1_DNW_R_7_2 = EMPTY_DNW_R_7_2_pre OR SICR_V1i
M2_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M2
VIA2_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIA2
M3_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M3
VIA3_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIA3
M4_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M4
VIA4_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIA4
M5_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M5
VIA5_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIA5
M6_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR M6
MD_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR MD
VIAD_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR VIAD
CTM_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR CTM_all
CMM_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR CMM_all
CBi_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR CBi
CBDi_DNW_R_7_2 = EMPTY_DNW_R_7_2 OR CBDi


DNWi_CHARGE_POOL_DNW_R_7_2 = DNWi_BIG_DNW_R_7_2 INTERACT (NW_ULLNW_DNW_R_7_2 INTERACT PACT_DNWi_CHARGE_OUT_DNW_R_7_2)
CONNECT NW_ULLNW_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2
CONNECT PACT_DNWi_CHARGE_OUT_DNW_R_7_2 NW_ULLNW_DNW_R_7_2
CONNECT GATE_DNWi_DNW_R_7_2 POLY_DNW_R_7_2
CONNECT M1_DNW_R_7_2 POLY_DNW_R_7_2 OD_DNWi_CHARGE_PATH_DNW_R_7_2 BY CO_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
CONNECT OD_DNWi_CHARGE_PATH_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2
CONNECT PROTECT_DIODE_DNW_R_7_2 M1_DNW_R_7_2 BY CO_DNW_R_7_2


//DNW.R.7.2 is checked by DNW.R.7.2:M1

DNW.R.7.2:M1 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * !AREA(PROTECT_DIODE_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M1_woDio.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 BY LAYER

  NET AREA RATIO GATE_DNWi_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 > DNW_R_7_2_RX
       [!!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * !!AREA(PROTECT_DIODE_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M1_wiDio.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 BY LAYER

}

CONNECT M2_DNW_R_7_2 M0_DNW_R_7_2  BY SICR_V1_DNW_R_7_2 
CONNECT M0_DNW_R_7_2 MSI_DNW_R_7_2 
CONNECT M2_DNW_R_7_2 M1_DNW_R_7_2 BY VIA1_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:M2

DNW.R.7.2:M2 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M2_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(M2_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * !AREA(PROTECT_DIODE_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M2_woDio.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 BY LAYER

  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M2_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 > DNW_R_7_2_RX
       [!!AREA(M2_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * !!AREA(PROTECT_DIODE_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M2_wiDio.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 PROTECT_DIODE_DNW_R_7_2 BY LAYER
}

CONNECT M3_DNW_R_7_2 M2_DNW_R_7_2 BY VIA2_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:M3

DNW.R.7.2:M3 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M3_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(M3_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M3.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 BY LAYER
}

CONNECT M4_DNW_R_7_2 M3_DNW_R_7_2 BY VIA3_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:M4

DNW.R.7.2:M4 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M4_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(M4_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M4.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 BY LAYER
}

CONNECT M5_DNW_R_7_2 M4_DNW_R_7_2 BY VIA4_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:M5

DNW.R.7.2:M5 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M5_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(M5_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M5.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 BY LAYER
}

CONNECT M6_DNW_R_7_2 CTM_DNW_R_7_2 CMM_DNW_R_7_2 M5_DNW_R_7_2 BY VIA5_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:M6

DNW.R.7.2:M6 { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 M6_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(M6_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.M6.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 BY LAYER
}

CONNECT M6_DNW_R_7_2 VIAD_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
CONNECT MD_DNW_R_7_2 M6_DNW_R_7_2 BY VIAD_DNW_R_7_2_DNWi_CHARGE_PATH_DNW_R_7_2
//DNW.R.7.2 is checked by DNW.R.7.2:MD

DNW.R.7.2:MD { @ Maximum cumulative area ratio of DNWi[area >= ^DNW_R_7_2_A_bg um2] to {LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm]} <= ^DNW_R_7_2
               @ If >= ^DNW_R_7_2_DioA um2 {N+ OD AND PWi} added in in discharging path with lower metal layers (M1 or M2) which outside DNWi
               @ it is allowed maximum cumulative area ratio of DNWi [area >= ^DNW_R_7_2_A_bg um2]
               @ to { LV_NGATE INSIDE DNWi[area <= ^DNW_R_7_2_A_sm um2]} up to >= ^DNW_R_7_2_RX
               @ Defination of LV_NGATE:
               @ 1.NMOS gates do not insideOD2i
               @ [connects to {{{PP AND OD} AND NW_ULLNW} INSIDE DNWi}, and
               @ does not connect to STRAP]
               @ This rule is checked by the cumulative connections (from M1 to AP-MD respectively) and the DRC command files in ANTENNA_DRC directory
  NET AREA RATIO GATE_DNWi_DNW_R_7_2 MD_DNW_R_7_2 PACT_DNWi_CHARGE_OUT_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 > DNW_R_7_2
       [!!AREA(MD_DNW_R_7_2) * !!AREA(PACT_DNWi_CHARGE_OUT_DNW_R_7_2) * (AREA(DNWi_CHARGE_POOL_DNW_R_7_2)/AREA(GATE_DNWi_DNW_R_7_2)) ]
       RDB DNW.R.7.2.MD.rep GATE_DNWi_DNW_R_7_2 DNWi_CHARGE_POOL_DNW_R_7_2 BY LAYER
}












RPO_RPDMY  = RPOi OR RPDUMMY
LV_NACT = ((NPOD NOT NW_ULLNW) NOT POLYi) NOT RPO_RPDMY
NACT_ALL = COPY LV_NACT
LV_PSTP = (PPOD NOT NW_ULLNW) INSIDE DNWi
LV_PSTP_RULE22 = PPOD NOT NW_ULLNW
PSTP_ALL = COPY LV_PSTP
PW_ALL = COPY PWi
LV_PSTP_N_DNW = (PPOD NOT NW_ULLNW) OUTSIDE DNWi
LV_PSTP_ALL = PPOD NOT NW_ULLNW

PSTP_DNW = (PPOD AND PWi) INSIDE DNWi
NSTP_DNW = (NPOD AND NW_ULLNW) INSIDE DNWi
NGATE_Core = ((GATE NOT OD2i) AND NPi) NOT NW_ULLNW

NGATE_OD2 = ((GATE AND OD2i) AND NPi) NOT NW_ULLNW
NP_PW = ((NPOD AND PWi) NOT GATE) INTERACT GATE

// define Psub strap    
PSUB_STRAP = (PPOD NOT NW_ULLNW) OUTSIDE DNWi
PW_STRAP = PPOD AND PWi
RW = PWi INSIDE DNWi
//====================================================================
// define unit diode Terminal for back to back diode check
//====================================================================
// define NP_PW_DIODE diode
NP_PW_DIODE_ANODE_pre = (((PPOD AND PWi) NOT INTERACT POLYi) NOT INTERACT (RPDUMMY OR RLPPDMY)) NOT INTERACT RPOi
NP_PW_DIODE_CATHODE_pre = (((NPOD AND PWi) NOT INTERACT POLYi) NOT INTERACT (RPDUMMY OR RLPPDMY)) NOT INTERACT RPOi
NP_PW_DIODE_ANODE = NP_PW_DIODE_ANODE_pre AND (PWi INTERACT NP_PW_DIODE_CATHODE_pre)
NP_PW_DIODE_CATHODE = NP_PW_DIODE_CATHODE_pre AND (PWi INTERACT NP_PW_DIODE_ANODE_pre)

// define PP_NW_DIODE diode
PP_NW_DIODE_ANODE_pre = (((PPOD AND (NW_ULLNW NOT CUT RWDMY)) NOT INTERACT POLYi) NOT INTERACT (RPDUMMY OR RLPPDMY)) NOT INTERACT RPOi
PP_NW_DIODE_CATHODE_pre = (((NPOD AND (NW_ULLNW NOT CUT RWDMY)) NOT INTERACT POLYi) NOT INTERACT (RPDUMMY OR RLPPDMY)) NOT INTERACT RPOi
PP_NW_DIODE_ANODE = PP_NW_DIODE_ANODE_pre AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_pre)
PP_NW_DIODE_CATHODE = PP_NW_DIODE_CATHODE_pre AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_pre)

//====================================================================
//====================================================================
// back to back diode check 
//====================================================================
//====================================================================

DISCONNECT
//====================================================================
// Define layers for waive B2B Diode
//====================================================================
BULK_300_5 = SIZE CHIP BY 300.5
EMPTY300_5 = CHIP NOT BULK_300_5
NP_PW_DIODE_ANODE_b2b_300 = NP_PW_DIODE_ANODE OR EMPTY300_5
NP_PW_DIODE_CATHODE_b2b_300 = NP_PW_DIODE_CATHODE OR EMPTY300_5
PP_NW_DIODE_ANODE_b2b_300 = PP_NW_DIODE_ANODE OR EMPTY300_5
PP_NW_DIODE_CATHODE_b2b_300 = PP_NW_DIODE_CATHODE OR EMPTY300_5
PW_STRAP_b2b_300 = PW_STRAP OR EMPTY300_5
PSUB_STRAP_b2b_300 = PSUB_STRAP OR EMPTY300_5
CO_b2b_300 = CO OR EMPTY300_5
CTM_b2b_300 = CTM_all OR EMPTY300_5
CMM_b2b_300 = CMM_all OR EMPTY300_5
M1_b2b_300 = M1 OR EMPTY300_5
M2_b2b_300 = M2 OR EMPTY300_5
VIA1_b2b_300 = VIA1 OR EMPTY300_5
M3_b2b_300 = M3 OR EMPTY300_5
VIA2_b2b_300 = VIA2 OR EMPTY300_5
M4_b2b_300 = M4 OR EMPTY300_5
VIA3_b2b_300 = VIA3 OR EMPTY300_5
M5_b2b_300 = M5 OR EMPTY300_5
VIA4_b2b_300 = VIA4 OR EMPTY300_5
M6_b2b_300 = M6 OR EMPTY300_5
VIA5_b2b_300 = VIA5 OR EMPTY300_5
MD_b2b_300 = MD OR EMPTY300_5
VIAD_b2b_300 = VIAD OR EMPTY300_5
//====================================================================
// Define layers for waive B2B Diode
//====================================================================
CONNECT M1_b2b_300 PW_STRAP_b2b_300 BY CO_b2b_300
CONNECT M1_b2b_300 PSUB_STRAP_b2b_300 BY CO_b2b_300
CONNECT M1_b2b_300 NP_PW_DIODE_ANODE_b2b_300 BY CO_b2b_300
CONNECT M1_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 BY CO_b2b_300
CONNECT M1_b2b_300 PP_NW_DIODE_ANODE_b2b_300 BY CO_b2b_300
CONNECT M1_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 BY CO_b2b_300


BULK_301 = SIZE CHIP BY 301
EMPTY_301 = CHIP NOT BULK_301

//====================================================================
//define back to back diode for in M1
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M1 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M1 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M1 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M1 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M1 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M1 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M1) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M1) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M1)
NP_PW_DIODE_ANODE_b2b_300_M1 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M1
NP_PW_DIODE_CATHODE_b2b_300_M1 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M1
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M1_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M1 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M1_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M1 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M1 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M1_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M1 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M1_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_301 = NP_PW_DIODE_ANODE OR EMPTY_301
NP_PW_DIODE_CATHODE_b2b_301 = NP_PW_DIODE_CATHODE OR EMPTY_301
NP_PW_DIODE_ANODE_PWi_b2b_301 = STAMP (PWi OR EMPTY_301) BY NP_PW_DIODE_ANODE_b2b_300_M1
NP_PW_DIODE_CATHODE_b2b_301_s = STAMP NP_PW_DIODE_CATHODE_b2b_301 BY NP_PW_DIODE_ANODE_PWi_b2b_301
NP_PW_DIODE_CATHODE_b2b_301_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_301_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M1 = NP_PW_DIODE_CATHODE_b2b_300_M1 AND NP_PW_DIODE_CATHODE_b2b_301_sc
NP_PW_DIODE_CATHODE_PWi_b2b_301 = STAMP (EMPTY_301 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M1
NP_PW_DIODE_ANODE_b2b_301_s = STAMP NP_PW_DIODE_ANODE_b2b_301 BY NP_PW_DIODE_CATHODE_PWi_b2b_301
NP_PW_DIODE_ANODE_b2b_301_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_301_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M1 = NP_PW_DIODE_ANODE_b2b_300_M1 AND NP_PW_DIODE_ANODE_b2b_301_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M1 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M1 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M1 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M1 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M1 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M1 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M1) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M1) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M1)
PP_NW_DIODE_ANODE_b2b_300_M1 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M1
PP_NW_DIODE_CATHODE_b2b_300_M1 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M1
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M1_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M1 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M1_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M1 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M1 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M1_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M1 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M1_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_301 = PP_NW_DIODE_ANODE OR EMPTY_301
PP_NW_DIODE_CATHODE_b2b_301 = PP_NW_DIODE_CATHODE OR EMPTY_301
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_301 = STAMP (NW_ULLNW OR EMPTY_301) BY PP_NW_DIODE_ANODE_b2b_300_M1
PP_NW_DIODE_CATHODE_b2b_301_s = STAMP PP_NW_DIODE_CATHODE_b2b_301 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_301
PP_NW_DIODE_CATHODE_b2b_301_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_301_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M1 = PP_NW_DIODE_CATHODE_b2b_300_M1 AND PP_NW_DIODE_CATHODE_b2b_301_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_301 = STAMP (EMPTY_301 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M1
PP_NW_DIODE_ANODE_b2b_301_s = STAMP PP_NW_DIODE_ANODE_b2b_301 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_301
PP_NW_DIODE_ANODE_b2b_301_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_301_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M1 = PP_NW_DIODE_ANODE_b2b_300_M1 AND PP_NW_DIODE_ANODE_b2b_301_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M1
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M1 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon)]

//level-2 B2B-1 for M1
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M1 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M1 NP_PW_DIODE_CATHODE_X2_b2b_300_M1 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M1)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M1)]

//level-1 B2B-2 for M1
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M1 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon)]

//level-1 B2B-3 for M1
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M1 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon)]

//level-2 B2B-2 for M1
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M1 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M1 PP_NW_DIODE_ANODE_X2_b2b_300_M1 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M1)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M1)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M1 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M1 NP_PW_DIODE_ANODE_X2_b2b_300_M1 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M1)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M1)]

//level-1 B2B-4 for M1
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M1 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M1_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M1_PSUBcon)]

//level-2 B2B-4 for M1
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M1 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M1 PP_NW_DIODE_CATHODE_X2_b2b_300_M1 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M1)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M1)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M1 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M1 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M1 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M1 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M1 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M1 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M1 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M1 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M1 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M1 PW_STRAP_b2b_300_PSUB_STRAP_M1)


BULK_302 = SIZE CHIP BY 302
EMPTY_302 = CHIP NOT BULK_302
CONNECT M2_b2b_300 M1_b2b_300 BY VIA1_b2b_300

//====================================================================
//define back to back diode for in M2
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M2 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M2 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M2 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M2 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M2 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M2 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M2) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M2) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M2)
NP_PW_DIODE_ANODE_b2b_300_M2 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M2
NP_PW_DIODE_CATHODE_b2b_300_M2 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M2
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M2_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M2 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M2_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M2 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M2 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M2_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M2 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M2_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_302 = NP_PW_DIODE_ANODE OR EMPTY_302
NP_PW_DIODE_CATHODE_b2b_302 = NP_PW_DIODE_CATHODE OR EMPTY_302
NP_PW_DIODE_ANODE_PWi_b2b_302 = STAMP (PWi OR EMPTY_302) BY NP_PW_DIODE_ANODE_b2b_300_M2
NP_PW_DIODE_CATHODE_b2b_302_s = STAMP NP_PW_DIODE_CATHODE_b2b_302 BY NP_PW_DIODE_ANODE_PWi_b2b_302
NP_PW_DIODE_CATHODE_b2b_302_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_302_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M2 = NP_PW_DIODE_CATHODE_b2b_300_M2 AND NP_PW_DIODE_CATHODE_b2b_302_sc
NP_PW_DIODE_CATHODE_PWi_b2b_302 = STAMP (EMPTY_302 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M2
NP_PW_DIODE_ANODE_b2b_302_s = STAMP NP_PW_DIODE_ANODE_b2b_302 BY NP_PW_DIODE_CATHODE_PWi_b2b_302
NP_PW_DIODE_ANODE_b2b_302_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_302_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M2 = NP_PW_DIODE_ANODE_b2b_300_M2 AND NP_PW_DIODE_ANODE_b2b_302_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M2 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M2 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M2 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M2 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M2 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M2 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M2) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M2) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M2)
PP_NW_DIODE_ANODE_b2b_300_M2 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M2
PP_NW_DIODE_CATHODE_b2b_300_M2 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M2
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M2_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M2 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M2_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M2 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M2 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M2_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M2 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M2_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_302 = PP_NW_DIODE_ANODE OR EMPTY_302
PP_NW_DIODE_CATHODE_b2b_302 = PP_NW_DIODE_CATHODE OR EMPTY_302
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_302 = STAMP (NW_ULLNW OR EMPTY_302) BY PP_NW_DIODE_ANODE_b2b_300_M2
PP_NW_DIODE_CATHODE_b2b_302_s = STAMP PP_NW_DIODE_CATHODE_b2b_302 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_302
PP_NW_DIODE_CATHODE_b2b_302_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_302_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M2 = PP_NW_DIODE_CATHODE_b2b_300_M2 AND PP_NW_DIODE_CATHODE_b2b_302_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_302 = STAMP (EMPTY_302 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M2
PP_NW_DIODE_ANODE_b2b_302_s = STAMP PP_NW_DIODE_ANODE_b2b_302 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_302
PP_NW_DIODE_ANODE_b2b_302_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_302_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M2 = PP_NW_DIODE_ANODE_b2b_300_M2 AND PP_NW_DIODE_ANODE_b2b_302_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M2
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M2 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon)]

//level-2 B2B-1 for M2
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M2 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M2 NP_PW_DIODE_CATHODE_X2_b2b_300_M2 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M2)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M2)]

//level-1 B2B-2 for M2
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M2 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon)]

//level-1 B2B-3 for M2
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M2 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon)]

//level-2 B2B-2 for M2
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M2 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M2 PP_NW_DIODE_ANODE_X2_b2b_300_M2 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M2)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M2)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M2 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M2 NP_PW_DIODE_ANODE_X2_b2b_300_M2 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M2)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M2)]

//level-1 B2B-4 for M2
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M2 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M2_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M2_PSUBcon)]

//level-2 B2B-4 for M2
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M2 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M2 PP_NW_DIODE_CATHODE_X2_b2b_300_M2 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M2)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M2)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M2 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M2 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M2 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M2 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M2 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M2 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M2 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M2 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M2 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M2 PW_STRAP_b2b_300_PSUB_STRAP_M2)


BULK_303 = SIZE CHIP BY 303
EMPTY_303 = CHIP NOT BULK_303
CONNECT M3_b2b_300 M2_b2b_300 BY VIA2_b2b_300

//====================================================================
//define back to back diode for in M3
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M3 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M3 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M3 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M3 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M3 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M3 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M3) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M3) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M3)
NP_PW_DIODE_ANODE_b2b_300_M3 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M3
NP_PW_DIODE_CATHODE_b2b_300_M3 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M3
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M3_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M3 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M3_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M3 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M3 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M3_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M3 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M3_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_303 = NP_PW_DIODE_ANODE OR EMPTY_303
NP_PW_DIODE_CATHODE_b2b_303 = NP_PW_DIODE_CATHODE OR EMPTY_303
NP_PW_DIODE_ANODE_PWi_b2b_303 = STAMP (PWi OR EMPTY_303) BY NP_PW_DIODE_ANODE_b2b_300_M3
NP_PW_DIODE_CATHODE_b2b_303_s = STAMP NP_PW_DIODE_CATHODE_b2b_303 BY NP_PW_DIODE_ANODE_PWi_b2b_303
NP_PW_DIODE_CATHODE_b2b_303_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_303_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M3 = NP_PW_DIODE_CATHODE_b2b_300_M3 AND NP_PW_DIODE_CATHODE_b2b_303_sc
NP_PW_DIODE_CATHODE_PWi_b2b_303 = STAMP (EMPTY_303 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M3
NP_PW_DIODE_ANODE_b2b_303_s = STAMP NP_PW_DIODE_ANODE_b2b_303 BY NP_PW_DIODE_CATHODE_PWi_b2b_303
NP_PW_DIODE_ANODE_b2b_303_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_303_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M3 = NP_PW_DIODE_ANODE_b2b_300_M3 AND NP_PW_DIODE_ANODE_b2b_303_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M3 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M3 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M3 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M3 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M3 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M3 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M3) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M3) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M3)
PP_NW_DIODE_ANODE_b2b_300_M3 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M3
PP_NW_DIODE_CATHODE_b2b_300_M3 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M3
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M3_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M3 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M3_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M3 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M3 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M3_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M3 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M3_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_303 = PP_NW_DIODE_ANODE OR EMPTY_303
PP_NW_DIODE_CATHODE_b2b_303 = PP_NW_DIODE_CATHODE OR EMPTY_303
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_303 = STAMP (NW_ULLNW OR EMPTY_303) BY PP_NW_DIODE_ANODE_b2b_300_M3
PP_NW_DIODE_CATHODE_b2b_303_s = STAMP PP_NW_DIODE_CATHODE_b2b_303 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_303
PP_NW_DIODE_CATHODE_b2b_303_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_303_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M3 = PP_NW_DIODE_CATHODE_b2b_300_M3 AND PP_NW_DIODE_CATHODE_b2b_303_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_303 = STAMP (EMPTY_303 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M3
PP_NW_DIODE_ANODE_b2b_303_s = STAMP PP_NW_DIODE_ANODE_b2b_303 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_303
PP_NW_DIODE_ANODE_b2b_303_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_303_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M3 = PP_NW_DIODE_ANODE_b2b_300_M3 AND PP_NW_DIODE_ANODE_b2b_303_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M3
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M3 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon)]

//level-2 B2B-1 for M3
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M3 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M3 NP_PW_DIODE_CATHODE_X2_b2b_300_M3 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M3)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M3)]

//level-1 B2B-2 for M3
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M3 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon)]

//level-1 B2B-3 for M3
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M3 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon)]

//level-2 B2B-2 for M3
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M3 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M3 PP_NW_DIODE_ANODE_X2_b2b_300_M3 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M3)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M3)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M3 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M3 NP_PW_DIODE_ANODE_X2_b2b_300_M3 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M3)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M3)]

//level-1 B2B-4 for M3
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M3 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M3_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M3_PSUBcon)]

//level-2 B2B-4 for M3
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M3 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M3 PP_NW_DIODE_CATHODE_X2_b2b_300_M3 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M3)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M3)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M3 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M3 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M3 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M3 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M3 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M3 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M3 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M3 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M3 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M3 PW_STRAP_b2b_300_PSUB_STRAP_M3)


BULK_304 = SIZE CHIP BY 304
EMPTY_304 = CHIP NOT BULK_304
CONNECT M4_b2b_300 M3_b2b_300 BY VIA3_b2b_300

//====================================================================
//define back to back diode for in M4
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M4 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M4 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M4 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M4 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M4 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M4 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M4) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M4) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M4)
NP_PW_DIODE_ANODE_b2b_300_M4 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M4
NP_PW_DIODE_CATHODE_b2b_300_M4 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M4
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M4_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M4 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M4_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M4 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M4 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M4_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M4 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M4_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_304 = NP_PW_DIODE_ANODE OR EMPTY_304
NP_PW_DIODE_CATHODE_b2b_304 = NP_PW_DIODE_CATHODE OR EMPTY_304
NP_PW_DIODE_ANODE_PWi_b2b_304 = STAMP (PWi OR EMPTY_304) BY NP_PW_DIODE_ANODE_b2b_300_M4
NP_PW_DIODE_CATHODE_b2b_304_s = STAMP NP_PW_DIODE_CATHODE_b2b_304 BY NP_PW_DIODE_ANODE_PWi_b2b_304
NP_PW_DIODE_CATHODE_b2b_304_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_304_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M4 = NP_PW_DIODE_CATHODE_b2b_300_M4 AND NP_PW_DIODE_CATHODE_b2b_304_sc
NP_PW_DIODE_CATHODE_PWi_b2b_304 = STAMP (EMPTY_304 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M4
NP_PW_DIODE_ANODE_b2b_304_s = STAMP NP_PW_DIODE_ANODE_b2b_304 BY NP_PW_DIODE_CATHODE_PWi_b2b_304
NP_PW_DIODE_ANODE_b2b_304_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_304_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M4 = NP_PW_DIODE_ANODE_b2b_300_M4 AND NP_PW_DIODE_ANODE_b2b_304_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M4 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M4 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M4 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M4 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M4 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M4 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M4) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M4) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M4)
PP_NW_DIODE_ANODE_b2b_300_M4 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M4
PP_NW_DIODE_CATHODE_b2b_300_M4 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M4
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M4_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M4 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M4_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M4 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M4 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M4_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M4 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M4_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_304 = PP_NW_DIODE_ANODE OR EMPTY_304
PP_NW_DIODE_CATHODE_b2b_304 = PP_NW_DIODE_CATHODE OR EMPTY_304
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_304 = STAMP (NW_ULLNW OR EMPTY_304) BY PP_NW_DIODE_ANODE_b2b_300_M4
PP_NW_DIODE_CATHODE_b2b_304_s = STAMP PP_NW_DIODE_CATHODE_b2b_304 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_304
PP_NW_DIODE_CATHODE_b2b_304_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_304_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M4 = PP_NW_DIODE_CATHODE_b2b_300_M4 AND PP_NW_DIODE_CATHODE_b2b_304_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_304 = STAMP (EMPTY_304 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M4
PP_NW_DIODE_ANODE_b2b_304_s = STAMP PP_NW_DIODE_ANODE_b2b_304 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_304
PP_NW_DIODE_ANODE_b2b_304_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_304_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M4 = PP_NW_DIODE_ANODE_b2b_300_M4 AND PP_NW_DIODE_ANODE_b2b_304_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M4
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M4 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon)]

//level-2 B2B-1 for M4
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M4 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M4 NP_PW_DIODE_CATHODE_X2_b2b_300_M4 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M4)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M4)]

//level-1 B2B-2 for M4
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M4 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon)]

//level-1 B2B-3 for M4
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M4 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon)]

//level-2 B2B-2 for M4
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M4 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M4 PP_NW_DIODE_ANODE_X2_b2b_300_M4 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M4)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M4)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M4 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M4 NP_PW_DIODE_ANODE_X2_b2b_300_M4 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M4)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M4)]

//level-1 B2B-4 for M4
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M4 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M4_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M4_PSUBcon)]

//level-2 B2B-4 for M4
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M4 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M4 PP_NW_DIODE_CATHODE_X2_b2b_300_M4 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M4)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M4)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M4 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M4 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M4 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M4 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M4 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M4 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M4 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M4 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M4 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M4 PW_STRAP_b2b_300_PSUB_STRAP_M4)


BULK_305 = SIZE CHIP BY 305
EMPTY_305 = CHIP NOT BULK_305
CONNECT M5_b2b_300 M4_b2b_300 BY VIA4_b2b_300

//====================================================================
//define back to back diode for in M5
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M5 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M5 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M5 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M5 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M5 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M5 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M5) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M5) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M5)
NP_PW_DIODE_ANODE_b2b_300_M5 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M5
NP_PW_DIODE_CATHODE_b2b_300_M5 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M5
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M5_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M5 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M5_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M5 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M5 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M5_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M5 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M5_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_305 = NP_PW_DIODE_ANODE OR EMPTY_305
NP_PW_DIODE_CATHODE_b2b_305 = NP_PW_DIODE_CATHODE OR EMPTY_305
NP_PW_DIODE_ANODE_PWi_b2b_305 = STAMP (PWi OR EMPTY_305) BY NP_PW_DIODE_ANODE_b2b_300_M5
NP_PW_DIODE_CATHODE_b2b_305_s = STAMP NP_PW_DIODE_CATHODE_b2b_305 BY NP_PW_DIODE_ANODE_PWi_b2b_305
NP_PW_DIODE_CATHODE_b2b_305_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_305_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M5 = NP_PW_DIODE_CATHODE_b2b_300_M5 AND NP_PW_DIODE_CATHODE_b2b_305_sc
NP_PW_DIODE_CATHODE_PWi_b2b_305 = STAMP (EMPTY_305 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M5
NP_PW_DIODE_ANODE_b2b_305_s = STAMP NP_PW_DIODE_ANODE_b2b_305 BY NP_PW_DIODE_CATHODE_PWi_b2b_305
NP_PW_DIODE_ANODE_b2b_305_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_305_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M5 = NP_PW_DIODE_ANODE_b2b_300_M5 AND NP_PW_DIODE_ANODE_b2b_305_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M5 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M5 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M5 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M5 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M5 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M5 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M5) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M5) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M5)
PP_NW_DIODE_ANODE_b2b_300_M5 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M5
PP_NW_DIODE_CATHODE_b2b_300_M5 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M5
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M5_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M5 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M5_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M5 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M5 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M5_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M5 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M5_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_305 = PP_NW_DIODE_ANODE OR EMPTY_305
PP_NW_DIODE_CATHODE_b2b_305 = PP_NW_DIODE_CATHODE OR EMPTY_305
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_305 = STAMP (NW_ULLNW OR EMPTY_305) BY PP_NW_DIODE_ANODE_b2b_300_M5
PP_NW_DIODE_CATHODE_b2b_305_s = STAMP PP_NW_DIODE_CATHODE_b2b_305 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_305
PP_NW_DIODE_CATHODE_b2b_305_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_305_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M5 = PP_NW_DIODE_CATHODE_b2b_300_M5 AND PP_NW_DIODE_CATHODE_b2b_305_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_305 = STAMP (EMPTY_305 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M5
PP_NW_DIODE_ANODE_b2b_305_s = STAMP PP_NW_DIODE_ANODE_b2b_305 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_305
PP_NW_DIODE_ANODE_b2b_305_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_305_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M5 = PP_NW_DIODE_ANODE_b2b_300_M5 AND PP_NW_DIODE_ANODE_b2b_305_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M5
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M5 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon)]

//level-2 B2B-1 for M5
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M5 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M5 NP_PW_DIODE_CATHODE_X2_b2b_300_M5 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M5)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M5)]

//level-1 B2B-2 for M5
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M5 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon)]

//level-1 B2B-3 for M5
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M5 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon)]

//level-2 B2B-2 for M5
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M5 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M5 PP_NW_DIODE_ANODE_X2_b2b_300_M5 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M5)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M5)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M5 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M5 NP_PW_DIODE_ANODE_X2_b2b_300_M5 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M5)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M5)]

//level-1 B2B-4 for M5
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M5 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M5_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M5_PSUBcon)]

//level-2 B2B-4 for M5
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M5 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M5 PP_NW_DIODE_CATHODE_X2_b2b_300_M5 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M5)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M5)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M5 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M5 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M5 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M5 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M5 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M5 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M5 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M5 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M5 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M5 PW_STRAP_b2b_300_PSUB_STRAP_M5)


BULK_306 = SIZE CHIP BY 306
EMPTY_306 = CHIP NOT BULK_306
CONNECT M6_b2b_300 CTM_b2b_300 CMM_b2b_300 M5_b2b_300 BY VIA5_b2b_300

//====================================================================
//define back to back diode for in M6
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_M6 = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_M6 = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_M6 = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_M6 = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_M6 = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_M6 OR NP_PW_DIODE_CATHODE_b2b_300_waive2_M6) OR NP_PW_DIODE_ANODE_b2b_300_waive3_M6) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_M6)
NP_PW_DIODE_ANODE_b2b_300_M6 = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M6
NP_PW_DIODE_CATHODE_b2b_300_M6 = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_M6
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_M6_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_M6 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_M6_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_M6 PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_M6 AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_M6_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_M6 AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_M6_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_306 = NP_PW_DIODE_ANODE OR EMPTY_306
NP_PW_DIODE_CATHODE_b2b_306 = NP_PW_DIODE_CATHODE OR EMPTY_306
NP_PW_DIODE_ANODE_PWi_b2b_306 = STAMP (PWi OR EMPTY_306) BY NP_PW_DIODE_ANODE_b2b_300_M6
NP_PW_DIODE_CATHODE_b2b_306_s = STAMP NP_PW_DIODE_CATHODE_b2b_306 BY NP_PW_DIODE_ANODE_PWi_b2b_306
NP_PW_DIODE_CATHODE_b2b_306_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_306_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_M6 = NP_PW_DIODE_CATHODE_b2b_300_M6 AND NP_PW_DIODE_CATHODE_b2b_306_sc
NP_PW_DIODE_CATHODE_PWi_b2b_306 = STAMP (EMPTY_306 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_M6
NP_PW_DIODE_ANODE_b2b_306_s = STAMP NP_PW_DIODE_ANODE_b2b_306 BY NP_PW_DIODE_CATHODE_PWi_b2b_306
NP_PW_DIODE_ANODE_b2b_306_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_306_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_M6 = NP_PW_DIODE_ANODE_b2b_300_M6 AND NP_PW_DIODE_ANODE_b2b_306_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_M6 = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_M6 = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_M6 = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_M6 = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_M6 = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_M6 OR PP_NW_DIODE_CATHODE_b2b_300_waive2_M6) OR PP_NW_DIODE_ANODE_b2b_300_waive3_M6) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_M6)
PP_NW_DIODE_ANODE_b2b_300_M6 = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M6
PP_NW_DIODE_CATHODE_b2b_300_M6 = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_M6
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_M6_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_M6 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_M6_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_M6 PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_M6 AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_M6_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_M6 AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_M6_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_306 = PP_NW_DIODE_ANODE OR EMPTY_306
PP_NW_DIODE_CATHODE_b2b_306 = PP_NW_DIODE_CATHODE OR EMPTY_306
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_306 = STAMP (NW_ULLNW OR EMPTY_306) BY PP_NW_DIODE_ANODE_b2b_300_M6
PP_NW_DIODE_CATHODE_b2b_306_s = STAMP PP_NW_DIODE_CATHODE_b2b_306 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_306
PP_NW_DIODE_CATHODE_b2b_306_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_306_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_M6 = PP_NW_DIODE_CATHODE_b2b_300_M6 AND PP_NW_DIODE_CATHODE_b2b_306_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_306 = STAMP (EMPTY_306 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_M6
PP_NW_DIODE_ANODE_b2b_306_s = STAMP PP_NW_DIODE_ANODE_b2b_306 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_306
PP_NW_DIODE_ANODE_b2b_306_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_306_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_M6 = PP_NW_DIODE_ANODE_b2b_300_M6 AND PP_NW_DIODE_ANODE_b2b_306_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for M6
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M6 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon)]

//level-2 B2B-1 for M6
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M6 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_M6 NP_PW_DIODE_CATHODE_X2_b2b_300_M6 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M6)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M6)]

//level-1 B2B-2 for M6
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M6 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon)]

//level-1 B2B-3 for M6
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M6 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon)]

//level-2 B2B-2 for M6
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M6 = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_M6 PP_NW_DIODE_ANODE_X2_b2b_300_M6 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_M6)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M6)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M6 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_M6 NP_PW_DIODE_ANODE_X2_b2b_300_M6 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M6)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_M6)]

//level-1 B2B-4 for M6
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M6 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_M6_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_M6_PSUBcon)]

//level-2 B2B-4 for M6
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M6 = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_M6 PP_NW_DIODE_CATHODE_X2_b2b_300_M6 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_M6)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_M6)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_M6 = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_M6 = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_M6 PW_STRAP_b2b_300_CLAMPED_LV1_SC2_M6 PW_STRAP_b2b_300_CLAMPED_LV1_SC3_M6 PW_STRAP_b2b_300_CLAMPED_LV1_SC4_M6 PW_STRAP_b2b_300_CLAMPED_LV2_SC1_M6 PW_STRAP_b2b_300_CLAMPED_LV2_SC2_M6 PW_STRAP_b2b_300_CLAMPED_LV2_SC3_M6 PW_STRAP_b2b_300_CLAMPED_LV2_SC4_M6 PW_STRAP_b2b_300_PSUB_STRAP_M6)


BULK_307 = SIZE CHIP BY 307
EMPTY_307 = CHIP NOT BULK_307
CONNECT MD_b2b_300 M6_b2b_300 BY VIAD_b2b_300

//====================================================================
//define back to back diode for in MD
//====================================================================
// filter diode NP_PW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
NP_PW_DIODE_ANODE_b2b_300_waive1_MD = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300 NP_PW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_CATHODE_b2b_300_waive2_MD = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300 NP_PW_DIODE_ANODE_b2b_300 INSIDE OF LAYER PWi > 0
NP_PW_DIODE_ANODE_b2b_300_waive3_MD = PWi INTERACT NP_PW_DIODE_ANODE_b2b_300 BY NET > 1
NP_PW_DIODE_CATHDOE_b2b_300_waive4_MD = PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300 BY NET > 1
NP_PW_DIODE_PWi300_waive_MD = PWi INTERACT (((NP_PW_DIODE_ANODE_b2b_300_waive1_MD OR NP_PW_DIODE_CATHODE_b2b_300_waive2_MD) OR NP_PW_DIODE_ANODE_b2b_300_waive3_MD) OR NP_PW_DIODE_CATHDOE_b2b_300_waive4_MD)
NP_PW_DIODE_ANODE_b2b_300_MD = NP_PW_DIODE_ANODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_MD
NP_PW_DIODE_CATHODE_b2b_300_MD = NP_PW_DIODE_CATHODE_b2b_300 NOT NP_PW_DIODE_PWi300_waive_MD
// define diode connect to Psub
NP_PW_DIODE_CATHODE_b2b_300_MD_PSUBcon = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_300_MD PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_b2b_300_MD_PSUBcon = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_300_MD PSUB_STRAP_b2b_300 > 0 
NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon = NP_PW_DIODE_ANODE_b2b_300_MD AND (PWi INTERACT NP_PW_DIODE_CATHODE_b2b_300_MD_PSUBcon)
NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon = NP_PW_DIODE_CATHODE_b2b_300_MD AND (PWi INTERACT NP_PW_DIODE_ANODE_b2b_300_MD_PSUBcon)

// define series diode with 2 NP_PW_DIODE connect to Psub
NP_PW_DIODE_ANODE_b2b_307 = NP_PW_DIODE_ANODE OR EMPTY_307
NP_PW_DIODE_CATHODE_b2b_307 = NP_PW_DIODE_CATHODE OR EMPTY_307
NP_PW_DIODE_ANODE_PWi_b2b_307 = STAMP (PWi OR EMPTY_307) BY NP_PW_DIODE_ANODE_b2b_300_MD
NP_PW_DIODE_CATHODE_b2b_307_s = STAMP NP_PW_DIODE_CATHODE_b2b_307 BY NP_PW_DIODE_ANODE_PWi_b2b_307
NP_PW_DIODE_CATHODE_b2b_307_sc = NET AREA RATIO NP_PW_DIODE_CATHODE_b2b_307_s NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
NP_PW_DIODE_CATHODE_X2_b2b_300_MD = NP_PW_DIODE_CATHODE_b2b_300_MD AND NP_PW_DIODE_CATHODE_b2b_307_sc
NP_PW_DIODE_CATHODE_PWi_b2b_307 = STAMP (EMPTY_307 OR PWi) BY NP_PW_DIODE_CATHODE_b2b_300_MD
NP_PW_DIODE_ANODE_b2b_307_s = STAMP NP_PW_DIODE_ANODE_b2b_307 BY NP_PW_DIODE_CATHODE_PWi_b2b_307
NP_PW_DIODE_ANODE_b2b_307_sc = NET AREA RATIO NP_PW_DIODE_ANODE_b2b_307_s NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon > 0
NP_PW_DIODE_ANODE_X2_b2b_300_MD = NP_PW_DIODE_ANODE_b2b_300_MD AND NP_PW_DIODE_ANODE_b2b_307_sc

// filter diode PP_NW_DIODE with self-shorted for Anode and Cathode, and filter diode with Anode/Cathode not connect to same net
PP_NW_DIODE_ANODE_b2b_300_waive1_MD = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300 PP_NW_DIODE_CATHODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_CATHODE_b2b_300_waive2_MD = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300 PP_NW_DIODE_ANODE_b2b_300 INSIDE OF LAYER NW_ULLNW > 0
PP_NW_DIODE_ANODE_b2b_300_waive3_MD = NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300 BY NET > 1
PP_NW_DIODE_CATHDOE_b2b_300_waive4_MD = NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300 BY NET > 1
PP_NW_DIODE_NW_ULLNW300_waive_MD = NW_ULLNW INTERACT (((PP_NW_DIODE_ANODE_b2b_300_waive1_MD OR PP_NW_DIODE_CATHODE_b2b_300_waive2_MD) OR PP_NW_DIODE_ANODE_b2b_300_waive3_MD) OR PP_NW_DIODE_CATHDOE_b2b_300_waive4_MD)
PP_NW_DIODE_ANODE_b2b_300_MD = PP_NW_DIODE_ANODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_MD
PP_NW_DIODE_CATHODE_b2b_300_MD = PP_NW_DIODE_CATHODE_b2b_300 NOT PP_NW_DIODE_NW_ULLNW300_waive_MD
// define diode connect to Psub
PP_NW_DIODE_CATHODE_b2b_300_MD_PSUBcon = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_300_MD PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_b2b_300_MD_PSUBcon = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_300_MD PSUB_STRAP_b2b_300 > 0 
PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon = PP_NW_DIODE_ANODE_b2b_300_MD AND (NW_ULLNW INTERACT PP_NW_DIODE_CATHODE_b2b_300_MD_PSUBcon)
PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon = PP_NW_DIODE_CATHODE_b2b_300_MD AND (NW_ULLNW INTERACT PP_NW_DIODE_ANODE_b2b_300_MD_PSUBcon)

// define series diode with 2 PP_NW_DIODE connect to Psub
PP_NW_DIODE_ANODE_b2b_307 = PP_NW_DIODE_ANODE OR EMPTY_307
PP_NW_DIODE_CATHODE_b2b_307 = PP_NW_DIODE_CATHODE OR EMPTY_307
PP_NW_DIODE_ANODE_NW_ULLNW_b2b_307 = STAMP (NW_ULLNW OR EMPTY_307) BY PP_NW_DIODE_ANODE_b2b_300_MD
PP_NW_DIODE_CATHODE_b2b_307_s = STAMP PP_NW_DIODE_CATHODE_b2b_307 BY PP_NW_DIODE_ANODE_NW_ULLNW_b2b_307
PP_NW_DIODE_CATHODE_b2b_307_sc = NET AREA RATIO PP_NW_DIODE_CATHODE_b2b_307_s PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
PP_NW_DIODE_CATHODE_X2_b2b_300_MD = PP_NW_DIODE_CATHODE_b2b_300_MD AND PP_NW_DIODE_CATHODE_b2b_307_sc
PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_307 = STAMP (EMPTY_307 OR NW_ULLNW) BY PP_NW_DIODE_CATHODE_b2b_300_MD
PP_NW_DIODE_ANODE_b2b_307_s = STAMP PP_NW_DIODE_ANODE_b2b_307 BY PP_NW_DIODE_CATHODE_NW_ULLNW_b2b_307
PP_NW_DIODE_ANODE_b2b_307_sc = NET AREA RATIO PP_NW_DIODE_ANODE_b2b_307_s PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon > 0
PP_NW_DIODE_ANODE_X2_b2b_300_MD = PP_NW_DIODE_ANODE_b2b_300_MD AND PP_NW_DIODE_ANODE_b2b_307_sc

// define back to back diode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////level-1 B2B-1 for MD
//==============================

// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC1_MD = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon)]

//level-2 B2B-1 for MD
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC1_MD = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_X2_b2b_300_MD NP_PW_DIODE_CATHODE_X2_b2b_300_MD > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_MD)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_MD)]

//level-1 B2B-2 for MD
//==============================

//// PW connect to 1 level-Back to Back Diode formed by: NP_PW_DIODE and PP_NW_DIODE 

// Diode NP_PW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode PP_NW_DIODE with Cathode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC2_MD = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon)]

//level-1 B2B-3 for MD
//==============================

// Diode PP_NW_DIODE with Anode connect to PW and Cathode connect to Psub; Diode NP_PW_DIODE with Anode connect to PW and Anode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV1_SC3_MD = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon)*!!AREA(NP_PW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon)]

//level-2 B2B-2 for MD
//==============================

// PW connect to 2 level-Back to Back Diode formed by: NP_PW_DIODE x 2 Anode connect to PSUB and PP_NW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC2_MD = NET AREA RATIO PW_STRAP_b2b_300 NP_PW_DIODE_CATHODE_X2_b2b_300_MD PP_NW_DIODE_ANODE_X2_b2b_300_MD > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(NP_PW_DIODE_CATHODE_X2_b2b_300_MD)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_MD)]


// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 2 Anode connect to PSUB and NP_PW_DIODE x 2 Cathode connect to Psub
PW_STRAP_b2b_300_CLAMPED_LV2_SC3_MD = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_CATHODE_X2_b2b_300_MD NP_PW_DIODE_ANODE_X2_b2b_300_MD > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_MD)*!!AREA(NP_PW_DIODE_ANODE_X2_b2b_300_MD)]

//level-1 B2B-4 for MD
//==============================

// PW connect to 1 level-Back to Back Diode formed by: PP_NW_DIODE x 2 
PW_STRAP_b2b_300_CLAMPED_LV1_SC4_MD = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_wi_CATHODE_b2b_300_MD_PSUBcon)*!!AREA(PP_NW_DIODE_CATHODE_wi_ANODE_b2b_300_MD_PSUBcon)]

//level-2 B2B-4 for MD
//==============================

// PW connect to 2 level-Back to Back Diode formed by: PP_NW_DIODE x 4
PW_STRAP_b2b_300_CLAMPED_LV2_SC4_MD = NET AREA RATIO PW_STRAP_b2b_300 PP_NW_DIODE_ANODE_X2_b2b_300_MD PP_NW_DIODE_CATHODE_X2_b2b_300_MD > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PP_NW_DIODE_ANODE_X2_b2b_300_MD)*!!AREA(PP_NW_DIODE_CATHODE_X2_b2b_300_MD)]

//==============================

// PW connect to P-substrate
PW_STRAP_b2b_300_PSUB_STRAP_MD = NET AREA RATIO PW_STRAP_b2b_300 PSUB_STRAP_b2b_300 > 0
    [!!AREA(PW_STRAP_b2b_300)*!!AREA(PSUB_STRAP_b2b_300)]

RW_B2Bconn_300_MD = RW ENCLOSE (OR PW_STRAP_b2b_300_CLAMPED_LV1_SC1_MD PW_STRAP_b2b_300_CLAMPED_LV1_SC2_MD PW_STRAP_b2b_300_CLAMPED_LV1_SC3_MD PW_STRAP_b2b_300_CLAMPED_LV1_SC4_MD PW_STRAP_b2b_300_CLAMPED_LV2_SC1_MD PW_STRAP_b2b_300_CLAMPED_LV2_SC2_MD PW_STRAP_b2b_300_CLAMPED_LV2_SC3_MD PW_STRAP_b2b_300_CLAMPED_LV2_SC4_MD PW_STRAP_b2b_300_PSUB_STRAP_MD)




DISCONNECT
//====================================================================
// Define layers for N+ ACTIVE to Ngate
//====================================================================
BULK_10 = SIZE CHIP BY 10
EMPTY10 = CHIP NOT BULK_10
NACT_ALL_nact_c_ngate_RULE20 = NACT_ALL OR EMPTY10
POLYi_nact_c_ngate_RULE20 = (POLYi INTERACT GATE ) OR EMPTY10
NGATE_OD2_nact_c_ngate_RULE20 = NGATE_OD2 OR EMPTY10
NGATE_Core_nact_c_ngate_RULE20 = NGATE_Core OR EMPTY10
CO_nact_c_ngate_RULE20 = CO OR EMPTY10
CTM_nact_c_ngate_RULE20 = CTM_all OR EMPTY10
CMM_nact_c_ngate_RULE20 = CMM_all OR EMPTY10
M1_nact_c_ngate_RULE20 = M1 OR EMPTY10
M2_nact_c_ngate_RULE20 = M2 OR EMPTY10
VIA1_nact_c_ngate_RULE20 = VIA1 OR EMPTY10
M3_nact_c_ngate_RULE20 = M3 OR EMPTY10
VIA2_nact_c_ngate_RULE20 = VIA2 OR EMPTY10
M4_nact_c_ngate_RULE20 = M4 OR EMPTY10
VIA3_nact_c_ngate_RULE20 = VIA3 OR EMPTY10
M5_nact_c_ngate_RULE20 = M5 OR EMPTY10
VIA4_nact_c_ngate_RULE20 = VIA4 OR EMPTY10
M6_nact_c_ngate_RULE20 = M6 OR EMPTY10
VIA5_nact_c_ngate_RULE20 = VIA5 OR EMPTY10
//====================================================================
// Build connection for N+ ACTIVE to Ngate
//====================================================================
CONNECT M1_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 BY CO_nact_c_ngate_RULE20
CONNECT M1_nact_c_ngate_RULE20 POLYi_nact_c_ngate_RULE20 BY CO_nact_c_ngate_RULE20
CONNECT NGATE_OD2_nact_c_ngate_RULE20 POLYi_nact_c_ngate_RULE20
CONNECT NGATE_Core_nact_c_ngate_RULE20 POLYi_nact_c_ngate_RULE20
//====================================================================
// Define layers for PW of ACTIVE connected to PW of gate
//====================================================================
BULK_10_1 = SIZE CHIP BY 10.1
EMPTY10_1 = CHIP NOT BULK_10_1
PW_ALL_pw_c_RULE20 = (PW_ALL INSIDE DNWi) OR EMPTY10_1
PSTP_ALL_pw_c_RULE20 = (PSTP_ALL INSIDE DNWi) OR EMPTY10_1
PP_NW_DIODE_ANODE_pw_c_RULE20 = PP_NW_DIODE_ANODE OR EMPTY10_1
PP_NW_DIODE_CATHODE_pw_c_RULE20 = PP_NW_DIODE_CATHODE OR EMPTY10_1
NP_PW_DIODE_CATHODE_pw_c_RULE20 = NP_PW_DIODE_CATHODE OR EMPTY10_1
NP_PW_DIODE_ANODE_pw_c_RULE20 = NP_PW_DIODE_ANODE OR EMPTY10_1
PW_ALL_org_pw_c_RULE20 = PW_ALL  OR EMPTY10_1
NW_ULLNW_pw_c_RULE20 = NW_ULLNW  OR EMPTY10_1
CO_pw_c_RULE20 = CO OR EMPTY10_1
CTM_pw_c_RULE20 = CTM_all OR EMPTY10_1
CMM_pw_c_RULE20 = CMM_all OR EMPTY10_1
M1_pw_c_RULE20 = M1 OR EMPTY10_1
M2_pw_c_RULE20 = M2 OR EMPTY10_1
VIA1_pw_c_RULE20 = VIA1 OR EMPTY10_1
M3_pw_c_RULE20 = M3 OR EMPTY10_1
VIA2_pw_c_RULE20 = VIA2 OR EMPTY10_1
M4_pw_c_RULE20 = M4 OR EMPTY10_1
VIA3_pw_c_RULE20 = VIA3 OR EMPTY10_1
M5_pw_c_RULE20 = M5 OR EMPTY10_1
VIA4_pw_c_RULE20 = VIA4 OR EMPTY10_1
M6_pw_c_RULE20 = M6 OR EMPTY10_1
VIA5_pw_c_RULE20 = VIA5 OR EMPTY10_1
//====================================================================
// Build connection for PW of ACTIVE connected to PW of gate
//====================================================================
CONNECT M1_pw_c_RULE20 PSTP_ALL_pw_c_RULE20 BY CO_pw_c_RULE20
CONNECT PSTP_ALL_pw_c_RULE20 PW_ALL_pw_c_RULE20
CONNECT M1_pw_c_RULE20 PP_NW_DIODE_ANODE_pw_c_RULE20 BY CO_pw_c_RULE20
CONNECT PP_NW_DIODE_ANODE_pw_c_RULE20 NW_ULLNW_pw_c_RULE20
CONNECT M1_pw_c_RULE20 PP_NW_DIODE_CATHODE_pw_c_RULE20 BY CO_pw_c_RULE20
CONNECT PP_NW_DIODE_CATHODE_pw_c_RULE20 NW_ULLNW_pw_c_RULE20
CONNECT M1_pw_c_RULE20 NP_PW_DIODE_CATHODE_pw_c_RULE20 BY CO_pw_c_RULE20
CONNECT NP_PW_DIODE_CATHODE_pw_c_RULE20 PW_ALL_org_pw_c_RULE20
CONNECT M1_pw_c_RULE20 NP_PW_DIODE_ANODE_pw_c_RULE20 BY CO_pw_c_RULE20
CONNECT NP_PW_DIODE_ANODE_pw_c_RULE20 PW_ALL_org_pw_c_RULE20
//====================================================================
// Define layers for metal mesh
//====================================================================
BULK_10_2 = SIZE CHIP BY 10.2
EMPTY10_2 = CHIP NOT BULK_10_2
PWs_c_mesh_RULE20 = (PWi INSIDE DNWi) OR EMPTY10_2
NWs_c_mesh_RULE20 = ((NW_ULLNW OR EMPTY10_2) INSIDE DNWi) OR EMPTY10_2
PSTP_DNW_c_mesh_RULE20 = (PSTP_DNW INSIDE DNWi) OR EMPTY10_2
NSTP_DNW_c_mesh_RULE20 = (NSTP_DNW INSIDE DNWi) OR EMPTY10_2
STP_c_mesh_RULE20 = PSTP_DNW_c_mesh_RULE20 OR NSTP_DNW_c_mesh_RULE20
CO_c_mesh_RULE20 = CO OR EMPTY10_2
CTM_C_mesh_RULE20 = CTM_all OR EMPTY10_2
CMM_C_mesh_RULE20 = CMM_all OR EMPTY10_2
M1_c_mesh_RULE20 = M1 OR EMPTY10_2
M2_c_mesh_RULE20 = M2 OR EMPTY10_2
VIA1_c_mesh_RULE20 = VIA1 OR EMPTY10_2
M3_c_mesh_RULE20 = M3 OR EMPTY10_2
VIA2_c_mesh_RULE20 = VIA2 OR EMPTY10_2
M4_c_mesh_RULE20 = M4 OR EMPTY10_2
VIA3_c_mesh_RULE20 = VIA3 OR EMPTY10_2
M5_c_mesh_RULE20 = M5 OR EMPTY10_2
VIA4_c_mesh_RULE20 = VIA4 OR EMPTY10_2
M6_c_mesh_RULE20 = M6 OR EMPTY10_2
VIA5_c_mesh_RULE20 = VIA5 OR EMPTY10_2
//====================================================================
// Build connection for metal mesh
//====================================================================
CONNECT M1_c_mesh_RULE20 PSTP_DNW_c_mesh_RULE20 NSTP_DNW_c_mesh_RULE20 BY CO_c_mesh_RULE20
CONNECT PSTP_DNW_c_mesh_RULE20 PWs_c_mesh_RULE20
CONNECT NSTP_DNW_c_mesh_RULE20 NWs_c_mesh_RULE20
CONNECT PSTP_DNW_c_mesh_RULE20 STP_c_mesh_RULE20
CONNECT NSTP_DNW_c_mesh_RULE20 STP_c_mesh_RULE20
//====================================================================
// Define layers for GATE connects to its PW
//====================================================================
BULK_10_3 = SIZE CHIP BY 10.3
EMPTY10_3 = CHIP NOT BULK_10_3
POLYi_gate_c_pstp_RULE20 = (POLYi INTERACT GATE) OR EMPTY10_3
NGATE_OD2_gate_c_pstp_RULE20 = NGATE_OD2 OR EMPTY10_3
NGATE_Core_gate_c_pstp_RULE20 = NGATE_Core OR EMPTY10_3
PSTP_ALL_gate_c_pstp_RULE20 = (PSTP_ALL INSIDE DNWi) OR EMPTY10_3
CO_gate_c_pstp_RULE20 = CO OR EMPTY10_3
CTM_gate_c_pstp_RULE20 = CTM_all OR EMPTY10_3
CMM_gate_c_pstp_RULE20 = CMM_all OR EMPTY10_3
M1_gate_c_pstp_RULE20 = M1 OR EMPTY10_3
M2_gate_c_pstp_RULE20 = M2 OR EMPTY10_3
VIA1_gate_c_pstp_RULE20 = VIA1 OR EMPTY10_3
M3_gate_c_pstp_RULE20 = M3 OR EMPTY10_3
VIA2_gate_c_pstp_RULE20 = VIA2 OR EMPTY10_3
M4_gate_c_pstp_RULE20 = M4 OR EMPTY10_3
VIA3_gate_c_pstp_RULE20 = VIA3 OR EMPTY10_3
M5_gate_c_pstp_RULE20 = M5 OR EMPTY10_3
VIA4_gate_c_pstp_RULE20 = VIA4 OR EMPTY10_3
M6_gate_c_pstp_RULE20 = M6 OR EMPTY10_3
VIA5_gate_c_pstp_RULE20 = VIA5 OR EMPTY10_3
//====================================================================
// Build connection for GATE connects to its PW
//====================================================================
CONNECT M1_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 BY CO_gate_c_pstp_RULE20
CONNECT M1_gate_c_pstp_RULE20 POLYi_gate_c_pstp_RULE20 BY CO_gate_c_pstp_RULE20
CONNECT NGATE_OD2_gate_c_pstp_RULE20 POLYi_gate_c_pstp_RULE20
CONNECT NGATE_Core_gate_c_pstp_RULE20 POLYi_gate_c_pstp_RULE20
//====================================================================
// Define layers for waive Diode
//====================================================================
BULK_10_4 = SIZE CHIP BY 10.4
EMPTY10_4 = CHIP NOT BULK_10_4
NDIO_w_c_diode_RULE20 = (NP_PW INSIDE DNWi) OR EMPTY10_4
POLYi_c_diode_RULE20 = (POLYi INTERACT GATE) OR EMPTY10_4
NGATE_OD2_c_diode_RULE20 = NGATE_OD2 OR EMPTY10_4
NGATE_Core_c_diode_RULE20 = NGATE_Core OR EMPTY10_4
CO_c_diode_RULE20 = CO OR EMPTY10_4
CTM_c_diode_RULE20 = CTM_all OR EMPTY10_4
CMM_c_diode_RULE20 = CMM_all OR EMPTY10_4
M1_c_diode_RULE20 = M1 OR EMPTY10_4
M2_c_diode_RULE20 = M2 OR EMPTY10_4
VIA1_c_diode_RULE20 = VIA1 OR EMPTY10_4
M3_c_diode_RULE20 = M3 OR EMPTY10_4
VIA2_c_diode_RULE20 = VIA2 OR EMPTY10_4
M4_c_diode_RULE20 = M4 OR EMPTY10_4
VIA3_c_diode_RULE20 = VIA3 OR EMPTY10_4
M5_c_diode_RULE20 = M5 OR EMPTY10_4
VIA4_c_diode_RULE20 = VIA4 OR EMPTY10_4
M6_c_diode_RULE20 = M6 OR EMPTY10_4
VIA5_c_diode_RULE20 = VIA5 OR EMPTY10_4
//====================================================================
// Build connection for waive Diode
//====================================================================
CONNECT M1_c_diode_RULE20 NDIO_w_c_diode_RULE20 BY CO_c_diode_RULE20
CONNECT M1_c_diode_RULE20 POLYi_c_diode_RULE20 BY CO_c_diode_RULE20
CONNECT NGATE_OD2_c_diode_RULE20 POLYi_c_diode_RULE20
CONNECT NGATE_Core_c_diode_RULE20 POLYi_c_diode_RULE20
NACT_ALL_nact_c_ngate_M1_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M1_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M1_O_RULE20 = NGATE_OD2_M1_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M1_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M1_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M1_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M1_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M1_RULE20 = (NGATE_OD2_M1_O_RULE20 NOT INTERACT NGATE_OD2_M1_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M1_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M1_RULE20_C_NACT_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NGATE_OD2_M1_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NGATE_OD2_M1_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20)]
NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1_C = STAMP NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1 BY NGATE_OD2_M1_RULE20
NACT_C_NGATE_OD2_M1_RULE20_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1_C)]
NACT_C_NGATE_OD2_M1_RULE20_PW_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NGATE_OD2_M1_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M1_RULE20)]
NACT_NGATE_OD2_M1_RULE20_IN_NBL_IN_C_PW_M1 = DFM PROPERTY NACT_C_NGATE_OD2_M1_RULE20_M1 NACT_C_NGATE_OD2_M1_RULE20_PW_M1 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M1_RULE20_M1)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M1_RULE20_PW_M1)] > 0
NACT_NGATE_OD2_M1_RULE20_IN_NBL_IN_C_PW_M1_C = STAMP NACT_NGATE_OD2_M1_RULE20_IN_NBL_IN_C_PW_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
NGATE_OD2_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1= NET AREA RATIO NACT_NGATE_OD2_M1_RULE20_IN_NBL_IN_C_PW_M1_C NGATE_OD2_M1_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M1_RULE20_IN_NBL_IN_C_PW_M1_C)]
NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1 NGATE_OD2_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M1_RULE20_C_NACT_DNWi_M1) - NARAC(NGATE_OD2_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1)]
NGATE_OD2_M1_RULE20_C_NACT_PW_C_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NGATE_OD2_M1_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20)]
NGATE_OD2_M1_RULE20_NACT_CHECK_ALL_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20_C_NACT_M1 NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1 NGATE_OD2_M1_RULE20_C_NACT_PW_C_M1 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M1_RULE20_C_NACT_M1)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M1_RULE20_C_NACT_PW_C_M1) - PROPERTY(NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M1_RULE20_C_NACT_M1) - NARAC(NGATE_OD2_M1_RULE20_C_NACT_PW_C_M1) - PROPERTY(NGATE_OD2_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_2)]
NGATE_OD2_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20_NACT_CHECK_ALL_M1
       [ -= PROPERTY(NGATE_OD2_M1_RULE20_NACT_CHECK_ALL_M1,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M1_RULE20_NACT_CHECK_ALL_M1,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M1_RULE20 
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_M1 = NET AREA RATIO NGATE_OD2_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M1_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1 = NET AREA RATIO NGATE_OD2_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M1_RULE20)]
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_M1 = NET AREA RATIO NGATE_OD2_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1_C)]
NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_PW_M1 = NET AREA RATIO NGATE_OD2_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20)]
NGATE_OD2_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_M1 NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_PW_M1 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_M1)] > 0
       [-= COUNT(NGATE_OD2_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_PW_M1)] > 0
NGATE_OD2_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M1_C = STAMP NGATE_OD2_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M1 BY NGATE_OD2_M1_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_IN_DNWi_C_PW_M1= NET AREA RATIO NGATE_OD2_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M1_C NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M1_C)]
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_IN_DNWi_C_PW_M1 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_IN_DNWi_C_PW_M1)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_DNWi_M1) - NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_IN_DNWi_C_PW_M1)]
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_PW_C_M1 = NET AREA RATIO NGATE_OD2_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M1_RULE20)]
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_ALL_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_M1 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_PW_C_M1 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M1_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_M1)]
       [NGATE_OD2_M1_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1, SD_COUNT_1)]
       [NGATE_OD2_M1_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1, SD_COUNT_2)]
       [NGATE_OD2_M1_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_PW_C_M1) - PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1, SD_COUNT_1)]
       [NGATE_OD2_M1_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_M1) - NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_PW_C_M1) - PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_C_NGATE_OD2_M1_RULE20_CHECK_M1, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_ALL_M1
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_ALL_M1,NGATE_OD2_M1_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_ALL_M1,NGATE_OD2_M1_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NGATE_OD2_M1_RULE20_NACT_CHECK_M1 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M1_RULE20_NACT_CHECK_M1) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 = DFM PROPERTY STP_C_mesh_RULE20 M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M1 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M1 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 = DFM PROPERTY STP_C_mesh_RULE20 VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M1, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20 NGATE_OD2_M1_RULE20_NACT_CHECK_M1 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M1_RULE20_NACT_CHECK_M1)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M1_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre, 1)]
RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre = RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 AND RW_B2Bconn_300_M1 
RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre = RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre = RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_OD2_M1_RULE20 NGATE_OD2_M1_RULE20_NACT_CHECK_M1 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M1_RULE20_NACT_CHECK_M1)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M1_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre1 BY NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1 NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M1, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_pre, 1)]
RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre = RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 AND RW_B2Bconn_300_M1 
RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre = RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre = RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)]
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA1_1
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA1_2
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA1_1
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA1_2
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA1_1
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA1_2
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA1_1
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA1_2
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA1_1
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA1_2
DNW.R.20.3.1_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.1_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.2_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.2_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.3_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.3_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.4_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.4_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.5_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.3.5_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA1_1
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA1_2
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA1_1
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA1_2
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA1_1
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA1_2
DNW.R.20.6.1_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.6.1_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.6.2_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.6.2_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.6.3_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.6.3_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M1_1
DNW.R.20.1.1:NGATE_OD2_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M1_1
DNW.R.20.1.2:NGATE_OD2_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M1_1
DNW.R.20.1.3:NGATE_OD2_M1_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M1_1
DNW.R.20.1.4:NGATE_OD2_M1_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M1_1
DNW.R.20.1.5:NGATE_OD2_M1_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M1_2
DNW.R.20.1.1:NGATE_OD2_M1_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M1_2
DNW.R.20.1.2:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M1_2
DNW.R.20.1.3:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M1_2
DNW.R.20.1.4:NGATE_OD2_M1_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M1_2
DNW.R.20.1.5:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M1_1
DNW.R.20.5.1:NGATE_OD2_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M1_1
DNW.R.20.5.2:NGATE_OD2_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M1_1
DNW.R.20.5.3:NGATE_OD2_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M1_2
DNW.R.20.5.1:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M1_2
DNW.R.20.5.2:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M1_2
DNW.R.20.5.3:NGATE_OD2_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_OD2_RULE20_NGATE_OD2_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M1_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M1_O_RULE20 = NGATE_Core_M1_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M1_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M1_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M1_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M1_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M1_RULE20 = (NGATE_Core_M1_O_RULE20 NOT INTERACT NGATE_Core_M1_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M1_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M1_RULE20_C_NACT_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NGATE_Core_M1_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M1_RULE20_C_NACT_DNWi_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NGATE_Core_M1_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20)]
NGATE_Core_M1_RULE20_C_NACT_DNWi_M1_C = STAMP NGATE_Core_M1_RULE20_C_NACT_DNWi_M1 BY NGATE_Core_M1_RULE20
NACT_C_NGATE_Core_M1_RULE20_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NGATE_Core_M1_RULE20_C_NACT_DNWi_M1_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M1_RULE20_C_NACT_DNWi_M1_C)]
NACT_C_NGATE_Core_M1_RULE20_PW_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NGATE_Core_M1_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M1_RULE20)]
NACT_NGATE_Core_M1_RULE20_IN_NBL_IN_C_PW_M1 = DFM PROPERTY NACT_C_NGATE_Core_M1_RULE20_M1 NACT_C_NGATE_Core_M1_RULE20_PW_M1 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M1_RULE20_M1)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M1_RULE20_PW_M1)] > 0
NACT_NGATE_Core_M1_RULE20_IN_NBL_IN_C_PW_M1_C = STAMP NACT_NGATE_Core_M1_RULE20_IN_NBL_IN_C_PW_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
NGATE_Core_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1= NET AREA RATIO NACT_NGATE_Core_M1_RULE20_IN_NBL_IN_C_PW_M1_C NGATE_Core_M1_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M1_RULE20_IN_NBL_IN_C_PW_M1_C)]
NGATE_Core_M1_RULE20_C_NACT_CHECK_M1 = DFM PROPERTY NGATE_Core_M1_RULE20_C_NACT_DNWi_M1 NGATE_Core_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M1_RULE20_C_NACT_DNWi_M1)]
       [SD_COUNT_1= NARAC(NGATE_Core_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1)]
       [SD_COUNT_2= NARAC(NGATE_Core_M1_RULE20_C_NACT_DNWi_M1) - NARAC(NGATE_Core_M1_RULE20_C_NACT_IN_DNWi_C_PW_M1)]
NGATE_Core_M1_RULE20_C_NACT_PW_C_M1 = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NGATE_Core_M1_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20)]
NGATE_Core_M1_RULE20_NACT_CHECK_ALL_M1 = DFM PROPERTY NGATE_Core_M1_RULE20_C_NACT_M1 NGATE_Core_M1_RULE20_C_NACT_CHECK_M1 NGATE_Core_M1_RULE20_C_NACT_PW_C_M1 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M1_RULE20_C_NACT_M1)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M1_RULE20_C_NACT_PW_C_M1) - PROPERTY(NGATE_Core_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M1_RULE20_C_NACT_M1) - NARAC(NGATE_Core_M1_RULE20_C_NACT_PW_C_M1) - PROPERTY(NGATE_Core_M1_RULE20_C_NACT_CHECK_M1, SD_COUNT_2)]
NGATE_Core_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_Core_M1_RULE20_NACT_CHECK_ALL_M1
       [ -= PROPERTY(NGATE_Core_M1_RULE20_NACT_CHECK_ALL_M1,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M1_RULE20_NACT_CHECK_ALL_M1,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M1_RULE20 
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_M1 = NET AREA RATIO NGATE_Core_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M1_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1 = NET AREA RATIO NGATE_Core_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M1_RULE20)]
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_M1 = NET AREA RATIO NGATE_Core_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1_C)]
NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_PW_M1 = NET AREA RATIO NGATE_Core_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20)]
NGATE_Core_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M1 = DFM PROPERTY NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_M1 NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_PW_M1 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_M1)] > 0
       [-= COUNT(NGATE_Core_M1_RULE20_C_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_PW_M1)] > 0
NGATE_Core_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M1_C = STAMP NGATE_Core_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M1 BY NGATE_Core_M1_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_IN_DNWi_C_PW_M1= NET AREA RATIO NGATE_Core_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M1_C NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M1_RULE20_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M1_C)]
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_IN_DNWi_C_PW_M1 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_IN_DNWi_C_PW_M1)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_DNWi_M1) - NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_IN_DNWi_C_PW_M1)]
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_PW_C_M1 = NET AREA RATIO NGATE_Core_M1_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M1_RULE20)]
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_ALL_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_M1 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_PW_C_M1 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M1_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_M1)]
       [NGATE_Core_M1_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1, SD_COUNT_1)]
       [NGATE_Core_M1_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1, SD_COUNT_2)]
       [NGATE_Core_M1_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_PW_C_M1) - PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1, SD_COUNT_1)]
       [NGATE_Core_M1_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_M1) - NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_PW_C_M1) - PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_C_NGATE_Core_M1_RULE20_CHECK_M1, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_ALL_M1
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_ALL_M1,NGATE_Core_M1_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_ALL_M1,NGATE_Core_M1_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NGATE_Core_M1_RULE20_NACT_CHECK_M1 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M1_RULE20_NACT_CHECK_M1) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M1_RULE20_NACT_CHECK_M1)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M1
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 = DFM PROPERTY STP_C_mesh_RULE20 M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M1)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_Core_M1 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M1
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_Core_M1 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_Core_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 = DFM PROPERTY STP_C_mesh_RULE20 VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M1)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M1, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_Core_M1_RULE20 NGATE_Core_M1_RULE20_NACT_CHECK_M1 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M1_RULE20_NACT_CHECK_M1)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M1_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre, 1)]
RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre = RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 AND RW_B2Bconn_300_M1 
RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre = RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre = RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 = DFM PROPERTY NGATE_Core_M1_RULE20 NGATE_Core_M1_RULE20_NACT_CHECK_M1 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M1_RULE20_NACT_CHECK_M1)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M1_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_C = STAMP NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre1 BY NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1 NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M1, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_pre, 1)]
RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre = RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 AND RW_B2Bconn_300_M1 
RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre = RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre = RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NOT RW_B2Bconn_300_M1 
RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)]
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA1_1
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA1_2
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA1_1
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA1_2
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA1_1
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA1_2
DNW.R.20.4.1_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.4.1_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.4.2_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.4.2_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
DNW.R.20.4.3_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
DNW.R.20.4.3_VIA1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M1_1
DNW.R.20.2.1:NGATE_Core_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M1_1
DNW.R.20.2.2:NGATE_Core_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M1_1
DNW.R.20.2.3:NGATE_Core_M1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M1_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_NOT_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M1_2
DNW.R.20.2.1:NGATE_Core_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M1_2
DNW.R.20.2.2:NGATE_Core_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M1_2
DNW.R.20.2.3:NGATE_Core_M1_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M1_NGATE_Core_RULE20_NGATE_Core_M1_RULE20_CHECK_M1_NOT_B2B_M1, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M1_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M1_RULE20_NACT_CHECK_M1_AND_B2B_M1 INTERACT RESULT
}
CONNECT M2_nact_c_ngate_RULE20 M1_nact_c_ngate_RULE20 BY VIA1_nact_c_ngate_RULE20
CONNECT M2_pw_c_RULE20 M1_pw_c_RULE20 BY VIA1_pw_c_RULE20
CONNECT M2_c_mesh_RULE20 M1_c_mesh_RULE20 BY VIA1_c_mesh_RULE20
CONNECT M2_gate_c_pstp_RULE20 M1_gate_c_pstp_RULE20 BY VIA1_gate_c_pstp_RULE20
CONNECT M2_c_diode_RULE20 M1_c_diode_RULE20 BY VIA1_c_diode_RULE20
NACT_ALL_nact_c_ngate_M2_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M2_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M2_O_RULE20 = NGATE_OD2_M2_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M2_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M2_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M2_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M2_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M2_RULE20 = (NGATE_OD2_M2_O_RULE20 NOT INTERACT NGATE_OD2_M2_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M2_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M2_RULE20_C_NACT_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NGATE_OD2_M2_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NGATE_OD2_M2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20)]
NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2_C = STAMP NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2 BY NGATE_OD2_M2_RULE20
NACT_C_NGATE_OD2_M2_RULE20_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2_C)]
NACT_C_NGATE_OD2_M2_RULE20_PW_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NGATE_OD2_M2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M2_RULE20)]
NACT_NGATE_OD2_M2_RULE20_IN_NBL_IN_C_PW_M2 = DFM PROPERTY NACT_C_NGATE_OD2_M2_RULE20_M2 NACT_C_NGATE_OD2_M2_RULE20_PW_M2 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M2_RULE20_M2)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M2_RULE20_PW_M2)] > 0
NACT_NGATE_OD2_M2_RULE20_IN_NBL_IN_C_PW_M2_C = STAMP NACT_NGATE_OD2_M2_RULE20_IN_NBL_IN_C_PW_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
NGATE_OD2_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2= NET AREA RATIO NACT_NGATE_OD2_M2_RULE20_IN_NBL_IN_C_PW_M2_C NGATE_OD2_M2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M2_RULE20_IN_NBL_IN_C_PW_M2_C)]
NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2 NGATE_OD2_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M2_RULE20_C_NACT_DNWi_M2) - NARAC(NGATE_OD2_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2)]
NGATE_OD2_M2_RULE20_C_NACT_PW_C_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NGATE_OD2_M2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20)]
NGATE_OD2_M2_RULE20_NACT_CHECK_ALL_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20_C_NACT_M2 NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2 NGATE_OD2_M2_RULE20_C_NACT_PW_C_M2 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M2_RULE20_C_NACT_M2)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M2_RULE20_C_NACT_PW_C_M2) - PROPERTY(NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M2_RULE20_C_NACT_M2) - NARAC(NGATE_OD2_M2_RULE20_C_NACT_PW_C_M2) - PROPERTY(NGATE_OD2_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_2)]
NGATE_OD2_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20_NACT_CHECK_ALL_M2
       [ -= PROPERTY(NGATE_OD2_M2_RULE20_NACT_CHECK_ALL_M2,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M2_RULE20_NACT_CHECK_ALL_M2,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M2_RULE20 
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_M2 = NET AREA RATIO NGATE_OD2_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M2_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2 = NET AREA RATIO NGATE_OD2_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M2_RULE20)]
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_M2 = NET AREA RATIO NGATE_OD2_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2_C)]
NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_PW_M2 = NET AREA RATIO NGATE_OD2_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20)]
NGATE_OD2_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_M2 NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_PW_M2 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_M2)] > 0
       [-= COUNT(NGATE_OD2_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_PW_M2)] > 0
NGATE_OD2_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M2_C = STAMP NGATE_OD2_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M2 BY NGATE_OD2_M2_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_IN_DNWi_C_PW_M2= NET AREA RATIO NGATE_OD2_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M2_C NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M2_C)]
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_IN_DNWi_C_PW_M2 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_IN_DNWi_C_PW_M2)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_DNWi_M2) - NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_IN_DNWi_C_PW_M2)]
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_PW_C_M2 = NET AREA RATIO NGATE_OD2_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M2_RULE20)]
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_ALL_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_M2 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_PW_C_M2 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M2_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_M2)]
       [NGATE_OD2_M2_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2, SD_COUNT_1)]
       [NGATE_OD2_M2_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2, SD_COUNT_2)]
       [NGATE_OD2_M2_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_PW_C_M2) - PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2, SD_COUNT_1)]
       [NGATE_OD2_M2_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_M2) - NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_PW_C_M2) - PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_C_NGATE_OD2_M2_RULE20_CHECK_M2, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_ALL_M2
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_ALL_M2,NGATE_OD2_M2_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_ALL_M2,NGATE_OD2_M2_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NGATE_OD2_M2_RULE20_NACT_CHECK_M2 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M2_RULE20_NACT_CHECK_M2) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 = DFM PROPERTY STP_C_mesh_RULE20 M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M2 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M2 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 = DFM PROPERTY STP_C_mesh_RULE20 VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M2, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20 NGATE_OD2_M2_RULE20_NACT_CHECK_M2 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M2_RULE20_NACT_CHECK_M2)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M2_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre1 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre, 1)]
RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre = RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 AND RW_B2Bconn_300_M2 
RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre = RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre = RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_OD2_M2_RULE20 NGATE_OD2_M2_RULE20_NACT_CHECK_M2 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M2_RULE20_NACT_CHECK_M2)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M2_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre1 BY NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2 NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M2, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_pre, 1)]
RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre = RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 AND RW_B2Bconn_300_M2 
RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre = RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre = RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)]
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA2_1
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA2_2
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA2_1
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA2_2
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA2_1
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA2_2
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA2_1
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA2_2
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA2_1
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA2_2
DNW.R.20.3.1_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.1_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.2_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.2_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.3_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.3_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.4_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.4_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.5_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.3.5_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA2_1
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA2_2
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA2_1
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA2_2
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA2_1
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA2_2
DNW.R.20.6.1_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.6.1_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.6.2_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.6.2_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.6.3_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.6.3_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M2_1
DNW.R.20.1.1:NGATE_OD2_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M2_1
DNW.R.20.1.2:NGATE_OD2_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M2_1
DNW.R.20.1.3:NGATE_OD2_M2_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M2_1
DNW.R.20.1.4:NGATE_OD2_M2_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M2_1
DNW.R.20.1.5:NGATE_OD2_M2_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M2_2
DNW.R.20.1.1:NGATE_OD2_M2_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M2_2
DNW.R.20.1.2:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M2_2
DNW.R.20.1.3:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M2_2
DNW.R.20.1.4:NGATE_OD2_M2_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M2_2
DNW.R.20.1.5:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M2_1
DNW.R.20.5.1:NGATE_OD2_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M2_1
DNW.R.20.5.2:NGATE_OD2_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M2_1
DNW.R.20.5.3:NGATE_OD2_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M2_2
DNW.R.20.5.1:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M2_2
DNW.R.20.5.2:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M2_2
DNW.R.20.5.3:NGATE_OD2_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_OD2_RULE20_NGATE_OD2_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M2_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M2_O_RULE20 = NGATE_Core_M2_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M2_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M2_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M2_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M2_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M2_RULE20 = (NGATE_Core_M2_O_RULE20 NOT INTERACT NGATE_Core_M2_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M2_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M2_RULE20_C_NACT_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NGATE_Core_M2_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M2_RULE20_C_NACT_DNWi_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NGATE_Core_M2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20)]
NGATE_Core_M2_RULE20_C_NACT_DNWi_M2_C = STAMP NGATE_Core_M2_RULE20_C_NACT_DNWi_M2 BY NGATE_Core_M2_RULE20
NACT_C_NGATE_Core_M2_RULE20_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NGATE_Core_M2_RULE20_C_NACT_DNWi_M2_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M2_RULE20_C_NACT_DNWi_M2_C)]
NACT_C_NGATE_Core_M2_RULE20_PW_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NGATE_Core_M2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M2_RULE20)]
NACT_NGATE_Core_M2_RULE20_IN_NBL_IN_C_PW_M2 = DFM PROPERTY NACT_C_NGATE_Core_M2_RULE20_M2 NACT_C_NGATE_Core_M2_RULE20_PW_M2 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M2_RULE20_M2)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M2_RULE20_PW_M2)] > 0
NACT_NGATE_Core_M2_RULE20_IN_NBL_IN_C_PW_M2_C = STAMP NACT_NGATE_Core_M2_RULE20_IN_NBL_IN_C_PW_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
NGATE_Core_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2= NET AREA RATIO NACT_NGATE_Core_M2_RULE20_IN_NBL_IN_C_PW_M2_C NGATE_Core_M2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M2_RULE20_IN_NBL_IN_C_PW_M2_C)]
NGATE_Core_M2_RULE20_C_NACT_CHECK_M2 = DFM PROPERTY NGATE_Core_M2_RULE20_C_NACT_DNWi_M2 NGATE_Core_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M2_RULE20_C_NACT_DNWi_M2)]
       [SD_COUNT_1= NARAC(NGATE_Core_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2)]
       [SD_COUNT_2= NARAC(NGATE_Core_M2_RULE20_C_NACT_DNWi_M2) - NARAC(NGATE_Core_M2_RULE20_C_NACT_IN_DNWi_C_PW_M2)]
NGATE_Core_M2_RULE20_C_NACT_PW_C_M2 = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NGATE_Core_M2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20)]
NGATE_Core_M2_RULE20_NACT_CHECK_ALL_M2 = DFM PROPERTY NGATE_Core_M2_RULE20_C_NACT_M2 NGATE_Core_M2_RULE20_C_NACT_CHECK_M2 NGATE_Core_M2_RULE20_C_NACT_PW_C_M2 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M2_RULE20_C_NACT_M2)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M2_RULE20_C_NACT_PW_C_M2) - PROPERTY(NGATE_Core_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M2_RULE20_C_NACT_M2) - NARAC(NGATE_Core_M2_RULE20_C_NACT_PW_C_M2) - PROPERTY(NGATE_Core_M2_RULE20_C_NACT_CHECK_M2, SD_COUNT_2)]
NGATE_Core_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_Core_M2_RULE20_NACT_CHECK_ALL_M2
       [ -= PROPERTY(NGATE_Core_M2_RULE20_NACT_CHECK_ALL_M2,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M2_RULE20_NACT_CHECK_ALL_M2,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M2_RULE20 
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_M2 = NET AREA RATIO NGATE_Core_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M2_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2 = NET AREA RATIO NGATE_Core_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M2_RULE20)]
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_M2 = NET AREA RATIO NGATE_Core_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2_C)]
NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_PW_M2 = NET AREA RATIO NGATE_Core_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20)]
NGATE_Core_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M2 = DFM PROPERTY NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_M2 NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_PW_M2 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_M2)] > 0
       [-= COUNT(NGATE_Core_M2_RULE20_C_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_PW_M2)] > 0
NGATE_Core_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M2_C = STAMP NGATE_Core_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M2 BY NGATE_Core_M2_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_IN_DNWi_C_PW_M2= NET AREA RATIO NGATE_Core_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M2_C NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M2_RULE20_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M2_C)]
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_IN_DNWi_C_PW_M2 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_IN_DNWi_C_PW_M2)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_DNWi_M2) - NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_IN_DNWi_C_PW_M2)]
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_PW_C_M2 = NET AREA RATIO NGATE_Core_M2_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M2_RULE20)]
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_ALL_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_M2 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_PW_C_M2 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M2_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_M2)]
       [NGATE_Core_M2_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2, SD_COUNT_1)]
       [NGATE_Core_M2_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2, SD_COUNT_2)]
       [NGATE_Core_M2_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_PW_C_M2) - PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2, SD_COUNT_1)]
       [NGATE_Core_M2_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_M2) - NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_PW_C_M2) - PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_C_NGATE_Core_M2_RULE20_CHECK_M2, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_ALL_M2
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_ALL_M2,NGATE_Core_M2_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_ALL_M2,NGATE_Core_M2_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NGATE_Core_M2_RULE20_NACT_CHECK_M2 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M2_RULE20_NACT_CHECK_M2) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M2_RULE20_NACT_CHECK_M2)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M2
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 = DFM PROPERTY STP_C_mesh_RULE20 M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M2)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_Core_M2 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_Core_M2 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M2
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_Core_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_Core_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 = DFM PROPERTY STP_C_mesh_RULE20 VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M2)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M2, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_Core_M2_RULE20 NGATE_Core_M2_RULE20_NACT_CHECK_M2 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M2_RULE20_NACT_CHECK_M2)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M2_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre1 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre, 1)]
RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre = RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 AND RW_B2Bconn_300_M2 
RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre = RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre = RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 = DFM PROPERTY NGATE_Core_M2_RULE20 NGATE_Core_M2_RULE20_NACT_CHECK_M2 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M2_RULE20_NACT_CHECK_M2)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M2_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_C = STAMP NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre1 BY NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2 NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M2, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_pre, 1)]
RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre = RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 AND RW_B2Bconn_300_M2 
RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre = RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre = RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NOT RW_B2Bconn_300_M2 
RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)]
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA2_1
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA2_2
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA2_1
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA2_2
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA2_1
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA2_2
DNW.R.20.4.1_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.4.1_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.4.2_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.4.2_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
DNW.R.20.4.3_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
DNW.R.20.4.3_VIA2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M2_1
DNW.R.20.2.1:NGATE_Core_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M2_1
DNW.R.20.2.2:NGATE_Core_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M2_1
DNW.R.20.2.3:NGATE_Core_M2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M2_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_NOT_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M2_2
DNW.R.20.2.1:NGATE_Core_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M2_2
DNW.R.20.2.2:NGATE_Core_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M2_2
DNW.R.20.2.3:NGATE_Core_M2_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M2_NGATE_Core_RULE20_NGATE_Core_M2_RULE20_CHECK_M2_NOT_B2B_M2, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M2_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M2_RULE20_NACT_CHECK_M2_AND_B2B_M2 INTERACT RESULT
}
CONNECT M3_nact_c_ngate_RULE20 M2_nact_c_ngate_RULE20 BY VIA2_nact_c_ngate_RULE20
CONNECT M3_pw_c_RULE20 M2_pw_c_RULE20 BY VIA2_pw_c_RULE20
CONNECT M3_c_mesh_RULE20 M2_c_mesh_RULE20 BY VIA2_c_mesh_RULE20
CONNECT M3_gate_c_pstp_RULE20 M2_gate_c_pstp_RULE20 BY VIA2_gate_c_pstp_RULE20
CONNECT M3_c_diode_RULE20 M2_c_diode_RULE20 BY VIA2_c_diode_RULE20
NACT_ALL_nact_c_ngate_M3_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M3_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M3_O_RULE20 = NGATE_OD2_M3_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M3_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M3_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M3_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M3_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M3_RULE20 = (NGATE_OD2_M3_O_RULE20 NOT INTERACT NGATE_OD2_M3_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M3_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M3_RULE20_C_NACT_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NGATE_OD2_M3_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NGATE_OD2_M3_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20)]
NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3_C = STAMP NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3 BY NGATE_OD2_M3_RULE20
NACT_C_NGATE_OD2_M3_RULE20_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3_C)]
NACT_C_NGATE_OD2_M3_RULE20_PW_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NGATE_OD2_M3_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M3_RULE20)]
NACT_NGATE_OD2_M3_RULE20_IN_NBL_IN_C_PW_M3 = DFM PROPERTY NACT_C_NGATE_OD2_M3_RULE20_M3 NACT_C_NGATE_OD2_M3_RULE20_PW_M3 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M3_RULE20_M3)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M3_RULE20_PW_M3)] > 0
NACT_NGATE_OD2_M3_RULE20_IN_NBL_IN_C_PW_M3_C = STAMP NACT_NGATE_OD2_M3_RULE20_IN_NBL_IN_C_PW_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
NGATE_OD2_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3= NET AREA RATIO NACT_NGATE_OD2_M3_RULE20_IN_NBL_IN_C_PW_M3_C NGATE_OD2_M3_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M3_RULE20_IN_NBL_IN_C_PW_M3_C)]
NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3 NGATE_OD2_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M3_RULE20_C_NACT_DNWi_M3) - NARAC(NGATE_OD2_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3)]
NGATE_OD2_M3_RULE20_C_NACT_PW_C_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NGATE_OD2_M3_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20)]
NGATE_OD2_M3_RULE20_NACT_CHECK_ALL_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20_C_NACT_M3 NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3 NGATE_OD2_M3_RULE20_C_NACT_PW_C_M3 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M3_RULE20_C_NACT_M3)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M3_RULE20_C_NACT_PW_C_M3) - PROPERTY(NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M3_RULE20_C_NACT_M3) - NARAC(NGATE_OD2_M3_RULE20_C_NACT_PW_C_M3) - PROPERTY(NGATE_OD2_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_2)]
NGATE_OD2_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20_NACT_CHECK_ALL_M3
       [ -= PROPERTY(NGATE_OD2_M3_RULE20_NACT_CHECK_ALL_M3,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M3_RULE20_NACT_CHECK_ALL_M3,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M3_RULE20 
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_M3 = NET AREA RATIO NGATE_OD2_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M3_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3 = NET AREA RATIO NGATE_OD2_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M3_RULE20)]
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_M3 = NET AREA RATIO NGATE_OD2_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3_C)]
NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_PW_M3 = NET AREA RATIO NGATE_OD2_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20)]
NGATE_OD2_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_M3 NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_PW_M3 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_M3)] > 0
       [-= COUNT(NGATE_OD2_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_PW_M3)] > 0
NGATE_OD2_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M3_C = STAMP NGATE_OD2_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M3 BY NGATE_OD2_M3_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_IN_DNWi_C_PW_M3= NET AREA RATIO NGATE_OD2_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M3_C NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M3_C)]
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_IN_DNWi_C_PW_M3 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_IN_DNWi_C_PW_M3)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_DNWi_M3) - NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_IN_DNWi_C_PW_M3)]
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_PW_C_M3 = NET AREA RATIO NGATE_OD2_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M3_RULE20)]
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_ALL_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_M3 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_PW_C_M3 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M3_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_M3)]
       [NGATE_OD2_M3_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3, SD_COUNT_1)]
       [NGATE_OD2_M3_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3, SD_COUNT_2)]
       [NGATE_OD2_M3_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_PW_C_M3) - PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3, SD_COUNT_1)]
       [NGATE_OD2_M3_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_M3) - NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_PW_C_M3) - PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_C_NGATE_OD2_M3_RULE20_CHECK_M3, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_ALL_M3
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_ALL_M3,NGATE_OD2_M3_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_ALL_M3,NGATE_OD2_M3_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NGATE_OD2_M3_RULE20_NACT_CHECK_M3 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M3_RULE20_NACT_CHECK_M3) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 = DFM PROPERTY STP_C_mesh_RULE20 M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M3 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M3 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M3 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 = DFM PROPERTY STP_C_mesh_RULE20 VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M3, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20 NGATE_OD2_M3_RULE20_NACT_CHECK_M3 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M3_RULE20_NACT_CHECK_M3)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M3_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre1 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre, 1)]
RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre = RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 AND RW_B2Bconn_300_M3 
RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre = RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre = RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_OD2_M3_RULE20 NGATE_OD2_M3_RULE20_NACT_CHECK_M3 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M3_RULE20_NACT_CHECK_M3)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M3_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre1 BY NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3 NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M3, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_pre, 1)]
RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre = RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 AND RW_B2Bconn_300_M3 
RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre = RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre = RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)]
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA3_1
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA3_2
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA3_1
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA3_2
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA3_1
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA3_2
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA3_1
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA3_2
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA3_1
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA3_2
DNW.R.20.3.1_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.1_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.2_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.2_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.3_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.3_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.4_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.4_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.5_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.3.5_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA3_1
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA3_2
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA3_1
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA3_2
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA3_1
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA3_2
DNW.R.20.6.1_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.6.1_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.6.2_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.6.2_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.6.3_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.6.3_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M3_1
DNW.R.20.1.1:NGATE_OD2_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M3_1
DNW.R.20.1.2:NGATE_OD2_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M3_1
DNW.R.20.1.3:NGATE_OD2_M3_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M3_1
DNW.R.20.1.4:NGATE_OD2_M3_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M3_1
DNW.R.20.1.5:NGATE_OD2_M3_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M3_2
DNW.R.20.1.1:NGATE_OD2_M3_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M3_2
DNW.R.20.1.2:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M3_2
DNW.R.20.1.3:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M3_2
DNW.R.20.1.4:NGATE_OD2_M3_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M3_2
DNW.R.20.1.5:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M3_1
DNW.R.20.5.1:NGATE_OD2_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M3_1
DNW.R.20.5.2:NGATE_OD2_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M3_1
DNW.R.20.5.3:NGATE_OD2_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M3_2
DNW.R.20.5.1:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M3_2
DNW.R.20.5.2:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M3_2
DNW.R.20.5.3:NGATE_OD2_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_OD2_RULE20_NGATE_OD2_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M3_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M3_O_RULE20 = NGATE_Core_M3_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M3_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M3_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M3_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M3_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M3_RULE20 = (NGATE_Core_M3_O_RULE20 NOT INTERACT NGATE_Core_M3_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M3_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M3_RULE20_C_NACT_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NGATE_Core_M3_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M3_RULE20_C_NACT_DNWi_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NGATE_Core_M3_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20)]
NGATE_Core_M3_RULE20_C_NACT_DNWi_M3_C = STAMP NGATE_Core_M3_RULE20_C_NACT_DNWi_M3 BY NGATE_Core_M3_RULE20
NACT_C_NGATE_Core_M3_RULE20_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NGATE_Core_M3_RULE20_C_NACT_DNWi_M3_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M3_RULE20_C_NACT_DNWi_M3_C)]
NACT_C_NGATE_Core_M3_RULE20_PW_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NGATE_Core_M3_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M3_RULE20)]
NACT_NGATE_Core_M3_RULE20_IN_NBL_IN_C_PW_M3 = DFM PROPERTY NACT_C_NGATE_Core_M3_RULE20_M3 NACT_C_NGATE_Core_M3_RULE20_PW_M3 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M3_RULE20_M3)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M3_RULE20_PW_M3)] > 0
NACT_NGATE_Core_M3_RULE20_IN_NBL_IN_C_PW_M3_C = STAMP NACT_NGATE_Core_M3_RULE20_IN_NBL_IN_C_PW_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
NGATE_Core_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3= NET AREA RATIO NACT_NGATE_Core_M3_RULE20_IN_NBL_IN_C_PW_M3_C NGATE_Core_M3_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M3_RULE20_IN_NBL_IN_C_PW_M3_C)]
NGATE_Core_M3_RULE20_C_NACT_CHECK_M3 = DFM PROPERTY NGATE_Core_M3_RULE20_C_NACT_DNWi_M3 NGATE_Core_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M3_RULE20_C_NACT_DNWi_M3)]
       [SD_COUNT_1= NARAC(NGATE_Core_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3)]
       [SD_COUNT_2= NARAC(NGATE_Core_M3_RULE20_C_NACT_DNWi_M3) - NARAC(NGATE_Core_M3_RULE20_C_NACT_IN_DNWi_C_PW_M3)]
NGATE_Core_M3_RULE20_C_NACT_PW_C_M3 = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NGATE_Core_M3_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20)]
NGATE_Core_M3_RULE20_NACT_CHECK_ALL_M3 = DFM PROPERTY NGATE_Core_M3_RULE20_C_NACT_M3 NGATE_Core_M3_RULE20_C_NACT_CHECK_M3 NGATE_Core_M3_RULE20_C_NACT_PW_C_M3 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M3_RULE20_C_NACT_M3)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M3_RULE20_C_NACT_PW_C_M3) - PROPERTY(NGATE_Core_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M3_RULE20_C_NACT_M3) - NARAC(NGATE_Core_M3_RULE20_C_NACT_PW_C_M3) - PROPERTY(NGATE_Core_M3_RULE20_C_NACT_CHECK_M3, SD_COUNT_2)]
NGATE_Core_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_Core_M3_RULE20_NACT_CHECK_ALL_M3
       [ -= PROPERTY(NGATE_Core_M3_RULE20_NACT_CHECK_ALL_M3,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M3_RULE20_NACT_CHECK_ALL_M3,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M3_RULE20 
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_M3 = NET AREA RATIO NGATE_Core_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M3_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3 = NET AREA RATIO NGATE_Core_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M3_RULE20)]
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_M3 = NET AREA RATIO NGATE_Core_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3_C)]
NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_PW_M3 = NET AREA RATIO NGATE_Core_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20)]
NGATE_Core_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M3 = DFM PROPERTY NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_M3 NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_PW_M3 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_M3)] > 0
       [-= COUNT(NGATE_Core_M3_RULE20_C_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_PW_M3)] > 0
NGATE_Core_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M3_C = STAMP NGATE_Core_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M3 BY NGATE_Core_M3_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_IN_DNWi_C_PW_M3= NET AREA RATIO NGATE_Core_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M3_C NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M3_RULE20_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M3_C)]
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_IN_DNWi_C_PW_M3 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_IN_DNWi_C_PW_M3)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_DNWi_M3) - NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_IN_DNWi_C_PW_M3)]
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_PW_C_M3 = NET AREA RATIO NGATE_Core_M3_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M3_RULE20)]
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_ALL_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_M3 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_PW_C_M3 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M3_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_M3)]
       [NGATE_Core_M3_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3, SD_COUNT_1)]
       [NGATE_Core_M3_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3, SD_COUNT_2)]
       [NGATE_Core_M3_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_PW_C_M3) - PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3, SD_COUNT_1)]
       [NGATE_Core_M3_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_M3) - NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_PW_C_M3) - PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_C_NGATE_Core_M3_RULE20_CHECK_M3, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_ALL_M3
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_ALL_M3,NGATE_Core_M3_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_ALL_M3,NGATE_Core_M3_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NGATE_Core_M3_RULE20_NACT_CHECK_M3 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M3_RULE20_NACT_CHECK_M3) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M3_RULE20_NACT_CHECK_M3)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M3
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 = DFM PROPERTY STP_C_mesh_RULE20 M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M3)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_Core_M3 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_Core_M3 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_Core_M3 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M3
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_Core_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_Core_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_Core_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 = DFM PROPERTY STP_C_mesh_RULE20 VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M3)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M3, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_Core_M3_RULE20 NGATE_Core_M3_RULE20_NACT_CHECK_M3 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M3_RULE20_NACT_CHECK_M3)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M3_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre1 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre, 1)]
RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre = RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 AND RW_B2Bconn_300_M3 
RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre = RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre = RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 = DFM PROPERTY NGATE_Core_M3_RULE20 NGATE_Core_M3_RULE20_NACT_CHECK_M3 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M3_RULE20_NACT_CHECK_M3)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M3_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_C = STAMP NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre1 BY NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3 NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M3, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_pre, 1)]
RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre = RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 AND RW_B2Bconn_300_M3 
RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre = RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre = RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NOT RW_B2Bconn_300_M3 
RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)]
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA3_1
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA3_2
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA3_1
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA3_2
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA3_1
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA3_2
DNW.R.20.4.1_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.4.1_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.4.2_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.4.2_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
DNW.R.20.4.3_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
DNW.R.20.4.3_VIA3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M3_1
DNW.R.20.2.1:NGATE_Core_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M3_1
DNW.R.20.2.2:NGATE_Core_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M3_1
DNW.R.20.2.3:NGATE_Core_M3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M3_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_NOT_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M3_2
DNW.R.20.2.1:NGATE_Core_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M3_2
DNW.R.20.2.2:NGATE_Core_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M3_2
DNW.R.20.2.3:NGATE_Core_M3_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M3_NGATE_Core_RULE20_NGATE_Core_M3_RULE20_CHECK_M3_NOT_B2B_M3, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M3_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M3_RULE20_NACT_CHECK_M3_AND_B2B_M3 INTERACT RESULT
}
CONNECT M4_nact_c_ngate_RULE20 M3_nact_c_ngate_RULE20 BY VIA3_nact_c_ngate_RULE20
CONNECT M4_pw_c_RULE20 M3_pw_c_RULE20 BY VIA3_pw_c_RULE20
CONNECT M4_c_mesh_RULE20 M3_c_mesh_RULE20 BY VIA3_c_mesh_RULE20
CONNECT M4_gate_c_pstp_RULE20 M3_gate_c_pstp_RULE20 BY VIA3_gate_c_pstp_RULE20
CONNECT M4_c_diode_RULE20 M3_c_diode_RULE20 BY VIA3_c_diode_RULE20
NACT_ALL_nact_c_ngate_M4_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M4_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M4_O_RULE20 = NGATE_OD2_M4_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M4_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M4_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M4_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M4_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M4_RULE20 = (NGATE_OD2_M4_O_RULE20 NOT INTERACT NGATE_OD2_M4_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M4_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M4_RULE20_C_NACT_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NGATE_OD2_M4_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NGATE_OD2_M4_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20)]
NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4_C = STAMP NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4 BY NGATE_OD2_M4_RULE20
NACT_C_NGATE_OD2_M4_RULE20_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4_C)]
NACT_C_NGATE_OD2_M4_RULE20_PW_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NGATE_OD2_M4_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M4_RULE20)]
NACT_NGATE_OD2_M4_RULE20_IN_NBL_IN_C_PW_M4 = DFM PROPERTY NACT_C_NGATE_OD2_M4_RULE20_M4 NACT_C_NGATE_OD2_M4_RULE20_PW_M4 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M4_RULE20_M4)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M4_RULE20_PW_M4)] > 0
NACT_NGATE_OD2_M4_RULE20_IN_NBL_IN_C_PW_M4_C = STAMP NACT_NGATE_OD2_M4_RULE20_IN_NBL_IN_C_PW_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
NGATE_OD2_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4= NET AREA RATIO NACT_NGATE_OD2_M4_RULE20_IN_NBL_IN_C_PW_M4_C NGATE_OD2_M4_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M4_RULE20_IN_NBL_IN_C_PW_M4_C)]
NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4 NGATE_OD2_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M4_RULE20_C_NACT_DNWi_M4) - NARAC(NGATE_OD2_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4)]
NGATE_OD2_M4_RULE20_C_NACT_PW_C_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NGATE_OD2_M4_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20)]
NGATE_OD2_M4_RULE20_NACT_CHECK_ALL_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20_C_NACT_M4 NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4 NGATE_OD2_M4_RULE20_C_NACT_PW_C_M4 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M4_RULE20_C_NACT_M4)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M4_RULE20_C_NACT_PW_C_M4) - PROPERTY(NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M4_RULE20_C_NACT_M4) - NARAC(NGATE_OD2_M4_RULE20_C_NACT_PW_C_M4) - PROPERTY(NGATE_OD2_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_2)]
NGATE_OD2_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20_NACT_CHECK_ALL_M4
       [ -= PROPERTY(NGATE_OD2_M4_RULE20_NACT_CHECK_ALL_M4,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M4_RULE20_NACT_CHECK_ALL_M4,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M4_RULE20 
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_M4 = NET AREA RATIO NGATE_OD2_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M4_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4 = NET AREA RATIO NGATE_OD2_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M4_RULE20)]
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_M4 = NET AREA RATIO NGATE_OD2_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4_C)]
NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_PW_M4 = NET AREA RATIO NGATE_OD2_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20)]
NGATE_OD2_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_M4 NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_PW_M4 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_M4)] > 0
       [-= COUNT(NGATE_OD2_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_PW_M4)] > 0
NGATE_OD2_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M4_C = STAMP NGATE_OD2_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M4 BY NGATE_OD2_M4_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_IN_DNWi_C_PW_M4= NET AREA RATIO NGATE_OD2_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M4_C NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M4_C)]
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_IN_DNWi_C_PW_M4 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_IN_DNWi_C_PW_M4)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_DNWi_M4) - NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_IN_DNWi_C_PW_M4)]
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_PW_C_M4 = NET AREA RATIO NGATE_OD2_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M4_RULE20)]
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_ALL_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_M4 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_PW_C_M4 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M4_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_M4)]
       [NGATE_OD2_M4_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4, SD_COUNT_1)]
       [NGATE_OD2_M4_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4, SD_COUNT_2)]
       [NGATE_OD2_M4_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_PW_C_M4) - PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4, SD_COUNT_1)]
       [NGATE_OD2_M4_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_M4) - NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_PW_C_M4) - PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_C_NGATE_OD2_M4_RULE20_CHECK_M4, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_ALL_M4
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_ALL_M4,NGATE_OD2_M4_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_ALL_M4,NGATE_OD2_M4_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NGATE_OD2_M4_RULE20_NACT_CHECK_M4 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M4_RULE20_NACT_CHECK_M4) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 = DFM PROPERTY STP_C_mesh_RULE20 M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M4 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M4 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M4 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M4 = M4_C_mesh_RULE20 AND VIA4_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 = DFM PROPERTY STP_C_mesh_RULE20 VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M4, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20 NGATE_OD2_M4_RULE20_NACT_CHECK_M4 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M4_RULE20_NACT_CHECK_M4)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M4_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre1 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre, 1)]
RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre = RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 AND RW_B2Bconn_300_M4 
RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre = RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre = RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_OD2_M4_RULE20 NGATE_OD2_M4_RULE20_NACT_CHECK_M4 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M4_RULE20_NACT_CHECK_M4)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M4_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre1 BY NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4 NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M4, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_pre, 1)]
RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre = RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 AND RW_B2Bconn_300_M4 
RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre = RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre = RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)]
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA4_1
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA4_2
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA4_1
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA4_2
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA4_1
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA4_2
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA4_1
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA4_2
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA4_1
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA4_2
DNW.R.20.3.1_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.1_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.2_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.2_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.3_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.3_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.4_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.4_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.5_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.3.5_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA4_1
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA4_2
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA4_1
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA4_2
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA4_1
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA4_2
DNW.R.20.6.1_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.6.1_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.6.2_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.6.2_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.6.3_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.6.3_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M4_1
DNW.R.20.1.1:NGATE_OD2_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M4_1
DNW.R.20.1.2:NGATE_OD2_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M4_1
DNW.R.20.1.3:NGATE_OD2_M4_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M4_1
DNW.R.20.1.4:NGATE_OD2_M4_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M4_1
DNW.R.20.1.5:NGATE_OD2_M4_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M4_2
DNW.R.20.1.1:NGATE_OD2_M4_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M4_2
DNW.R.20.1.2:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M4_2
DNW.R.20.1.3:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M4_2
DNW.R.20.1.4:NGATE_OD2_M4_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M4_2
DNW.R.20.1.5:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M4_1
DNW.R.20.5.1:NGATE_OD2_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M4_1
DNW.R.20.5.2:NGATE_OD2_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M4_1
DNW.R.20.5.3:NGATE_OD2_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M4_2
DNW.R.20.5.1:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M4_2
DNW.R.20.5.2:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M4_2
DNW.R.20.5.3:NGATE_OD2_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_OD2_RULE20_NGATE_OD2_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M4_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M4_O_RULE20 = NGATE_Core_M4_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M4_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M4_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M4_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M4_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M4_RULE20 = (NGATE_Core_M4_O_RULE20 NOT INTERACT NGATE_Core_M4_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M4_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M4_RULE20_C_NACT_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NGATE_Core_M4_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M4_RULE20_C_NACT_DNWi_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NGATE_Core_M4_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20)]
NGATE_Core_M4_RULE20_C_NACT_DNWi_M4_C = STAMP NGATE_Core_M4_RULE20_C_NACT_DNWi_M4 BY NGATE_Core_M4_RULE20
NACT_C_NGATE_Core_M4_RULE20_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NGATE_Core_M4_RULE20_C_NACT_DNWi_M4_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M4_RULE20_C_NACT_DNWi_M4_C)]
NACT_C_NGATE_Core_M4_RULE20_PW_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NGATE_Core_M4_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M4_RULE20)]
NACT_NGATE_Core_M4_RULE20_IN_NBL_IN_C_PW_M4 = DFM PROPERTY NACT_C_NGATE_Core_M4_RULE20_M4 NACT_C_NGATE_Core_M4_RULE20_PW_M4 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M4_RULE20_M4)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M4_RULE20_PW_M4)] > 0
NACT_NGATE_Core_M4_RULE20_IN_NBL_IN_C_PW_M4_C = STAMP NACT_NGATE_Core_M4_RULE20_IN_NBL_IN_C_PW_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
NGATE_Core_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4= NET AREA RATIO NACT_NGATE_Core_M4_RULE20_IN_NBL_IN_C_PW_M4_C NGATE_Core_M4_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M4_RULE20_IN_NBL_IN_C_PW_M4_C)]
NGATE_Core_M4_RULE20_C_NACT_CHECK_M4 = DFM PROPERTY NGATE_Core_M4_RULE20_C_NACT_DNWi_M4 NGATE_Core_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M4_RULE20_C_NACT_DNWi_M4)]
       [SD_COUNT_1= NARAC(NGATE_Core_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4)]
       [SD_COUNT_2= NARAC(NGATE_Core_M4_RULE20_C_NACT_DNWi_M4) - NARAC(NGATE_Core_M4_RULE20_C_NACT_IN_DNWi_C_PW_M4)]
NGATE_Core_M4_RULE20_C_NACT_PW_C_M4 = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NGATE_Core_M4_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20)]
NGATE_Core_M4_RULE20_NACT_CHECK_ALL_M4 = DFM PROPERTY NGATE_Core_M4_RULE20_C_NACT_M4 NGATE_Core_M4_RULE20_C_NACT_CHECK_M4 NGATE_Core_M4_RULE20_C_NACT_PW_C_M4 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M4_RULE20_C_NACT_M4)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M4_RULE20_C_NACT_PW_C_M4) - PROPERTY(NGATE_Core_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M4_RULE20_C_NACT_M4) - NARAC(NGATE_Core_M4_RULE20_C_NACT_PW_C_M4) - PROPERTY(NGATE_Core_M4_RULE20_C_NACT_CHECK_M4, SD_COUNT_2)]
NGATE_Core_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_Core_M4_RULE20_NACT_CHECK_ALL_M4
       [ -= PROPERTY(NGATE_Core_M4_RULE20_NACT_CHECK_ALL_M4,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M4_RULE20_NACT_CHECK_ALL_M4,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M4_RULE20 
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_M4 = NET AREA RATIO NGATE_Core_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M4_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4 = NET AREA RATIO NGATE_Core_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M4_RULE20)]
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_M4 = NET AREA RATIO NGATE_Core_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4_C)]
NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_PW_M4 = NET AREA RATIO NGATE_Core_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20)]
NGATE_Core_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M4 = DFM PROPERTY NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_M4 NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_PW_M4 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_M4)] > 0
       [-= COUNT(NGATE_Core_M4_RULE20_C_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_PW_M4)] > 0
NGATE_Core_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M4_C = STAMP NGATE_Core_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M4 BY NGATE_Core_M4_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_IN_DNWi_C_PW_M4= NET AREA RATIO NGATE_Core_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M4_C NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M4_RULE20_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M4_C)]
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_IN_DNWi_C_PW_M4 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_IN_DNWi_C_PW_M4)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_DNWi_M4) - NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_IN_DNWi_C_PW_M4)]
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_PW_C_M4 = NET AREA RATIO NGATE_Core_M4_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M4_RULE20)]
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_ALL_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_M4 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_PW_C_M4 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M4_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_M4)]
       [NGATE_Core_M4_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4, SD_COUNT_1)]
       [NGATE_Core_M4_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4, SD_COUNT_2)]
       [NGATE_Core_M4_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_PW_C_M4) - PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4, SD_COUNT_1)]
       [NGATE_Core_M4_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_M4) - NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_PW_C_M4) - PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_C_NGATE_Core_M4_RULE20_CHECK_M4, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_ALL_M4
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_ALL_M4,NGATE_Core_M4_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_ALL_M4,NGATE_Core_M4_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NGATE_Core_M4_RULE20_NACT_CHECK_M4 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M4_RULE20_NACT_CHECK_M4) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M4_RULE20_NACT_CHECK_M4)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M4
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 = DFM PROPERTY STP_C_mesh_RULE20 M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M4)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_Core_M4 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_Core_M4 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_Core_M4 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
VIA4_C_VIA_mesh_RULE20_NGATE_Core_M4 = M4_C_mesh_RULE20 AND VIA4_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M4
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_Core_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_Core_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_Core_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE20_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE20_NGATE_Core_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 = DFM PROPERTY STP_C_mesh_RULE20 VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M4)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M4, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_Core_M4_RULE20 NGATE_Core_M4_RULE20_NACT_CHECK_M4 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M4_RULE20_NACT_CHECK_M4)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M4_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre1 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre, 1)]
RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre = RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 AND RW_B2Bconn_300_M4 
RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre = RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre = RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 = DFM PROPERTY NGATE_Core_M4_RULE20 NGATE_Core_M4_RULE20_NACT_CHECK_M4 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M4_RULE20_NACT_CHECK_M4)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M4_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_C = STAMP NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre1 BY NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4 NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M4, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_pre, 1)]
RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre = RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 AND RW_B2Bconn_300_M4 
RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre = RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre = RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NOT RW_B2Bconn_300_M4 
RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)]
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA4_1
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA4_2
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA4_1
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA4_2
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA4_1
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA4_2
DNW.R.20.4.1_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.4.1_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.4.2_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.4.2_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
DNW.R.20.4.3_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
DNW.R.20.4.3_VIA4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M4_1
DNW.R.20.2.1:NGATE_Core_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M4_1
DNW.R.20.2.2:NGATE_Core_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M4_1
DNW.R.20.2.3:NGATE_Core_M4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M4_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_NOT_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M4_2
DNW.R.20.2.1:NGATE_Core_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M4_2
DNW.R.20.2.2:NGATE_Core_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M4_2
DNW.R.20.2.3:NGATE_Core_M4_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M4_NGATE_Core_RULE20_NGATE_Core_M4_RULE20_CHECK_M4_NOT_B2B_M4, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M4_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M4_RULE20_NACT_CHECK_M4_AND_B2B_M4 INTERACT RESULT
}
CONNECT M5_nact_c_ngate_RULE20 M4_nact_c_ngate_RULE20 BY VIA4_nact_c_ngate_RULE20
CONNECT M5_pw_c_RULE20 M4_pw_c_RULE20 BY VIA4_pw_c_RULE20
CONNECT M5_c_mesh_RULE20 M4_c_mesh_RULE20 BY VIA4_c_mesh_RULE20
CONNECT M5_gate_c_pstp_RULE20 M4_gate_c_pstp_RULE20 BY VIA4_gate_c_pstp_RULE20
CONNECT M5_c_diode_RULE20 M4_c_diode_RULE20 BY VIA4_c_diode_RULE20
NACT_ALL_nact_c_ngate_M5_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M5_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M5_O_RULE20 = NGATE_OD2_M5_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M5_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M5_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M5_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M5_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M5_RULE20 = (NGATE_OD2_M5_O_RULE20 NOT INTERACT NGATE_OD2_M5_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M5_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M5_RULE20_C_NACT_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NGATE_OD2_M5_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NGATE_OD2_M5_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20)]
NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5_C = STAMP NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5 BY NGATE_OD2_M5_RULE20
NACT_C_NGATE_OD2_M5_RULE20_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5_C)]
NACT_C_NGATE_OD2_M5_RULE20_PW_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NGATE_OD2_M5_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M5_RULE20)]
NACT_NGATE_OD2_M5_RULE20_IN_NBL_IN_C_PW_M5 = DFM PROPERTY NACT_C_NGATE_OD2_M5_RULE20_M5 NACT_C_NGATE_OD2_M5_RULE20_PW_M5 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M5_RULE20_M5)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M5_RULE20_PW_M5)] > 0
NACT_NGATE_OD2_M5_RULE20_IN_NBL_IN_C_PW_M5_C = STAMP NACT_NGATE_OD2_M5_RULE20_IN_NBL_IN_C_PW_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
NGATE_OD2_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5= NET AREA RATIO NACT_NGATE_OD2_M5_RULE20_IN_NBL_IN_C_PW_M5_C NGATE_OD2_M5_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M5_RULE20_IN_NBL_IN_C_PW_M5_C)]
NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5 NGATE_OD2_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M5_RULE20_C_NACT_DNWi_M5) - NARAC(NGATE_OD2_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5)]
NGATE_OD2_M5_RULE20_C_NACT_PW_C_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NGATE_OD2_M5_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20)]
NGATE_OD2_M5_RULE20_NACT_CHECK_ALL_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20_C_NACT_M5 NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5 NGATE_OD2_M5_RULE20_C_NACT_PW_C_M5 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M5_RULE20_C_NACT_M5)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M5_RULE20_C_NACT_PW_C_M5) - PROPERTY(NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M5_RULE20_C_NACT_M5) - NARAC(NGATE_OD2_M5_RULE20_C_NACT_PW_C_M5) - PROPERTY(NGATE_OD2_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_2)]
NGATE_OD2_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20_NACT_CHECK_ALL_M5
       [ -= PROPERTY(NGATE_OD2_M5_RULE20_NACT_CHECK_ALL_M5,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M5_RULE20_NACT_CHECK_ALL_M5,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M5_RULE20 
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_M5 = NET AREA RATIO NGATE_OD2_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M5_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5 = NET AREA RATIO NGATE_OD2_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M5_RULE20)]
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_M5 = NET AREA RATIO NGATE_OD2_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5_C)]
NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_PW_M5 = NET AREA RATIO NGATE_OD2_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20)]
NGATE_OD2_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_M5 NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_PW_M5 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_M5)] > 0
       [-= COUNT(NGATE_OD2_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_PW_M5)] > 0
NGATE_OD2_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M5_C = STAMP NGATE_OD2_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M5 BY NGATE_OD2_M5_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_IN_DNWi_C_PW_M5= NET AREA RATIO NGATE_OD2_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M5_C NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M5_C)]
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_IN_DNWi_C_PW_M5 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_IN_DNWi_C_PW_M5)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_DNWi_M5) - NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_IN_DNWi_C_PW_M5)]
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_PW_C_M5 = NET AREA RATIO NGATE_OD2_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M5_RULE20)]
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_ALL_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_M5 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_PW_C_M5 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M5_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_M5)]
       [NGATE_OD2_M5_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5, SD_COUNT_1)]
       [NGATE_OD2_M5_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5, SD_COUNT_2)]
       [NGATE_OD2_M5_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_PW_C_M5) - PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5, SD_COUNT_1)]
       [NGATE_OD2_M5_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_M5) - NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_PW_C_M5) - PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_C_NGATE_OD2_M5_RULE20_CHECK_M5, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_ALL_M5
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_ALL_M5,NGATE_OD2_M5_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_ALL_M5,NGATE_OD2_M5_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NGATE_OD2_M5_RULE20_NACT_CHECK_M5 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M5_RULE20_NACT_CHECK_M5) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO M5_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE20)]
M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 = DFM PROPERTY STP_C_mesh_RULE20 M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M5 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M5 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M5 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M5 = M4_C_mesh_RULE20 AND VIA4_C_mesh_RULE20
VIA5_C_VIA_mesh_RULE20_NGATE_OD2_M5 = M5_C_mesh_RULE20 AND VIA5_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE20_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 = DFM PROPERTY STP_C_mesh_RULE20 VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_OD2_M5, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20 NGATE_OD2_M5_RULE20_NACT_CHECK_M5 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M5_RULE20_NACT_CHECK_M5)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M5_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre1 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre, 1)]
RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre = RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 AND RW_B2Bconn_300_M5 
RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre = RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre = RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_OD2_M5_RULE20 NGATE_OD2_M5_RULE20_NACT_CHECK_M5 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M5_RULE20_NACT_CHECK_M5)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M5_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre1 BY NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5 NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M5, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_pre, 1)]
RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre = RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 AND RW_B2Bconn_300_M5 
RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre = RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre = RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)]
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA5_1
//DNW.R.20.3.1 is checked by DNW.R.20.3.1_VIA5_2
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA5_1
//DNW.R.20.3.2 is checked by DNW.R.20.3.2_VIA5_2
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA5_1
//DNW.R.20.3.3 is checked by DNW.R.20.3.3_VIA5_2
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA5_1
//DNW.R.20.3.4 is checked by DNW.R.20.3.4_VIA5_2
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA5_1
//DNW.R.20.3.5 is checked by DNW.R.20.3.5_VIA5_2
DNW.R.20.3.1_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.1_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_1_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_1_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_1]  >= 0
    DFM RDB RESULT DNW.R.20.3.1_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.2_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.2_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA < ^DNW_R_20_3_2_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_2_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_2_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_2]  >= 0
    DFM RDB RESULT DNW.R.20.3.2_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.3_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.3_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA >= ^DNW_R_20_3_3_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_3]  >= 0
    DFM RDB RESULT DNW.R.20.3.3_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.4_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.4_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_4_RC2
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA > ^DNW_R_20_3_4_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_4
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_4_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_4]  >= 0
    DFM RDB RESULT DNW.R.20.3.4_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.5_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.3.5_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_VIA/RC_N+ACTIVE_VIA <= ^DNW_R_20_3_5_RC1
                        @ Maximum(VIA mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, VIA mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_3_5
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) - DNW_R_20_3_5_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_VIA),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_3_5]  >= 0
    DFM RDB RESULT DNW.R.20.3.5_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA5_1
//DNW.R.20.6.1 is checked by DNW.R.20.6.1_VIA5_2
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA5_1
//DNW.R.20.6.2 is checked by DNW.R.20.6.2_VIA5_2
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA5_1
//DNW.R.20.6.3 is checked by DNW.R.20.6.3_VIA5_2
DNW.R.20.6.1_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.6.1_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.1_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.6.2_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.6.2_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_6_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_6_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.6.2_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.6.3_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.6.3_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_6_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_6_3]  >= 0
    DFM RDB RESULT DNW.R.20.6.3_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M5_1
DNW.R.20.1.1:NGATE_OD2_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M5_1
DNW.R.20.1.2:NGATE_OD2_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M5_1
DNW.R.20.1.3:NGATE_OD2_M5_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M5_1
DNW.R.20.1.4:NGATE_OD2_M5_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M5_1
DNW.R.20.1.5:NGATE_OD2_M5_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M5_2
DNW.R.20.1.1:NGATE_OD2_M5_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M5_2
DNW.R.20.1.2:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M5_2
DNW.R.20.1.3:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M5_2
DNW.R.20.1.4:NGATE_OD2_M5_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M5_2
DNW.R.20.1.5:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M5_1
DNW.R.20.5.1:NGATE_OD2_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M5_1
DNW.R.20.5.2:NGATE_OD2_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M5_1
DNW.R.20.5.3:NGATE_OD2_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M5_2
DNW.R.20.5.1:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M5_2
DNW.R.20.5.2:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M5_2
DNW.R.20.5.3:NGATE_OD2_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_OD2_RULE20_NGATE_OD2_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M5_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M5_O_RULE20 = NGATE_Core_M5_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M5_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M5_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M5_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M5_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M5_RULE20 = (NGATE_Core_M5_O_RULE20 NOT INTERACT NGATE_Core_M5_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M5_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M5_RULE20_C_NACT_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NGATE_Core_M5_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M5_RULE20_C_NACT_DNWi_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NGATE_Core_M5_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20)]
NGATE_Core_M5_RULE20_C_NACT_DNWi_M5_C = STAMP NGATE_Core_M5_RULE20_C_NACT_DNWi_M5 BY NGATE_Core_M5_RULE20
NACT_C_NGATE_Core_M5_RULE20_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NGATE_Core_M5_RULE20_C_NACT_DNWi_M5_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M5_RULE20_C_NACT_DNWi_M5_C)]
NACT_C_NGATE_Core_M5_RULE20_PW_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NGATE_Core_M5_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M5_RULE20)]
NACT_NGATE_Core_M5_RULE20_IN_NBL_IN_C_PW_M5 = DFM PROPERTY NACT_C_NGATE_Core_M5_RULE20_M5 NACT_C_NGATE_Core_M5_RULE20_PW_M5 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M5_RULE20_M5)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M5_RULE20_PW_M5)] > 0
NACT_NGATE_Core_M5_RULE20_IN_NBL_IN_C_PW_M5_C = STAMP NACT_NGATE_Core_M5_RULE20_IN_NBL_IN_C_PW_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
NGATE_Core_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5= NET AREA RATIO NACT_NGATE_Core_M5_RULE20_IN_NBL_IN_C_PW_M5_C NGATE_Core_M5_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M5_RULE20_IN_NBL_IN_C_PW_M5_C)]
NGATE_Core_M5_RULE20_C_NACT_CHECK_M5 = DFM PROPERTY NGATE_Core_M5_RULE20_C_NACT_DNWi_M5 NGATE_Core_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M5_RULE20_C_NACT_DNWi_M5)]
       [SD_COUNT_1= NARAC(NGATE_Core_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5)]
       [SD_COUNT_2= NARAC(NGATE_Core_M5_RULE20_C_NACT_DNWi_M5) - NARAC(NGATE_Core_M5_RULE20_C_NACT_IN_DNWi_C_PW_M5)]
NGATE_Core_M5_RULE20_C_NACT_PW_C_M5 = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NGATE_Core_M5_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20)]
NGATE_Core_M5_RULE20_NACT_CHECK_ALL_M5 = DFM PROPERTY NGATE_Core_M5_RULE20_C_NACT_M5 NGATE_Core_M5_RULE20_C_NACT_CHECK_M5 NGATE_Core_M5_RULE20_C_NACT_PW_C_M5 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M5_RULE20_C_NACT_M5)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M5_RULE20_C_NACT_PW_C_M5) - PROPERTY(NGATE_Core_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M5_RULE20_C_NACT_M5) - NARAC(NGATE_Core_M5_RULE20_C_NACT_PW_C_M5) - PROPERTY(NGATE_Core_M5_RULE20_C_NACT_CHECK_M5, SD_COUNT_2)]
NGATE_Core_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_Core_M5_RULE20_NACT_CHECK_ALL_M5
       [ -= PROPERTY(NGATE_Core_M5_RULE20_NACT_CHECK_ALL_M5,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M5_RULE20_NACT_CHECK_ALL_M5,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M5_RULE20 
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_M5 = NET AREA RATIO NGATE_Core_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M5_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5 = NET AREA RATIO NGATE_Core_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M5_RULE20)]
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_M5 = NET AREA RATIO NGATE_Core_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5_C)]
NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_PW_M5 = NET AREA RATIO NGATE_Core_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20)]
NGATE_Core_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M5 = DFM PROPERTY NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_M5 NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_PW_M5 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_M5)] > 0
       [-= COUNT(NGATE_Core_M5_RULE20_C_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_PW_M5)] > 0
NGATE_Core_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M5_C = STAMP NGATE_Core_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M5 BY NGATE_Core_M5_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_IN_DNWi_C_PW_M5= NET AREA RATIO NGATE_Core_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M5_C NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M5_RULE20_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M5_C)]
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_IN_DNWi_C_PW_M5 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_IN_DNWi_C_PW_M5)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_DNWi_M5) - NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_IN_DNWi_C_PW_M5)]
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_PW_C_M5 = NET AREA RATIO NGATE_Core_M5_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M5_RULE20)]
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_ALL_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_M5 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_PW_C_M5 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M5_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_M5)]
       [NGATE_Core_M5_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5, SD_COUNT_1)]
       [NGATE_Core_M5_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5, SD_COUNT_2)]
       [NGATE_Core_M5_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_PW_C_M5) - PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5, SD_COUNT_1)]
       [NGATE_Core_M5_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_M5) - NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_PW_C_M5) - PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_C_NGATE_Core_M5_RULE20_CHECK_M5, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_ALL_M5
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_ALL_M5,NGATE_Core_M5_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_ALL_M5,NGATE_Core_M5_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NGATE_Core_M5_RULE20_NACT_CHECK_M5 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M5_RULE20_NACT_CHECK_M5) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M5_RULE20_NACT_CHECK_M5)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M5
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO M5_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE20)]
M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 = DFM PROPERTY STP_C_mesh_RULE20 M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M5)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE20_NGATE_Core_M5 = M1_C_mesh_RULE20 AND VIA1_C_mesh_RULE20
VIA2_C_VIA_mesh_RULE20_NGATE_Core_M5 = M2_C_mesh_RULE20 AND VIA2_C_mesh_RULE20
VIA3_C_VIA_mesh_RULE20_NGATE_Core_M5 = M3_C_mesh_RULE20 AND VIA3_C_mesh_RULE20
VIA4_C_VIA_mesh_RULE20_NGATE_Core_M5 = M4_C_mesh_RULE20 AND VIA4_C_mesh_RULE20
VIA5_C_VIA_mesh_RULE20_NGATE_Core_M5 = M5_C_mesh_RULE20 AND VIA5_C_mesh_RULE20
STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M5
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE20_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE20_NGATE_Core_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE20_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE20_NGATE_Core_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE20_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE20_NGATE_Core_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE20_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE20_NGATE_Core_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE20_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE20_NGATE_Core_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 = DFM PROPERTY STP_C_mesh_RULE20 VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M5)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE20_NGATE_Core_M5, VIA_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_Core_M5_RULE20 NGATE_Core_M5_RULE20_NACT_CHECK_M5 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M5_RULE20_NACT_CHECK_M5)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, DNWi_AREA)] > 0
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, VIA_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M5_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_C)]
//Record the PW NETID/(VIA_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 )] > 0
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre = STAMP RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre1 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 PW_ALL_pw_c_RULE20 RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, VIA_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_VIA_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre, 1)]
RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre = RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 AND RW_B2Bconn_300_M5 
RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre = RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ VIA_AREA_GATE = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , VIA_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre = RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)]
            [ VIA_AREA_NACT = PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , VIA_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 = DFM PROPERTY NGATE_Core_M5_RULE20 NGATE_Core_M5_RULE20_NACT_CHECK_M5 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M5_RULE20_NACT_CHECK_M5)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M5_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_C = STAMP NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre1 BY NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5 NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M5, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_pre, 1)]
RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre = RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 AND RW_B2Bconn_300_M5 
RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre = RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre = RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NOT RW_B2Bconn_300_M5 
RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)]
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA5_1
//DNW.R.20.4.1 is checked by DNW.R.20.4.1_VIA5_2
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA5_1
//DNW.R.20.4.2 is checked by DNW.R.20.4.2_VIA5_2
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA5_1
//DNW.R.20.4.3 is checked by DNW.R.20.4.3_VIA5_2
DNW.R.20.4.1_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.4.1_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_1_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_1
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.1_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.4.2_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.4.2_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_2_DNW1
                        @  VIA mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_4_2
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_VIA)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_4_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.4.2_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
DNW.R.20.4.3_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
DNW.R.20.4.3_VIA5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_4_3
    TARGET_INFO = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_VIA_TOTAL = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_VIA_WAIVE = VNETSUM(NETPROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_VIA_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, VIA_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_VIA = PROPERTY(RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, VIA_AREA_GATE)]
    RESULT = DFM PROPERTY RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_VIA = PROPERTY(TARGET_INFO, NACT_VIA_TOTAL) - PROPERTY(TARGET_INFO, NACT_VIA_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_VIA = PROPERTY(TARGET_INFO, GATE_VIA)]
            [ -= PROPERTY(TARGET_INFO, GATE_VIA)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_VIA)]
            [ RC_ACT = (PROPERTY_REF(NACT_VIA) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_VIA_TOTAL)-PROPERTY(TARGET_INFO, NACT_VIA_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_4_3]  >= 0
    DFM RDB RESULT DNW.R.20.4.3_VIA5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_VIA_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M5_1
DNW.R.20.2.1:NGATE_Core_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M5_1
DNW.R.20.2.2:NGATE_Core_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M5_1
DNW.R.20.2.3:NGATE_Core_M5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M5_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_NOT_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M5_2
DNW.R.20.2.1:NGATE_Core_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M5_2
DNW.R.20.2.2:NGATE_Core_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M5_2
DNW.R.20.2.3:NGATE_Core_M5_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M5_NGATE_Core_RULE20_NGATE_Core_M5_RULE20_CHECK_M5_NOT_B2B_M5, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M5_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M5_RULE20_NACT_CHECK_M5_AND_B2B_M5 INTERACT RESULT
}
CONNECT M6_nact_c_ngate_RULE20 CTM_nact_c_ngate_RULE20 CMM_nact_c_ngate_RULE20 M5_nact_c_ngate_RULE20 BY VIA5_nact_c_ngate_RULE20
CONNECT M6_pw_c_RULE20 CTM_pw_c_RULE20 CMM_pw_c_RULE20 M5_pw_c_RULE20 BY VIA5_pw_c_RULE20
CONNECT M6_c_mesh_RULE20 CTM_c_mesh_RULE20 CMM_c_mesh_RULE20 M5_c_mesh_RULE20 BY VIA5_c_mesh_RULE20
CONNECT M6_gate_c_pstp_RULE20 CTM_gate_c_pstp_RULE20 CMM_gate_c_pstp_RULE20 M5_gate_c_pstp_RULE20 BY VIA5_gate_c_pstp_RULE20
CONNECT M6_c_diode_RULE20 CTM_c_diode_RULE20 CMM_c_diode_RULE20 M5_c_diode_RULE20 BY VIA5_c_diode_RULE20
NACT_ALL_nact_c_ngate_M6_RULE20_pre = NACT_ALL_nact_c_ngate_RULE20 AND DNWi
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_RULE20_pre NGATE_OD2_nact_c_ngate_RULE20 > 0
NGATE_OD2_M6_O_RULE20_pre = NET AREA RATIO NGATE_OD2_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_OD2_M6_O_RULE20 = NGATE_OD2_M6_O_RULE20_pre AND DNWi
NGATE_OD2_C_diode_M6_RULE20 = NGATE_OD2_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_OD2_M6_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_OD2_M6_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_OD2_C_diode_M6_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_OD2_M6_RULE20 = (NGATE_OD2_M6_O_RULE20 NOT INTERACT NGATE_OD2_M6_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_OD2_M6_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_OD2_M6_RULE20_C_NACT_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NGATE_OD2_M6_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20)]
//select check object inside same NBL
NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NGATE_OD2_M6_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20)]
NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6_C = STAMP NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6 BY NGATE_OD2_M6_RULE20
NACT_C_NGATE_OD2_M6_RULE20_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6_C)]
NACT_C_NGATE_OD2_M6_RULE20_PW_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NGATE_OD2_M6_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_OD2_M6_RULE20)]
NACT_NGATE_OD2_M6_RULE20_IN_NBL_IN_C_PW_M6 = DFM PROPERTY NACT_C_NGATE_OD2_M6_RULE20_M6 NACT_C_NGATE_OD2_M6_RULE20_PW_M6 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_OD2_M6_RULE20_M6)] > 0
       [-= COUNT(NACT_C_NGATE_OD2_M6_RULE20_PW_M6)] > 0
NACT_NGATE_OD2_M6_RULE20_IN_NBL_IN_C_PW_M6_C = STAMP NACT_NGATE_OD2_M6_RULE20_IN_NBL_IN_C_PW_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20
NGATE_OD2_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6= NET AREA RATIO NACT_NGATE_OD2_M6_RULE20_IN_NBL_IN_C_PW_M6_C NGATE_OD2_M6_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_OD2_M6_RULE20_IN_NBL_IN_C_PW_M6_C)]
NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6 = DFM PROPERTY NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6 NGATE_OD2_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6)]
       [SD_COUNT_1= NARAC(NGATE_OD2_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6)]
       [SD_COUNT_2= NARAC(NGATE_OD2_M6_RULE20_C_NACT_DNWi_M6) - NARAC(NGATE_OD2_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6)]
NGATE_OD2_M6_RULE20_C_NACT_PW_C_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NGATE_OD2_M6_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20)]
NGATE_OD2_M6_RULE20_NACT_CHECK_ALL_M6 = DFM PROPERTY NGATE_OD2_M6_RULE20_C_NACT_M6 NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6 NGATE_OD2_M6_RULE20_C_NACT_PW_C_M6 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_OD2_M6_RULE20_C_NACT_M6)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_OD2_M6_RULE20_C_NACT_PW_C_M6) - PROPERTY(NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_OD2_M6_RULE20_C_NACT_M6) - NARAC(NGATE_OD2_M6_RULE20_C_NACT_PW_C_M6) - PROPERTY(NGATE_OD2_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_2)]
NGATE_OD2_M6_RULE20_NACT_CHECK_M6 = DFM PROPERTY NGATE_OD2_M6_RULE20_NACT_CHECK_ALL_M6
       [ -= PROPERTY(NGATE_OD2_M6_RULE20_NACT_CHECK_ALL_M6,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_OD2_M6_RULE20_NACT_CHECK_ALL_M6,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_OD2_M6_RULE20 
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_M6 = NET AREA RATIO NGATE_OD2_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_OD2_M6_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6 = NET AREA RATIO NGATE_OD2_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M6_RULE20)]
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6_C = STAMP NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20
NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_M6 = NET AREA RATIO NGATE_OD2_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6_C)]
NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_PW_M6 = NET AREA RATIO NGATE_OD2_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20)]
NGATE_OD2_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M6 = DFM PROPERTY NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_M6 NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_PW_M6 OVERLAP MULTI
       [-= COUNT(NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_M6)] > 0
       [-= COUNT(NGATE_OD2_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_PW_M6)] > 0
NGATE_OD2_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M6_C = STAMP NGATE_OD2_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M6 BY NGATE_OD2_M6_RULE20
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_IN_DNWi_C_PW_M6= NET AREA RATIO NGATE_OD2_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M6_C NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_OD2_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_IN_NBL_IN_C_PW_M6_C)]
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_IN_DNWi_C_PW_M6 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_IN_DNWi_C_PW_M6)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_DNWi_M6) - NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_IN_DNWi_C_PW_M6)]
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_PW_C_M6 = NET AREA RATIO NGATE_OD2_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_OD2_M6_RULE20)]
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_ALL_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_M6 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_PW_C_M6 OVERLAP ABUT ALSO MULTI
       [NGATE_OD2_M6_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_M6)]
       [NGATE_OD2_M6_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6, SD_COUNT_1)]
       [NGATE_OD2_M6_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6, SD_COUNT_2)]
       [NGATE_OD2_M6_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_PW_C_M6) - PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6, SD_COUNT_1)]
       [NGATE_OD2_M6_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_M6) - NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_PW_C_M6) - PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_C_NGATE_OD2_M6_RULE20_CHECK_M6, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_ALL_M6
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_ALL_M6,NGATE_OD2_M6_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_ALL_M6,NGATE_OD2_M6_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NGATE_OD2_M6_RULE20_NACT_CHECK_M6 OVERLAP MULTI
            [ -= (AREA(NGATE_OD2_M6_RULE20_NACT_CHECK_M6) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)>0) ? 1 : 0)] > 0
            [ -= AREA(DNWi)] > DNW_R_20_1_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M5_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE20)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO M6_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE20)]
M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 = DFM PROPERTY STP_C_mesh_RULE20 M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_OD2_M6, METAL_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 = DFM PROPERTY NGATE_OD2_M6_RULE20 NGATE_OD2_M6_RULE20_NACT_CHECK_M6 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 OVERLAP MULTI
            [ -= COUNT(NGATE_OD2_M6_RULE20_NACT_CHECK_M6)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_OD2_M6_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_C = STAMP NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20
NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_pre1 BY NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_pre NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6 NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_OD2_M6, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_pre, 1)]
RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre = RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 AND RW_B2Bconn_300_M6 
RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , NGATE_NETID)]
RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre = RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 NOT RW_B2Bconn_300_M6 
RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre = RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NOT RW_B2Bconn_300_M6 
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)]
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M6_1
DNW.R.20.1.1:NGATE_OD2_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M6_1
DNW.R.20.1.2:NGATE_OD2_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M6_1
DNW.R.20.1.3:NGATE_OD2_M6_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M6_1
DNW.R.20.1.4:NGATE_OD2_M6_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M6_1
DNW.R.20.1.5:NGATE_OD2_M6_1 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.1 is checked by DNW.R.20.1.1:NGATE_OD2_M6_2
DNW.R.20.1.1:NGATE_OD2_M6_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_1_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_1_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_1_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_1]  >= 0
    DFM RDB RESULT DNW.R.20.1.1:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.2 is checked by DNW.R.20.1.2:NGATE_OD2_M6_2
DNW.R.20.1.2:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_2_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL > ^DNW_R_20_1_2_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC2]  <= 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_2_RC1]  > 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_2]  >= 0
    DFM RDB RESULT DNW.R.20.1.2:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.3 is checked by DNW.R.20.1.3:NGATE_OD2_M6_2
DNW.R.20.1.3:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL < ^DNW_R_20_1_3_RC2
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_3_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC2]  < 0
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_3_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_3]  >= 0
    DFM RDB RESULT DNW.R.20.1.3:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.4 is checked by DNW.R.20.1.4:NGATE_OD2_M6_2
DNW.R.20.1.4:NGATE_OD2_M6_2 {@ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL <= ^DNW_R_20_1_4_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_4
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_4_RC1]  <= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_4]  >= 0
    DFM RDB RESULT DNW.R.20.1.4:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.1.5 is checked by DNW.R.20.1.5:NGATE_OD2_M6_2
DNW.R.20.1.5:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ RC_NMOS OD2 gates_METAL/RC_N+ACTIVE_METAL >= ^DNW_R_20_1_5_RC1
                        @ Maximum(METAL mesh_NMOS OD2 gate area* target DNWi_NMOS OD2 gates area, METAL mesh_N+ACTIVE area* target DNWi_N+ACTIVE area)/each NMOS OD2 gate[violate guideline] area < ^DNW_R_20_1_5
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0) ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) - DNW_R_20_1_5_RC1]  >= 0
            [ RC_RATIO = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)/((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 )]
            [ MESH_DNWi_MAX = FMAX(PROPERTY(TARGET_INFO, GATE_DNWi)*PROPERTY(TARGET_INFO, GATE_METAL),(PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))*(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)))]
            [ -= PROPERTY_REF(NGATE_AREA)]  > 0
            [ TARGET_RATIO = PROPERTY_REF(MESH_DNWi_MAX)/PROPERTY_REF(NGATE_AREA) - DNW_R_20_1_5]  >= 0
    DFM RDB RESULT DNW.R.20.1.5:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M6_1
DNW.R.20.5.1:NGATE_OD2_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M6_1
DNW.R.20.5.2:NGATE_OD2_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M6_1
DNW.R.20.5.3:NGATE_OD2_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.1 is checked by DNW.R.20.5.1:NGATE_OD2_M6_2
DNW.R.20.5.1:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.1:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.2 is checked by DNW.R.20.5.2:NGATE_OD2_M6_2
DNW.R.20.5.2:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_5_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_5_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.5.2:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.5.3 is checked by DNW.R.20.5.3:NGATE_OD2_M6_2
DNW.R.20.5.3:NGATE_OD2_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_5_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_OD2_RULE20_NGATE_OD2_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_5_3]  >= 0
    DFM RDB RESULT DNW.R.20.5.3:NGATE_OD2_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_OD2_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_RULE20_pre NGATE_Core_nact_c_ngate_RULE20 > 0
NGATE_Core_M6_O_RULE20_pre = NET AREA RATIO NGATE_Core_nact_c_ngate_RULE20 NACT_ALL_nact_c_ngate_RULE20 > 0
NGATE_Core_M6_O_RULE20 = NGATE_Core_M6_O_RULE20_pre AND DNWi
NGATE_Core_C_diode_M6_RULE20 = NGATE_Core_C_diode_RULE20 AND DNWi
// For guideline waive 
// Filter the gate connect to pw strap in same pw 
NGATE_Core_M6_O_RULE20_gate_c_pstp = NET AREA RATIO POLYi_gate_c_pstp_RULE20 PSTP_ALL_gate_c_pstp_RULE20 > 0 INSIDE OF LAYER PW_ALL
// Filter the gate connect to NP_PW [share the same NBL] through metal
NGATE_Core_M6_O_RULE20_C_NDIO_w = NET AREA RATIO NGATE_Core_C_diode_M6_RULE20 NDIO_w_c_diode_RULE20 > 0 INSIDE OF LAYER DNWi
NGATE_Core_M6_RULE20 = (NGATE_Core_M6_O_RULE20 NOT INTERACT NGATE_Core_M6_O_RULE20_gate_c_pstp) NOT INTERACT NGATE_Core_M6_O_RULE20_C_NDIO_w
// select all check object connectted to NACT 
NGATE_Core_M6_RULE20_C_NACT_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NGATE_Core_M6_RULE20 > 0 ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20)]
//select check object inside same NBL
NGATE_Core_M6_RULE20_C_NACT_DNWi_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NGATE_Core_M6_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20)]
NGATE_Core_M6_RULE20_C_NACT_DNWi_M6_C = STAMP NGATE_Core_M6_RULE20_C_NACT_DNWi_M6 BY NGATE_Core_M6_RULE20
NACT_C_NGATE_Core_M6_RULE20_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NGATE_Core_M6_RULE20_C_NACT_DNWi_M6_C > 0 INSIDE OF LAYER DNWi [COUNT(NGATE_Core_M6_RULE20_C_NACT_DNWi_M6_C)]
NACT_C_NGATE_Core_M6_RULE20_PW_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NGATE_Core_M6_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NGATE_Core_M6_RULE20)]
NACT_NGATE_Core_M6_RULE20_IN_NBL_IN_C_PW_M6 = DFM PROPERTY NACT_C_NGATE_Core_M6_RULE20_M6 NACT_C_NGATE_Core_M6_RULE20_PW_M6 OVERLAP MULTI
       [-= COUNT(NACT_C_NGATE_Core_M6_RULE20_M6)] > 0
       [-= COUNT(NACT_C_NGATE_Core_M6_RULE20_PW_M6)] > 0
NACT_NGATE_Core_M6_RULE20_IN_NBL_IN_C_PW_M6_C = STAMP NACT_NGATE_Core_M6_RULE20_IN_NBL_IN_C_PW_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20
NGATE_Core_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6= NET AREA RATIO NACT_NGATE_Core_M6_RULE20_IN_NBL_IN_C_PW_M6_C NGATE_Core_M6_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NACT_NGATE_Core_M6_RULE20_IN_NBL_IN_C_PW_M6_C)]
NGATE_Core_M6_RULE20_C_NACT_CHECK_M6 = DFM PROPERTY NGATE_Core_M6_RULE20_C_NACT_DNWi_M6 NGATE_Core_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_M6_RULE20_C_NACT_DNWi_M6)]
       [SD_COUNT_1= NARAC(NGATE_Core_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6)]
       [SD_COUNT_2= NARAC(NGATE_Core_M6_RULE20_C_NACT_DNWi_M6) - NARAC(NGATE_Core_M6_RULE20_C_NACT_IN_DNWi_C_PW_M6)]
NGATE_Core_M6_RULE20_C_NACT_PW_C_M6 = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NGATE_Core_M6_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20)]
NGATE_Core_M6_RULE20_NACT_CHECK_ALL_M6 = DFM PROPERTY NGATE_Core_M6_RULE20_C_NACT_M6 NGATE_Core_M6_RULE20_C_NACT_CHECK_M6 NGATE_Core_M6_RULE20_C_NACT_PW_C_M6 OVERLAP ABUT ALSO MULTI
       [NACT_COUNT = NARAC(NGATE_Core_M6_RULE20_C_NACT_M6)]
       [NACT_COUNT_SAME_NBL_C_PW = PROPERTY(NGATE_Core_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_1)]
       [NACT_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NGATE_Core_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_2)]
       [NACT_COUNT_Diff_NBL_C_PW = NARAC(NGATE_Core_M6_RULE20_C_NACT_PW_C_M6) - PROPERTY(NGATE_Core_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_1)]
       [NACT_COUNT_Diff_NBL_NOT_C_PW = NARAC(NGATE_Core_M6_RULE20_C_NACT_M6) - NARAC(NGATE_Core_M6_RULE20_C_NACT_PW_C_M6) - PROPERTY(NGATE_Core_M6_RULE20_C_NACT_CHECK_M6, SD_COUNT_2)]
NGATE_Core_M6_RULE20_NACT_CHECK_M6 = DFM PROPERTY NGATE_Core_M6_RULE20_NACT_CHECK_ALL_M6
       [ -= PROPERTY(NGATE_Core_M6_RULE20_NACT_CHECK_ALL_M6,NACT_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NGATE_Core_M6_RULE20_NACT_CHECK_ALL_M6,NACT_COUNT_Diff_NBL_NOT_C_PW) ] != 0
// select all check object connectted to NGATE_Core_M6_RULE20 
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_M6 = NET AREA RATIO NGATE_Core_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 > 0 ACCUMULATE
       [COUNT(NGATE_Core_M6_RULE20)]
//select check object inside same NBL
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6 = NET AREA RATIO NGATE_Core_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M6_RULE20)]
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6_C = STAMP NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20
NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_M6 = NET AREA RATIO NGATE_Core_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6_C > 0 INSIDE OF LAYER DNWi [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6_C)]
NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_PW_M6 = NET AREA RATIO NGATE_Core_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20)]
NGATE_Core_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M6 = DFM PROPERTY NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_M6 NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_PW_M6 OVERLAP MULTI
       [-= COUNT(NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_M6)] > 0
       [-= COUNT(NGATE_Core_M6_RULE20_C_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_PW_M6)] > 0
NGATE_Core_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M6_C = STAMP NGATE_Core_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M6 BY NGATE_Core_M6_RULE20
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_IN_DNWi_C_PW_M6= NET AREA RATIO NGATE_Core_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M6_C NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 > 0 INSIDE OF LAYER DNWi ACCUMULATE
       [COUNT(NGATE_Core_M6_RULE20_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_IN_NBL_IN_C_PW_M6_C)]
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_IN_DNWi_C_PW_M6 OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6)]
       [SD_COUNT_1= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_IN_DNWi_C_PW_M6)]
       [SD_COUNT_2= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_DNWi_M6) - NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_IN_DNWi_C_PW_M6)]
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_PW_C_M6 = NET AREA RATIO NGATE_Core_M6_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE20 BY NET ACCUMULATE
       [COUNT(NGATE_Core_M6_RULE20)]
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_ALL_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_M6 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_PW_C_M6 OVERLAP ABUT ALSO MULTI
       [NGATE_Core_M6_RULE20_COUNT = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_M6)]
       [NGATE_Core_M6_RULE20_COUNT_SAME_NBL_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6, SD_COUNT_1)]
       [NGATE_Core_M6_RULE20_COUNT_SAME_NBL_NOT_C_PW = PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6, SD_COUNT_2)]
       [NGATE_Core_M6_RULE20_COUNT_Diff_NBL_C_PW = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_PW_C_M6) - PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6, SD_COUNT_1)]
       [NGATE_Core_M6_RULE20_COUNT_Diff_NBL_NOT_C_PW = NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_M6) - NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_PW_C_M6) - PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_C_NGATE_Core_M6_RULE20_CHECK_M6, SD_COUNT_2)]
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_ALL_M6
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_ALL_M6,NGATE_Core_M6_RULE20_COUNT_Diff_NBL_C_PW) ] >= 0
       [ -= PROPERTY(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_ALL_M6,NGATE_Core_M6_RULE20_COUNT_Diff_NBL_NOT_C_PW) ] != 0


// Get the Target NBL under target NGATE OR target NACT
DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 = DFM PROPERTY DNWi NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 NGATE_Core_M6_RULE20_NACT_CHECK_M6 OVERLAP MULTI
            [ -= (AREA(NGATE_Core_M6_RULE20_NACT_CHECK_M6) > 0) ? 1 : ((AREA(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6)>0) ? 1 : 0)] > 0
            [ -= AREA(NGATE_Core_M6_RULE20_NACT_CHECK_M6)] < DNW_R_20_2_GATE
            [ -= AREA(DNWi)] > DNW_R_20_2_DNW_MIN
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = STP_C_mesh_RULE20 AND DNWi_TARGET_NACT_NGATE_NGATE_Core_M6
M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M1_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE20)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M2_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE20)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M3_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE20)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M4_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE20)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M5_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE20)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO M6_C_mesh_RULE20 STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE20)]
M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 = DFM PROPERTY STP_C_mesh_RULE20 M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 = DFM PROPERTY DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(DNWi_TARGET_NACT_NGATE_NGATE_Core_M6)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE20_NGATE_Core_M6, METAL_AREA)]


//Record the PW NETID/METAL_AREA/NBL_AREA/NGATE NETID in the Target NGATE.
RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 = DFM PROPERTY NGATE_Core_M6_RULE20 NGATE_Core_M6_RULE20_NACT_CHECK_M6 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 OVERLAP MULTI
            [ -= COUNT(NGATE_Core_M6_RULE20_NACT_CHECK_M6)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6, DNWi_AREA)] > 0
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6, METAL_AREA)] > 0
            [ NGATE_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NGATE_NETID = GLOBALNETID(NGATE_Core_M6_RULE20, 1)]

// Get the connected target NACT count in one target DNWi.
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_C = STAMP NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 BY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20
NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_COUNT = NET AREA RATIO NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_C > 0 INSIDE OF LAYER DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 ACCUMULATE
            [COUNT(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_C)]
//Record the PW NETID/(METAL_AREA/COUNT(Target NACT))/DNWi_AREA/NACT NETID in the Target NACT.
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_pre1 = DFM PROPERTY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 OVERLAP MULTI
            [ -= COUNT( NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 )] > 0
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_pre = STAMP RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_pre1 BY NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_pre NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 PW_ALL_pw_c_RULE20 RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6 NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_COUNT OVERLAP MULTI
            [ -= NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6, DNWi_AREA)/NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_DNWi_TARGET_NACT_NGATE_NGATE_Core_M6, METAL_AREA)/NARAC(NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_METAL_COUNT )] > 0
            [ NACT_PW_NETID = GLOBALNETID(PW_ALL_pw_c_RULE20, 1)]
            [ NACT_NETID = GLOBALNETID(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_pre, 1)]
RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre = RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 AND RW_B2Bconn_300_M6 
RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , NGATE_NETID)]
RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre = RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 NOT RW_B2Bconn_300_M6 
RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6_pre)] > 0
            [ DNWi_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , DNWi_AREA_GATE)]
            [ METAL_AREA_GATE = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , METAL_AREA_GATE)]
            [ NGATE_PW_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , NGATE_PW_NETID)]
            [ NGATE_NETID = NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6 , NGATE_NETID)]
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre = RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 NOT RW_B2Bconn_300_M6 
RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 = DFM PROPERTY RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre OVERLAP MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6_pre)] > 0
            [ DNWi_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)]
            [ METAL_AREA_NACT = PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , METAL_AREA_NACT)]
            [ NACT_PW_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_PW_NETID)]
            [ NACT_NETID = NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_NETID)]
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M6_1
DNW.R.20.2.1:NGATE_Core_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M6_1
DNW.R.20.2.2:NGATE_Core_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M6_1
DNW.R.20.2.3:NGATE_Core_M6_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M6_1.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_NOT_B2B_M6 INTERACT RESULT
}
//DNW.R.20.2.1 is checked by DNW.R.20.2.1:NGATE_Core_M6_2
DNW.R.20.2.1:NGATE_Core_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_1_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_1
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_1]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_1_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.1:NGATE_Core_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.2.2 is checked by DNW.R.20.2.2:NGATE_Core_M6_2
DNW.R.20.2.2:NGATE_Core_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2_DNW2
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_2_DNW1
                        @  METAL mesh_LV NMOS core gates area/ target DNWi_LV NMOS core gates area < ^DNW_R_20_2_2
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY(TARGET_INFO, GATE_DNWi)] > 0
            [ RESULT_RATIO = PROPERTY(TARGET_INFO, GATE_METAL)/PROPERTY(TARGET_INFO, GATE_DNWi) - DNW_R_20_2_2]  >= 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW2]  < 0
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_2_DNW1]  >= 0
    DFM RDB RESULT DNW.R.20.2.2:NGATE_Core_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}
//DNW.R.20.2.3 is checked by DNW.R.20.2.3:NGATE_Core_M6_2
DNW.R.20.2.3:NGATE_Core_M6_2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ target DNWi_LV NMOS core gates area >= ^DNW_R_20_2_3
    TARGET_INFO = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 NODAL MULTI
            [ -= COUNT(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6)] > 0
            [ NACT_DNWi_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))] > 0
            [ NACT_METAL_TOTAL = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))] > 0
            [ NACT_DNWi_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 , NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6 , DNWi_AREA_NACT)))]
            [ NACT_METAL_WAIVE = VNETSUM(NETPROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, NGATE_PW_NETID), VNETID(NETPROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, NACT_PW_NETID)), VECTOR(PROPERTY(RC_METAL_NACT_ALL_nact_c_ngate_M6_NGATE_Core_RULE20_NGATE_Core_M6_RULE20_CHECK_M6_NOT_B2B_M6, METAL_AREA_NACT)))]
            [ GATE_DNWi =  PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, DNWi_AREA_GATE)]
            [ GATE_METAL = PROPERTY(RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6, METAL_AREA_GATE)]
    RESULT = DFM PROPERTY RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 TARGET_INFO DNWi OVERLAP MULTI
            [ NACT_DNWi = PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL ) - PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE)]
            [ NACT_METAL = PROPERTY(TARGET_INFO, NACT_METAL_TOTAL) - PROPERTY(TARGET_INFO, NACT_METAL_WAIVE)]
            [ GATE_DNWi = PROPERTY(TARGET_INFO, GATE_DNWi)]
            [ GATE_METAL = PROPERTY(TARGET_INFO, GATE_METAL)]
            [ -= PROPERTY(TARGET_INFO, GATE_METAL)] > 0
            [ RC_GATE = PROPERTY(TARGET_INFO, GATE_DNWi)/PROPERTY(TARGET_INFO, GATE_METAL)]
            [ RC_ACT = (PROPERTY_REF(NACT_METAL) > 0)  ? ((PROPERTY(TARGET_INFO, NACT_DNWi_TOTAL)-PROPERTY(TARGET_INFO, NACT_DNWi_WAIVE))/(PROPERTY(TARGET_INFO, NACT_METAL_TOTAL)-PROPERTY(TARGET_INFO, NACT_METAL_WAIVE))) : -1]
            [ NGATE_AREA = AREA( RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6)]
            [ -= PROPERTY_REF(GATE_DNWi) - DNW_R_20_2_3]  >= 0
    DFM RDB RESULT DNW.R.20.2.3:NGATE_Core_M6_2.rdb DNWi NOEMPTY NOPSEUDO
    RC_METAL_NGATE_Core_M6_RULE20_NACT_CHECK_M6_AND_B2B_M6 INTERACT RESULT
}




DISCONNECT
//====================================================================
// Define layers for N+ ACTIVE to Ngate
//====================================================================
BULK_11 = SIZE CHIP BY 11
EMPTY11 = CHIP NOT BULK_11
NACT_ALL_nact_c_ngate_RULE21 = NACT_ALL OR EMPTY11
POLYi_nact_c_ngate_RULE21 = (POLYi INTERACT GATE ) OR EMPTY11
NGATE_OD2_nact_c_ngate_RULE21 = NGATE_OD2 OR EMPTY11
NGATE_Core_nact_c_ngate_RULE21 = NGATE_Core OR EMPTY11
CO_nact_c_ngate_RULE21 = CO OR EMPTY11
CTM_nact_c_ngate_RULE21 = CTM_all OR EMPTY11
CMM_nact_c_ngate_RULE21 = CMM_all OR EMPTY11
M1_nact_c_ngate_RULE21 = M1 OR EMPTY11
M2_nact_c_ngate_RULE21 = M2 OR EMPTY11
VIA1_nact_c_ngate_RULE21 = VIA1 OR EMPTY11
M3_nact_c_ngate_RULE21 = M3 OR EMPTY11
VIA2_nact_c_ngate_RULE21 = VIA2 OR EMPTY11
M4_nact_c_ngate_RULE21 = M4 OR EMPTY11
VIA3_nact_c_ngate_RULE21 = VIA3 OR EMPTY11
M5_nact_c_ngate_RULE21 = M5 OR EMPTY11
VIA4_nact_c_ngate_RULE21 = VIA4 OR EMPTY11
M6_nact_c_ngate_RULE21 = M6 OR EMPTY11
VIA5_nact_c_ngate_RULE21 = VIA5 OR EMPTY11
//====================================================================
// Build connection for N+ ACTIVE to Ngate
//====================================================================
CONNECT M1_nact_c_ngate_RULE21 NACT_ALL_nact_c_ngate_RULE21 BY CO_nact_c_ngate_RULE21
CONNECT M1_nact_c_ngate_RULE21 POLYi_nact_c_ngate_RULE21 BY CO_nact_c_ngate_RULE21
CONNECT NGATE_OD2_nact_c_ngate_RULE21 POLYi_nact_c_ngate_RULE21
CONNECT NGATE_Core_nact_c_ngate_RULE21 POLYi_nact_c_ngate_RULE21
//====================================================================
// Define layers for PW of ACTIVE connected to PW of gate
//====================================================================
BULK_11_1 = SIZE CHIP BY 11.1
EMPTY11_1 = CHIP NOT BULK_11_1
PW_ALL_pw_c_RULE21 = PW_ALL  OR EMPTY11_1
LV_PSTP_ALL_pw_c_RULE21 = LV_PSTP_ALL OR EMPTY11_1
CO_pw_c_RULE21 = CO OR EMPTY11_1
CTM_pw_c_RULE21 = CTM_all OR EMPTY11_1
CMM_pw_c_RULE21 = CMM_all OR EMPTY11_1
M1_pw_c_RULE21 = M1 OR EMPTY11_1
M2_pw_c_RULE21 = M2 OR EMPTY11_1
VIA1_pw_c_RULE21 = VIA1 OR EMPTY11_1
M3_pw_c_RULE21 = M3 OR EMPTY11_1
VIA2_pw_c_RULE21 = VIA2 OR EMPTY11_1
M4_pw_c_RULE21 = M4 OR EMPTY11_1
VIA3_pw_c_RULE21 = VIA3 OR EMPTY11_1
M5_pw_c_RULE21 = M5 OR EMPTY11_1
VIA4_pw_c_RULE21 = VIA4 OR EMPTY11_1
M6_pw_c_RULE21 = M6 OR EMPTY11_1
VIA5_pw_c_RULE21 = VIA5 OR EMPTY11_1
//====================================================================
// Build connection for PW of ACTIVE connected to PW of gate
//====================================================================
CONNECT M1_pw_c_RULE21 LV_PSTP_ALL_pw_c_RULE21 BY CO_pw_c_RULE21
CONNECT LV_PSTP_ALL_pw_c_RULE21 PW_ALL_pw_c_RULE21
//====================================================================
// Define layers for metal mesh
//====================================================================
BULK_11_2 = SIZE CHIP BY 11.2
EMPTY11_2 = CHIP NOT BULK_11_2
PWs_c_mesh_RULE21 = (PWi INSIDE DNWi) OR EMPTY11_2
NWs_c_mesh_RULE21 = ((NW_ULLNW OR EMPTY11) INSIDE DNWi) OR EMPTY11_2
PSTP_DNW_c_mesh_RULE21 = (PSTP_DNW INSIDE DNWi) OR EMPTY11_2
NSTP_DNW_c_mesh_RULE21 = (NSTP_DNW INSIDE DNWi) OR EMPTY11_2
STP_c_mesh_RULE21 = PSTP_DNW_c_mesh_RULE21 OR NSTP_DNW_c_mesh_RULE21
CO_c_mesh_RULE21 = CO OR EMPTY11_2
CTM_C_mesh_RULE21 = CTM_all OR EMPTY11_2
CMM_C_mesh_RULE21 = CMM_all OR EMPTY11_2
M1_c_mesh_RULE21 = M1 OR EMPTY11_2
M2_c_mesh_RULE21 = M2 OR EMPTY11_2
VIA1_c_mesh_RULE21 = VIA1 OR EMPTY11_2
M3_c_mesh_RULE21 = M3 OR EMPTY11_2
VIA2_c_mesh_RULE21 = VIA2 OR EMPTY11_2
M4_c_mesh_RULE21 = M4 OR EMPTY11_2
VIA3_c_mesh_RULE21 = VIA3 OR EMPTY11_2
M5_c_mesh_RULE21 = M5 OR EMPTY11_2
VIA4_c_mesh_RULE21 = VIA4 OR EMPTY11_2
M6_c_mesh_RULE21 = M6 OR EMPTY11_2
VIA5_c_mesh_RULE21 = VIA5 OR EMPTY11_2
//====================================================================
// Build connection for metal mesh
//====================================================================
CONNECT M1_c_mesh_RULE21 PSTP_DNW_c_mesh_RULE21 NSTP_DNW_c_mesh_RULE21 BY CO_c_mesh_RULE21
CONNECT PSTP_DNW_c_mesh_RULE21 PWs_c_mesh_RULE21
CONNECT NSTP_DNW_c_mesh_RULE21 NWs_c_mesh_RULE21
CONNECT PSTP_DNW_c_mesh_RULE21 STP_c_mesh_RULE21
CONNECT NSTP_DNW_c_mesh_RULE21 STP_c_mesh_RULE21
//====================================================================
// Define layers for GATE connects to its PW
//====================================================================
BULK_11_3 = SIZE CHIP BY 11.3
EMPTY11_3 = CHIP NOT BULK_11_3
POLYi_gate_c_pstp_RULE21 = (POLYi INTERACT GATE) OR EMPTY11_3
NGATE_OD2_gate_c_pstp_RULE21 = NGATE_OD2 OR EMPTY11_3
NGATE_Core_gate_c_pstp_RULE21 = NGATE_Core OR EMPTY11_3
LV_PSTP_N_DNW_gate_c_pstp_RULE21 = (LV_PSTP_N_DNW OUTSIDE DNWi) OR EMPTY11_3
CO_gate_c_pstp_RULE21 = CO OR EMPTY11_3
CTM_gate_c_pstp_RULE21 = CTM_all OR EMPTY11_3
CMM_gate_c_pstp_RULE21 = CMM_all OR EMPTY11_3
M1_gate_c_pstp_RULE21 = M1 OR EMPTY11_3
M2_gate_c_pstp_RULE21 = M2 OR EMPTY11_3
VIA1_gate_c_pstp_RULE21 = VIA1 OR EMPTY11_3
M3_gate_c_pstp_RULE21 = M3 OR EMPTY11_3
VIA2_gate_c_pstp_RULE21 = VIA2 OR EMPTY11_3
M4_gate_c_pstp_RULE21 = M4 OR EMPTY11_3
VIA3_gate_c_pstp_RULE21 = VIA3 OR EMPTY11_3
M5_gate_c_pstp_RULE21 = M5 OR EMPTY11_3
VIA4_gate_c_pstp_RULE21 = VIA4 OR EMPTY11_3
M6_gate_c_pstp_RULE21 = M6 OR EMPTY11_3
VIA5_gate_c_pstp_RULE21 = VIA5 OR EMPTY11_3
//====================================================================
// Build connection for GATE connects to its PW
//====================================================================
CONNECT M1_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 BY CO_gate_c_pstp_RULE21
CONNECT M1_gate_c_pstp_RULE21 POLYi_gate_c_pstp_RULE21 BY CO_gate_c_pstp_RULE21
CONNECT NGATE_OD2_gate_c_pstp_RULE21 POLYi_gate_c_pstp_RULE21
CONNECT NGATE_Core_gate_c_pstp_RULE21 POLYi_gate_c_pstp_RULE21
//====================================================================
// Define layers for waive Diode
//====================================================================
BULK_11_4 = SIZE CHIP BY 11.4
EMPTY11_4 = CHIP NOT BULK_11_4
NDIO_w_c_diode_RULE21 = (NP_PW OUTSIDE DNWi) OR EMPTY11_4
POLYi_c_diode_RULE21 = (POLYi INTERACT GATE) OR EMPTY11_4
NACT_ALL_c_diode_RULE21 = NACT_ALL OR EMPTY11_4
CO_c_diode_RULE21 = CO OR EMPTY11_4
CTM_c_diode_RULE21 = CTM_all OR EMPTY11_4
CMM_c_diode_RULE21 = CMM_all OR EMPTY11_4
M1_c_diode_RULE21 = M1 OR EMPTY11_4
M2_c_diode_RULE21 = M2 OR EMPTY11_4
VIA1_c_diode_RULE21 = VIA1 OR EMPTY11_4
M3_c_diode_RULE21 = M3 OR EMPTY11_4
VIA2_c_diode_RULE21 = VIA2 OR EMPTY11_4
M4_c_diode_RULE21 = M4 OR EMPTY11_4
VIA3_c_diode_RULE21 = VIA3 OR EMPTY11_4
M5_c_diode_RULE21 = M5 OR EMPTY11_4
VIA4_c_diode_RULE21 = VIA4 OR EMPTY11_4
M6_c_diode_RULE21 = M6 OR EMPTY11_4
VIA5_c_diode_RULE21 = VIA5 OR EMPTY11_4
//====================================================================
// Build connection for waive Diode
//====================================================================
CONNECT M1_c_diode_RULE21 NDIO_w_c_diode_RULE21 BY CO_c_diode_RULE21
CONNECT M1_c_diode_RULE21 NACT_ALL_c_diode_RULE21 BY CO_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M1_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M1_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M1_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M1_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M1_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M1_RULE21_CK = NGATE_OD2_nact_c_ngate_M1_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M1_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21 
NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_OD2_nact_c_ngate_M1_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M1_RULE21)]
// Select NACT_ALL_C_M1_RULE21 connectted to NGATE_OD2_nact_c_ngate_M1_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_OD2_nact_c_ngate_M1_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_OD2_nact_c_ngate_M1_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M1_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M1_RULE21_CK NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M1_RULE21

// Select all NACT_ALL_C_M1_RULE21 connectted to NGATE_OD2_nact_c_ngate_M1_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_PW = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_OD2_nact_c_ngate_M1_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M1_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK AND RW_B2Bconn_300_M1

// Filter all DNWi whose NACT_ALL_C_M1_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_DIO

// select target NACT_ALL_C_M1_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M1_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 = DFM PROPERTY STP_c_mesh_RULE21 M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M1 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M1 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 = DFM PROPERTY STP_c_mesh_RULE21 VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M1, VIA_AREA)]
//DNW.R.21.3.1 is checked by DNW.R.21.3.1_VIA1_1
//DNW.R.21.3.2 is checked by DNW.R.21.3.2_VIA1_1
DNW.R.21.3.1_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_1]  >= 0
   DFM RDB err DNW.R.21.3.1_VIA1_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.3.1_VIA1_1_GATE.rdb NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
DNW.R.21.3.2_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_2]  >= 0
   DFM RDB err DNW.R.21.3.2_VIA1_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.3.2_VIA1_1_GATE.rdb NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M1
DNW.R.21.1.1:NGATE_OD2_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M1_GATE.rdb NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M1
DNW.R.21.1.2:NGATE_OD2_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M1_GATE.rdb NGATE_OD2_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M1_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M1_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M1_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M1_RULE21_CK = NGATE_Core_nact_c_ngate_M1_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M1_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21 
NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_Core_nact_c_ngate_M1_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M1_RULE21)]
// Select NACT_ALL_C_M1_RULE21 connectted to NGATE_Core_nact_c_ngate_M1_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_Core_nact_c_ngate_M1_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_Core_nact_c_ngate_M1_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M1_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M1_RULE21_CK connectted to NACT_ALL_C_M1_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M1_RULE21_CK NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M1_RULE21

// Select all NACT_ALL_C_M1_RULE21 connectted to NGATE_Core_nact_c_ngate_M1_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_PW = NET AREA RATIO NACT_ALL_C_M1_RULE21 NGATE_Core_nact_c_ngate_M1_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M1_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK AND RW_B2Bconn_300_M1

// Filter all DNWi whose NACT_ALL_C_M1_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_DIO

// select target NACT_ALL_C_M1_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M1_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 = DFM PROPERTY STP_c_mesh_RULE21 M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_Core_M1 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_Core_M1 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_Core_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 = DFM PROPERTY STP_c_mesh_RULE21 VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M1, VIA_AREA)]
//DNW.R.21.4.1 is checked by DNW.R.21.4.1_VIA1_1
//DNW.R.21.4.2 is checked by DNW.R.21.4.2_VIA1_1
DNW.R.21.4.1_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_1]  >= 0
   DFM RDB err DNW.R.21.4.1_VIA1_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.4.1_VIA1_1_GATE.rdb NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
DNW.R.21.4.2_VIA1_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_2]  >= 0
   DFM RDB err DNW.R.21.4.2_VIA1_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.4.2_VIA1_1_GATE.rdb NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M1
DNW.R.21.2.1:NGATE_Core_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M1_GATE.rdb NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M1
DNW.R.21.2.2:NGATE_Core_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M1_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M1_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M1_GATE.rdb NGATE_Core_nact_c_ngate_M1_RULE21_CK_CHECK_C
}
CONNECT M2_nact_c_ngate_RULE21 M1_nact_c_ngate_RULE21 BY VIA1_nact_c_ngate_RULE21
CONNECT M2_pw_c_RULE21 M1_pw_c_RULE21 BY VIA1_pw_c_RULE21
CONNECT M2_c_mesh_RULE21 M1_c_mesh_RULE21 BY VIA1_c_mesh_RULE21
CONNECT M2_gate_c_pstp_RULE21 M1_gate_c_pstp_RULE21 BY VIA1_gate_c_pstp_RULE21
CONNECT M2_c_diode_RULE21 M1_c_diode_RULE21 BY VIA1_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M2_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M2_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M2_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M2_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M2_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M2_RULE21_CK = NGATE_OD2_nact_c_ngate_M2_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M2_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21 
NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_OD2_nact_c_ngate_M2_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M2_RULE21)]
// Select NACT_ALL_C_M2_RULE21 connectted to NGATE_OD2_nact_c_ngate_M2_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_OD2_nact_c_ngate_M2_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_OD2_nact_c_ngate_M2_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M2_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M2_RULE21_CK NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M2_RULE21

// Select all NACT_ALL_C_M2_RULE21 connectted to NGATE_OD2_nact_c_ngate_M2_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_PW = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_OD2_nact_c_ngate_M2_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M2_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK AND RW_B2Bconn_300_M2

// Filter all DNWi whose NACT_ALL_C_M2_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_DIO

// select target NACT_ALL_C_M2_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M2_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 = DFM PROPERTY STP_c_mesh_RULE21 M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M2 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M2 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 = DFM PROPERTY STP_c_mesh_RULE21 VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M2, VIA_AREA)]
//DNW.R.21.3.1 is checked by DNW.R.21.3.1_VIA2_1
//DNW.R.21.3.2 is checked by DNW.R.21.3.2_VIA2_1
DNW.R.21.3.1_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_1]  >= 0
   DFM RDB err DNW.R.21.3.1_VIA2_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.3.1_VIA2_1_GATE.rdb NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
DNW.R.21.3.2_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_2]  >= 0
   DFM RDB err DNW.R.21.3.2_VIA2_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.3.2_VIA2_1_GATE.rdb NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M2
DNW.R.21.1.1:NGATE_OD2_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M2.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M2_GATE.rdb NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M2
DNW.R.21.1.2:NGATE_OD2_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M2.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M2_GATE.rdb NGATE_OD2_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M2_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M2_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M2_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M2_RULE21_CK = NGATE_Core_nact_c_ngate_M2_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M2_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21 
NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_Core_nact_c_ngate_M2_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M2_RULE21)]
// Select NACT_ALL_C_M2_RULE21 connectted to NGATE_Core_nact_c_ngate_M2_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_Core_nact_c_ngate_M2_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_Core_nact_c_ngate_M2_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M2_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M2_RULE21_CK connectted to NACT_ALL_C_M2_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M2_RULE21_CK NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M2_RULE21

// Select all NACT_ALL_C_M2_RULE21 connectted to NGATE_Core_nact_c_ngate_M2_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_PW = NET AREA RATIO NACT_ALL_C_M2_RULE21 NGATE_Core_nact_c_ngate_M2_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M2_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK AND RW_B2Bconn_300_M2

// Filter all DNWi whose NACT_ALL_C_M2_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_DIO

// select target NACT_ALL_C_M2_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M2_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 = DFM PROPERTY STP_c_mesh_RULE21 M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_Core_M2 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_Core_M2 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_Core_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_Core_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 = DFM PROPERTY STP_c_mesh_RULE21 VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M2, VIA_AREA)]
//DNW.R.21.4.1 is checked by DNW.R.21.4.1_VIA2_1
//DNW.R.21.4.2 is checked by DNW.R.21.4.2_VIA2_1
DNW.R.21.4.1_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_1]  >= 0
   DFM RDB err DNW.R.21.4.1_VIA2_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.4.1_VIA2_1_GATE.rdb NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
DNW.R.21.4.2_VIA2_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_2]  >= 0
   DFM RDB err DNW.R.21.4.2_VIA2_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.4.2_VIA2_1_GATE.rdb NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M2
DNW.R.21.2.1:NGATE_Core_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M2.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M2_GATE.rdb NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M2
DNW.R.21.2.2:NGATE_Core_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M2_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M2.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M2_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M2_GATE.rdb NGATE_Core_nact_c_ngate_M2_RULE21_CK_CHECK_C
}
CONNECT M3_nact_c_ngate_RULE21 M2_nact_c_ngate_RULE21 BY VIA2_nact_c_ngate_RULE21
CONNECT M3_pw_c_RULE21 M2_pw_c_RULE21 BY VIA2_pw_c_RULE21
CONNECT M3_c_mesh_RULE21 M2_c_mesh_RULE21 BY VIA2_c_mesh_RULE21
CONNECT M3_gate_c_pstp_RULE21 M2_gate_c_pstp_RULE21 BY VIA2_gate_c_pstp_RULE21
CONNECT M3_c_diode_RULE21 M2_c_diode_RULE21 BY VIA2_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M3_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M3_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M3_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M3_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M3_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M3_RULE21_CK = NGATE_OD2_nact_c_ngate_M3_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M3_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21 
NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_OD2_nact_c_ngate_M3_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M3_RULE21)]
// Select NACT_ALL_C_M3_RULE21 connectted to NGATE_OD2_nact_c_ngate_M3_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_OD2_nact_c_ngate_M3_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_OD2_nact_c_ngate_M3_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M3_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M3_RULE21_CK NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M3_RULE21

// Select all NACT_ALL_C_M3_RULE21 connectted to NGATE_OD2_nact_c_ngate_M3_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_PW = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_OD2_nact_c_ngate_M3_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M3_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK AND RW_B2Bconn_300_M3

// Filter all DNWi whose NACT_ALL_C_M3_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_DIO

// select target NACT_ALL_C_M3_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M3_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 = DFM PROPERTY STP_c_mesh_RULE21 M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M3 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M3 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M3 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 = DFM PROPERTY STP_c_mesh_RULE21 VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M3, VIA_AREA)]
//DNW.R.21.3.1 is checked by DNW.R.21.3.1_VIA3_1
//DNW.R.21.3.2 is checked by DNW.R.21.3.2_VIA3_1
DNW.R.21.3.1_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_1]  >= 0
   DFM RDB err DNW.R.21.3.1_VIA3_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.3.1_VIA3_1_GATE.rdb NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
DNW.R.21.3.2_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_2]  >= 0
   DFM RDB err DNW.R.21.3.2_VIA3_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.3.2_VIA3_1_GATE.rdb NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M3
DNW.R.21.1.1:NGATE_OD2_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M3.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M3_GATE.rdb NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M3
DNW.R.21.1.2:NGATE_OD2_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M3.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M3_GATE.rdb NGATE_OD2_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M3_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M3_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M3_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M3_RULE21_CK = NGATE_Core_nact_c_ngate_M3_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M3_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21 
NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_Core_nact_c_ngate_M3_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M3_RULE21)]
// Select NACT_ALL_C_M3_RULE21 connectted to NGATE_Core_nact_c_ngate_M3_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_Core_nact_c_ngate_M3_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_Core_nact_c_ngate_M3_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M3_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M3_RULE21_CK connectted to NACT_ALL_C_M3_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M3_RULE21_CK NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M3_RULE21

// Select all NACT_ALL_C_M3_RULE21 connectted to NGATE_Core_nact_c_ngate_M3_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_PW = NET AREA RATIO NACT_ALL_C_M3_RULE21 NGATE_Core_nact_c_ngate_M3_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M3_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK AND RW_B2Bconn_300_M3

// Filter all DNWi whose NACT_ALL_C_M3_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_DIO

// select target NACT_ALL_C_M3_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M3_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 = DFM PROPERTY STP_c_mesh_RULE21 M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_Core_M3 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_Core_M3 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_Core_M3 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_Core_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_Core_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_Core_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 = DFM PROPERTY STP_c_mesh_RULE21 VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M3, VIA_AREA)]
//DNW.R.21.4.1 is checked by DNW.R.21.4.1_VIA3_1
//DNW.R.21.4.2 is checked by DNW.R.21.4.2_VIA3_1
DNW.R.21.4.1_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_1]  >= 0
   DFM RDB err DNW.R.21.4.1_VIA3_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.4.1_VIA3_1_GATE.rdb NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
DNW.R.21.4.2_VIA3_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_2]  >= 0
   DFM RDB err DNW.R.21.4.2_VIA3_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.4.2_VIA3_1_GATE.rdb NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M3
DNW.R.21.2.1:NGATE_Core_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M3.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M3_GATE.rdb NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M3
DNW.R.21.2.2:NGATE_Core_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M3_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M3.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M3_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M3_GATE.rdb NGATE_Core_nact_c_ngate_M3_RULE21_CK_CHECK_C
}
CONNECT M4_nact_c_ngate_RULE21 M3_nact_c_ngate_RULE21 BY VIA3_nact_c_ngate_RULE21
CONNECT M4_pw_c_RULE21 M3_pw_c_RULE21 BY VIA3_pw_c_RULE21
CONNECT M4_c_mesh_RULE21 M3_c_mesh_RULE21 BY VIA3_c_mesh_RULE21
CONNECT M4_gate_c_pstp_RULE21 M3_gate_c_pstp_RULE21 BY VIA3_gate_c_pstp_RULE21
CONNECT M4_c_diode_RULE21 M3_c_diode_RULE21 BY VIA3_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M4_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M4_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M4_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M4_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M4_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M4_RULE21_CK = NGATE_OD2_nact_c_ngate_M4_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M4_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21 
NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_OD2_nact_c_ngate_M4_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M4_RULE21)]
// Select NACT_ALL_C_M4_RULE21 connectted to NGATE_OD2_nact_c_ngate_M4_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_OD2_nact_c_ngate_M4_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_OD2_nact_c_ngate_M4_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M4_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M4_RULE21_CK NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M4_RULE21

// Select all NACT_ALL_C_M4_RULE21 connectted to NGATE_OD2_nact_c_ngate_M4_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_PW = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_OD2_nact_c_ngate_M4_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M4_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK AND RW_B2Bconn_300_M4

// Filter all DNWi whose NACT_ALL_C_M4_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_DIO

// select target NACT_ALL_C_M4_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M4_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 = DFM PROPERTY STP_c_mesh_RULE21 M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M4 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M4 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M4 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M4 = M4_C_mesh_RULE21 AND VIA4_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 = DFM PROPERTY STP_c_mesh_RULE21 VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M4, VIA_AREA)]
//DNW.R.21.3.1 is checked by DNW.R.21.3.1_VIA4_1
//DNW.R.21.3.2 is checked by DNW.R.21.3.2_VIA4_1
DNW.R.21.3.1_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_1]  >= 0
   DFM RDB err DNW.R.21.3.1_VIA4_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.3.1_VIA4_1_GATE.rdb NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
DNW.R.21.3.2_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_2]  >= 0
   DFM RDB err DNW.R.21.3.2_VIA4_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.3.2_VIA4_1_GATE.rdb NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M4
DNW.R.21.1.1:NGATE_OD2_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M4.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M4_GATE.rdb NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M4
DNW.R.21.1.2:NGATE_OD2_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M4.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M4_GATE.rdb NGATE_OD2_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M4_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M4_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M4_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M4_RULE21_CK = NGATE_Core_nact_c_ngate_M4_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M4_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21 
NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_Core_nact_c_ngate_M4_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M4_RULE21)]
// Select NACT_ALL_C_M4_RULE21 connectted to NGATE_Core_nact_c_ngate_M4_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_Core_nact_c_ngate_M4_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_Core_nact_c_ngate_M4_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M4_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M4_RULE21_CK connectted to NACT_ALL_C_M4_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M4_RULE21_CK NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M4_RULE21

// Select all NACT_ALL_C_M4_RULE21 connectted to NGATE_Core_nact_c_ngate_M4_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_PW = NET AREA RATIO NACT_ALL_C_M4_RULE21 NGATE_Core_nact_c_ngate_M4_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M4_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK AND RW_B2Bconn_300_M4

// Filter all DNWi whose NACT_ALL_C_M4_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_DIO

// select target NACT_ALL_C_M4_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M4_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 = DFM PROPERTY STP_c_mesh_RULE21 M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_Core_M4 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_Core_M4 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_Core_M4 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
VIA4_C_VIA_mesh_RULE21_NGATE_Core_M4 = M4_C_mesh_RULE21 AND VIA4_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_Core_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_Core_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_Core_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE21_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE21_NGATE_Core_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 = DFM PROPERTY STP_c_mesh_RULE21 VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M4, VIA_AREA)]
//DNW.R.21.4.1 is checked by DNW.R.21.4.1_VIA4_1
//DNW.R.21.4.2 is checked by DNW.R.21.4.2_VIA4_1
DNW.R.21.4.1_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_1]  >= 0
   DFM RDB err DNW.R.21.4.1_VIA4_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.4.1_VIA4_1_GATE.rdb NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
DNW.R.21.4.2_VIA4_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_2]  >= 0
   DFM RDB err DNW.R.21.4.2_VIA4_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.4.2_VIA4_1_GATE.rdb NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M4
DNW.R.21.2.1:NGATE_Core_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M4.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M4_GATE.rdb NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M4
DNW.R.21.2.2:NGATE_Core_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M4_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M4.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M4_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M4_GATE.rdb NGATE_Core_nact_c_ngate_M4_RULE21_CK_CHECK_C
}
CONNECT M5_nact_c_ngate_RULE21 M4_nact_c_ngate_RULE21 BY VIA4_nact_c_ngate_RULE21
CONNECT M5_pw_c_RULE21 M4_pw_c_RULE21 BY VIA4_pw_c_RULE21
CONNECT M5_c_mesh_RULE21 M4_c_mesh_RULE21 BY VIA4_c_mesh_RULE21
CONNECT M5_gate_c_pstp_RULE21 M4_gate_c_pstp_RULE21 BY VIA4_gate_c_pstp_RULE21
CONNECT M5_c_diode_RULE21 M4_c_diode_RULE21 BY VIA4_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M5_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M5_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M5_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M5_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M5_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M5_RULE21_CK = NGATE_OD2_nact_c_ngate_M5_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M5_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21 
NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_OD2_nact_c_ngate_M5_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M5_RULE21)]
// Select NACT_ALL_C_M5_RULE21 connectted to NGATE_OD2_nact_c_ngate_M5_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_OD2_nact_c_ngate_M5_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_OD2_nact_c_ngate_M5_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M5_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M5_RULE21_CK NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M5_RULE21

// Select all NACT_ALL_C_M5_RULE21 connectted to NGATE_OD2_nact_c_ngate_M5_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_PW = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_OD2_nact_c_ngate_M5_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M5_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK AND RW_B2Bconn_300_M5

// Filter all DNWi whose NACT_ALL_C_M5_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_DIO

// select target NACT_ALL_C_M5_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M5_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO M5_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE21)]
M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 = DFM PROPERTY STP_c_mesh_RULE21 M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M5 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M5 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M5 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M5 = M4_C_mesh_RULE21 AND VIA4_C_mesh_RULE21
VIA5_C_VIA_mesh_RULE21_NGATE_OD2_M5 = M5_C_mesh_RULE21 AND VIA5_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE21_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 = DFM PROPERTY STP_c_mesh_RULE21 VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_OD2_M5, VIA_AREA)]
//DNW.R.21.3.1 is checked by DNW.R.21.3.1_VIA5_1
//DNW.R.21.3.2 is checked by DNW.R.21.3.2_VIA5_1
DNW.R.21.3.1_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_1]  >= 0
   DFM RDB err DNW.R.21.3.1_VIA5_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.3.1_VIA5_1_GATE.rdb NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
DNW.R.21.3.2_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_3_2]  >= 0
   DFM RDB err DNW.R.21.3.2_VIA5_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.3.2_VIA5_1_GATE.rdb NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M5
DNW.R.21.1.1:NGATE_OD2_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M5.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M5_GATE.rdb NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M5
DNW.R.21.1.2:NGATE_OD2_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M5.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M5_GATE.rdb NGATE_OD2_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M5_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M5_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M5_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M5_RULE21_CK = NGATE_Core_nact_c_ngate_M5_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M5_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21 
NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_Core_nact_c_ngate_M5_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M5_RULE21)]
// Select NACT_ALL_C_M5_RULE21 connectted to NGATE_Core_nact_c_ngate_M5_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_Core_nact_c_ngate_M5_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_Core_nact_c_ngate_M5_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M5_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M5_RULE21_CK connectted to NACT_ALL_C_M5_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M5_RULE21_CK NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M5_RULE21

// Select all NACT_ALL_C_M5_RULE21 connectted to NGATE_Core_nact_c_ngate_M5_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_PW = NET AREA RATIO NACT_ALL_C_M5_RULE21 NGATE_Core_nact_c_ngate_M5_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M5_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK AND RW_B2Bconn_300_M5

// Filter all DNWi whose NACT_ALL_C_M5_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_DIO

// select target NACT_ALL_C_M5_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M5_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO M5_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE21)]
M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 = DFM PROPERTY STP_c_mesh_RULE21 M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE21_NGATE_Core_M5 = M1_C_mesh_RULE21 AND VIA1_C_mesh_RULE21
VIA2_C_VIA_mesh_RULE21_NGATE_Core_M5 = M2_C_mesh_RULE21 AND VIA2_C_mesh_RULE21
VIA3_C_VIA_mesh_RULE21_NGATE_Core_M5 = M3_C_mesh_RULE21 AND VIA3_C_mesh_RULE21
VIA4_C_VIA_mesh_RULE21_NGATE_Core_M5 = M4_C_mesh_RULE21 AND VIA4_C_mesh_RULE21
VIA5_C_VIA_mesh_RULE21_NGATE_Core_M5 = M5_C_mesh_RULE21 AND VIA5_C_mesh_RULE21
STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE21_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE21_NGATE_Core_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE21_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE21_NGATE_Core_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE21_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE21_NGATE_Core_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE21_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE21_NGATE_Core_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE21_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE21_NGATE_Core_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 = DFM PROPERTY STP_c_mesh_RULE21 VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE21_NGATE_Core_M5, VIA_AREA)]
//DNW.R.21.4.1 is checked by DNW.R.21.4.1_VIA5_1
//DNW.R.21.4.2 is checked by DNW.R.21.4.2_VIA5_1
DNW.R.21.4.1_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_1]  >= 0
   DFM RDB err DNW.R.21.4.1_VIA5_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.4.1_VIA5_1_GATE.rdb NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
DNW.R.21.4.2_VIA5_1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_VIA_MESH = (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, VIA_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_4_2]  >= 0
   DFM RDB err DNW.R.21.4.2_VIA5_1.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.4.2_VIA5_1_GATE.rdb NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M5
DNW.R.21.2.1:NGATE_Core_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M5.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M5_GATE.rdb NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M5
DNW.R.21.2.2:NGATE_Core_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M5_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M5.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M5_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M5_GATE.rdb NGATE_Core_nact_c_ngate_M5_RULE21_CK_CHECK_C
}
CONNECT M6_nact_c_ngate_RULE21 CTM_nact_c_ngate_RULE21 CMM_nact_c_ngate_RULE21 M5_nact_c_ngate_RULE21 BY VIA5_nact_c_ngate_RULE21
CONNECT M6_pw_c_RULE21 CTM_pw_c_RULE21 CMM_pw_c_RULE21 M5_pw_c_RULE21 BY VIA5_pw_c_RULE21
CONNECT M6_c_mesh_RULE21 CTM_c_mesh_RULE21 CMM_c_mesh_RULE21 M5_c_mesh_RULE21 BY VIA5_c_mesh_RULE21
CONNECT M6_gate_c_pstp_RULE21 CTM_gate_c_pstp_RULE21 CMM_gate_c_pstp_RULE21 M5_gate_c_pstp_RULE21 BY VIA5_gate_c_pstp_RULE21
CONNECT M6_c_diode_RULE21 CTM_c_diode_RULE21 CMM_c_diode_RULE21 M5_c_diode_RULE21 BY VIA5_c_diode_RULE21
// select all checked NGATE and N+Active
NACT_ALL_c_diode_M6_RULE21 = NACT_ALL_c_diode_RULE21 INSIDE DNWi
NACT_ALL_C_M6_RULE21 = NACT_ALL_nact_c_ngate_RULE21 INSIDE DNWi
NGATE_OD2_nact_c_ngate_M6_RULE21 = NGATE_OD2_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_OD2_nact_c_ngate_M6_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_OD2_nact_c_ngate_M6_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_OD2_nact_c_ngate_M6_RULE21_CK = NGATE_OD2_nact_c_ngate_M6_RULE21 NOT INTERACT NGATE_OD2_nact_c_ngate_M6_RULE21_C_PSTP

// Select all NGATE_OD2_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21 
NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_OD2_nact_c_ngate_M6_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M6_RULE21)]
// Select NACT_ALL_C_M6_RULE21 connectted to NGATE_OD2_nact_c_ngate_M6_RULE21_CK 
NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_OD2_nact_c_ngate_M6_RULE21_CK > 0

// select all NGATE_OD2_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_OD2_nact_c_ngate_M6_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M6_RULE21)]

// Select all NGATE_OD2_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK = DFM PROPERTY NGATE_OD2_nact_c_ngate_M6_RULE21_CK NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT) - NARAC(NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C = STAMP NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK BY NGATE_OD2_nact_c_ngate_M6_RULE21

// Select all NACT_ALL_C_M6_RULE21 connectted to NGATE_OD2_nact_c_ngate_M6_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_PW = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_OD2_nact_c_ngate_M6_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M6_RULE21 connected b2b diode
NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_B2B = NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK AND RW_B2Bconn_300_M6

// Filter all DNWi whose NACT_ALL_C_M6_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_PW) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_DIO

// select target NACT_ALL_C_M6_RULE21 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK = NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK

// select target NGATE_OD2_nact_c_ngate_M6_RULE21_CK 
TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)]
TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C)]
TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M5_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE21)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO M6_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE21)]
M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 = DFM PROPERTY STP_c_mesh_RULE21 M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_OD2_M6, METAL_AREA)]
//DNW.R.21.1.1 is checked by DNW.R.21.1.1:NGATE_OD2_M6
DNW.R.21.1.1:NGATE_OD2_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_1]  >= 0
   DFM RDB err DNW.R.21.1.1:NGATE_OD2_M6.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_err > 0 RDB DNW.R.21.1.1:NGATE_OD2_M6_GATE.rdb NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C
}
//DNW.R.21.1.2 is checked by DNW.R.21.1.2:NGATE_OD2_M6
DNW.R.21.1.2:NGATE_OD2_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_1_2]  >= 0
   DFM RDB err DNW.R.21.1.2:NGATE_OD2_M6.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_err = TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_OD2_nact_c_ngate_M6_RULE21_CK_err > 0 RDB DNW.R.21.1.2:NGATE_OD2_M6_GATE.rdb NGATE_OD2_nact_c_ngate_M6_RULE21_CK_CHECK_C
}
NGATE_Core_nact_c_ngate_M6_RULE21 = NGATE_Core_nact_c_ngate_RULE21 OUTSIDE DNWi
// For guideline waive 
// Filter the NGATE_Core_nact_c_ngate_M6_RULE21 connect to LV_PSTP_N_DNW_gate_c_pstp_RULE21 in same PW_ALL_pw_c_RULE21 
NGATE_Core_nact_c_ngate_M6_RULE21_C_PSTP = NET AREA RATIO POLYi_gate_c_pstp_RULE21 LV_PSTP_N_DNW_gate_c_pstp_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21
NGATE_Core_nact_c_ngate_M6_RULE21_CK = NGATE_Core_nact_c_ngate_M6_RULE21 NOT INTERACT NGATE_Core_nact_c_ngate_M6_RULE21_C_PSTP

// Select all NGATE_Core_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21 
NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_Core_nact_c_ngate_M6_RULE21_CK > 0 ACCUMULATE
       [COUNT(NACT_ALL_C_M6_RULE21)]
// Select NACT_ALL_C_M6_RULE21 connectted to NGATE_Core_nact_c_ngate_M6_RULE21_CK 
NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_Core_nact_c_ngate_M6_RULE21_CK > 0

// select all NGATE_Core_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_Core_nact_c_ngate_M6_RULE21_CK > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET ACCUMULATE
       [COUNT(NACT_ALL_C_M6_RULE21)]

// Select all NGATE_Core_nact_c_ngate_M6_RULE21_CK connectted to NACT_ALL_C_M6_RULE21, and their PW_ALL_pw_c_RULE21 are not connected
NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK = DFM PROPERTY NGATE_Core_nact_c_ngate_M6_RULE21_CK NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C OVERLAP ABUT ALSO MULTI
       [SD_COUNT= NARAC(NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT)]
       [SD_COUNT_1= NARAC(NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C)]
       [-= NARAC(NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT) - NARAC(NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_PW_C)] > 0
NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C = STAMP NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK BY NGATE_Core_nact_c_ngate_M6_RULE21

// Select all NACT_ALL_C_M6_RULE21 connectted to NGATE_Core_nact_c_ngate_M6_RULE21, and their PW_ALL_pw_c_RULE21 are connected
NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_PW = NET AREA RATIO NACT_ALL_C_M6_RULE21 NGATE_Core_nact_c_ngate_M6_RULE21 > 0 INSIDE OF LAYER PW_ALL_pw_c_RULE21 BY NET
// Filter all DNWi whose pw of NACT_ALL_C_M6_RULE21 connected b2b diode
NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_B2B = NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK AND RW_B2Bconn_300_M6

// Filter all DNWi whose NACT_ALL_C_M6_RULE21 connected NDIO_w_c_diode_RULE21
NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_DIO = (NET AREA RATIO NACT_ALL_c_diode_RULE21 NDIO_w_c_diode_RULE21 > 0) AND NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK 
TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK = ((DNWi NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_PW) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_B2B) NOT INTERACT NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_DIO

// select target NACT_ALL_C_M6_RULE21 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK = NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK

// select target NGATE_Core_nact_c_ngate_M6_RULE21_CK 
TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_COUNT = NET AREA RATIO TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK ACCUMULATE
       [COUNT(TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK)]
TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA = NET AREA RATIO NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK > 0 ACCUMULATE
       [AREA(NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C)]
TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA = DFM PROPERTY TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_COUNT OVERLAP ABUT ALSO MULTI
       [-= NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_COUNT)] > 0
       [ GATE_AREA = NARAC(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_ALL_AREA)/NARAC(TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_COUNT)]
// Select the target DNWi violated the guideline
TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA OVERLAP MULTI ABUT ALSO
       [ ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
       [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)]
       [ RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = STP_c_mesh_RULE21 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh
M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M1_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE21)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M2_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE21)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M3_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE21)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M4_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE21)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M5_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE21)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO M6_C_mesh_RULE21 STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE21)]
M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 = DFM PROPERTY STP_c_mesh_RULE21 M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE21_NGATE_Core_M6, METAL_AREA)]
//DNW.R.21.2.1 is checked by DNW.R.21.2.1:NGATE_Core_M6
DNW.R.21.2.1:NGATE_Core_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_N+ACTIVE to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_1]  >= 0
   DFM RDB err DNW.R.21.2.1:NGATE_Core_M6.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_err > 0 RDB DNW.R.21.2.1:NGATE_Core_M6_GATE.rdb NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C
}
//DNW.R.21.2.2 is checked by DNW.R.21.2.2:NGATE_Core_M6
DNW.R.21.2.2:NGATE_Core_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_N+ACTIVE[extract from each target DNWi_N+ACTIVE] area to total area of NMOS gates[OUTSIDE DNWi, and connects to {N+ACTIVE_under_5V INSIDE each target DNWi_N+ACTIVE}] < ^DNW_R_21_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh OVERLAP MULTI
            [ALL_GATE_AREA = PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)] > 0
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA)]
            [RATIO_DNWi = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK)/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [RATIO_METAL_MESH = (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA)]
            [-= (PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE21_CK_mesh, METAL_AREA))/PROPERTY(TAR_NGATE_Core_nact_c_ngate_M6_RULE21_CK_C_NACT_AREA, GATE_AREA) - DNW_R_21_2_2]  >= 0
   DFM RDB err DNW.R.21.2.2:NGATE_Core_M6.rdb NOEMPTY NOPSEUDO
   TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_err = TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK INTERACT err
   NET AREA RATIO NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C TAR_NACT_C_NGATE_Core_nact_c_ngate_M6_RULE21_CK_err > 0 RDB DNW.R.21.2.2:NGATE_Core_M6_GATE.rdb NGATE_Core_nact_c_ngate_M6_RULE21_CK_CHECK_C
}




DISCONNECT
//====================================================================
// Define layers for N+ ACTIVE to Ngate
//====================================================================
BULK_12 = SIZE CHIP BY 12
EMPTY12 = CHIP NOT BULK_12
LV_NACT_nact_c_ngate_RULE22 = LV_NACT OR EMPTY12
POLYi_nact_c_ngate_RULE22 = (POLYi INTERACT GATE ) OR EMPTY12
NGATE_OD2_nact_c_ngate_RULE22 = NGATE_OD2 OR EMPTY12
NGATE_Core_nact_c_ngate_RULE22 = NGATE_Core OR EMPTY12
CO_nact_c_ngate_RULE22 = CO OR EMPTY12
CTM_nact_c_ngate_RULE22 = CTM_all OR EMPTY12
CMM_nact_c_ngate_RULE22 = CMM_all OR EMPTY12
M1_nact_c_ngate_RULE22 = M1 OR EMPTY12
M2_nact_c_ngate_RULE22 = M2 OR EMPTY12
VIA1_nact_c_ngate_RULE22 = VIA1 OR EMPTY12
M3_nact_c_ngate_RULE22 = M3 OR EMPTY12
VIA2_nact_c_ngate_RULE22 = VIA2 OR EMPTY12
M4_nact_c_ngate_RULE22 = M4 OR EMPTY12
VIA3_nact_c_ngate_RULE22 = VIA3 OR EMPTY12
M5_nact_c_ngate_RULE22 = M5 OR EMPTY12
VIA4_nact_c_ngate_RULE22 = VIA4 OR EMPTY12
M6_nact_c_ngate_RULE22 = M6 OR EMPTY12
VIA5_nact_c_ngate_RULE22 = VIA5 OR EMPTY12
//====================================================================
// Build connection for N+ ACTIVE to Ngate
//====================================================================
CONNECT M1_nact_c_ngate_RULE22 LV_NACT_nact_c_ngate_RULE22 BY CO_nact_c_ngate_RULE22
CONNECT M1_nact_c_ngate_RULE22 POLYi_nact_c_ngate_RULE22 BY CO_nact_c_ngate_RULE22
CONNECT NGATE_OD2_nact_c_ngate_RULE22 POLYi_nact_c_ngate_RULE22
CONNECT NGATE_Core_nact_c_ngate_RULE22 POLYi_nact_c_ngate_RULE22
//====================================================================
// Define layers for PW of ACTIVE connected to PW of gate
//====================================================================
BULK_12_1 = SIZE CHIP BY 12.1
EMPTY12_1 = CHIP NOT BULK_12_1
PWi_pw_c_RULE22 = PWi  OR EMPTY12_1
LV_PSTP_RULE22_pw_c_RULE22 = LV_PSTP_RULE22 OR EMPTY12_1
CO_pw_c_RULE22 = CO OR EMPTY12_1
CTM_pw_c_RULE22 = CTM_all OR EMPTY12_1
CMM_pw_c_RULE22 = CMM_all OR EMPTY12_1
M1_pw_c_RULE22 = M1 OR EMPTY12_1
M2_pw_c_RULE22 = M2 OR EMPTY12_1
VIA1_pw_c_RULE22 = VIA1 OR EMPTY12_1
M3_pw_c_RULE22 = M3 OR EMPTY12_1
VIA2_pw_c_RULE22 = VIA2 OR EMPTY12_1
M4_pw_c_RULE22 = M4 OR EMPTY12_1
VIA3_pw_c_RULE22 = VIA3 OR EMPTY12_1
M5_pw_c_RULE22 = M5 OR EMPTY12_1
VIA4_pw_c_RULE22 = VIA4 OR EMPTY12_1
M6_pw_c_RULE22 = M6 OR EMPTY12_1
VIA5_pw_c_RULE22 = VIA5 OR EMPTY12_1
//====================================================================
// Build connection for PW of ACTIVE connected to PW of gate
//====================================================================
CONNECT M1_pw_c_RULE22 LV_PSTP_RULE22_pw_c_RULE22 BY CO_pw_c_RULE22
CONNECT LV_PSTP_RULE22_pw_c_RULE22 PWi_pw_c_RULE22
//====================================================================
// Define layers for metal mesh
//====================================================================
BULK_12_2 = SIZE CHIP BY 12.2
EMPTY12_2 = CHIP NOT BULK_12_2
PWs_c_mesh_RULE22 = (PWi INSIDE DNWi) OR EMPTY12_2
NWs_c_mesh_RULE22 = ((NW_ULLNW OR EMPTY12) INSIDE DNWi) OR EMPTY12_2
PSTP_DNW_c_mesh_RULE22 = (PSTP_DNW INSIDE DNWi) OR EMPTY12_2
NSTP_DNW_c_mesh_RULE22 = (NSTP_DNW INSIDE DNWi) OR EMPTY12_2
STP_c_mesh_RULE22 = PSTP_DNW_c_mesh_RULE22 OR NSTP_DNW_c_mesh_RULE22
CO_c_mesh_RULE22 = CO OR EMPTY12_2
CTM_C_mesh_RULE22 = CTM_all OR EMPTY12_2
CMM_C_mesh_RULE22 = CMM_all OR EMPTY12_2
M1_c_mesh_RULE22 = M1 OR EMPTY12_2
M2_c_mesh_RULE22 = M2 OR EMPTY12_2
VIA1_c_mesh_RULE22 = VIA1 OR EMPTY12_2
M3_c_mesh_RULE22 = M3 OR EMPTY12_2
VIA2_c_mesh_RULE22 = VIA2 OR EMPTY12_2
M4_c_mesh_RULE22 = M4 OR EMPTY12_2
VIA3_c_mesh_RULE22 = VIA3 OR EMPTY12_2
M5_c_mesh_RULE22 = M5 OR EMPTY12_2
VIA4_c_mesh_RULE22 = VIA4 OR EMPTY12_2
M6_c_mesh_RULE22 = M6 OR EMPTY12_2
VIA5_c_mesh_RULE22 = VIA5 OR EMPTY12_2
//====================================================================
// Build connection for metal mesh
//====================================================================
CONNECT M1_c_mesh_RULE22 PSTP_DNW_c_mesh_RULE22 NSTP_DNW_c_mesh_RULE22 BY CO_c_mesh_RULE22
CONNECT PSTP_DNW_c_mesh_RULE22 PWs_c_mesh_RULE22
CONNECT NSTP_DNW_c_mesh_RULE22 NWs_c_mesh_RULE22
CONNECT PSTP_DNW_c_mesh_RULE22 STP_c_mesh_RULE22
CONNECT NSTP_DNW_c_mesh_RULE22 STP_c_mesh_RULE22
//====================================================================
// Define layers for GATE connects to its PW
//====================================================================
BULK_12_3 = SIZE CHIP BY 12.3
EMPTY12_3 = CHIP NOT BULK_12_3
POLYi_gate_c_pstp_RULE22 = (POLYi INTERACT GATE) OR EMPTY12_3
NGATE_OD2_gate_c_pstp_RULE22 = NGATE_OD2 OR EMPTY12_3
NGATE_Core_gate_c_pstp_RULE22 = NGATE_Core OR EMPTY12_3
LV_PSTP_gate_c_pstp_RULE22 = (LV_PSTP INSIDE DNWi) OR EMPTY12_3
CO_gate_c_pstp_RULE22 = CO OR EMPTY12_3
CTM_gate_c_pstp_RULE22 = CTM_all OR EMPTY12_3
CMM_gate_c_pstp_RULE22 = CMM_all OR EMPTY12_3
M1_gate_c_pstp_RULE22 = M1 OR EMPTY12_3
M2_gate_c_pstp_RULE22 = M2 OR EMPTY12_3
VIA1_gate_c_pstp_RULE22 = VIA1 OR EMPTY12_3
M3_gate_c_pstp_RULE22 = M3 OR EMPTY12_3
VIA2_gate_c_pstp_RULE22 = VIA2 OR EMPTY12_3
M4_gate_c_pstp_RULE22 = M4 OR EMPTY12_3
VIA3_gate_c_pstp_RULE22 = VIA3 OR EMPTY12_3
M5_gate_c_pstp_RULE22 = M5 OR EMPTY12_3
VIA4_gate_c_pstp_RULE22 = VIA4 OR EMPTY12_3
M6_gate_c_pstp_RULE22 = M6 OR EMPTY12_3
VIA5_gate_c_pstp_RULE22 = VIA5 OR EMPTY12_3
//====================================================================
// Build connection for GATE connects to its PW
//====================================================================
CONNECT M1_gate_c_pstp_RULE22 LV_PSTP_gate_c_pstp_RULE22 BY CO_gate_c_pstp_RULE22
CONNECT M1_gate_c_pstp_RULE22 POLYi_gate_c_pstp_RULE22 BY CO_gate_c_pstp_RULE22
CONNECT NGATE_OD2_gate_c_pstp_RULE22 POLYi_gate_c_pstp_RULE22
CONNECT NGATE_Core_gate_c_pstp_RULE22 POLYi_gate_c_pstp_RULE22
//====================================================================
// Define layers for waive Diode
//====================================================================
BULK_12_4 = SIZE CHIP BY 12.4
EMPTY12_4 = CHIP NOT BULK_12_4
NDIO_w_c_diode_RULE22 = (NP_PW INSIDE DNWi) OR EMPTY12_4
POLYi_c_diode_RULE22 = (POLYi INTERACT GATE) OR EMPTY12_4
NGATE_OD2_c_diode_RULE22 = NGATE_OD2 OR EMPTY12_4
NGATE_Core_c_diode_RULE22 = NGATE_Core OR EMPTY12_4
CO_c_diode_RULE22 = CO OR EMPTY12_4
CTM_c_diode_RULE22 = CTM_all OR EMPTY12_4
CMM_c_diode_RULE22 = CMM_all OR EMPTY12_4
M1_c_diode_RULE22 = M1 OR EMPTY12_4
M2_c_diode_RULE22 = M2 OR EMPTY12_4
VIA1_c_diode_RULE22 = VIA1 OR EMPTY12_4
M3_c_diode_RULE22 = M3 OR EMPTY12_4
VIA2_c_diode_RULE22 = VIA2 OR EMPTY12_4
M4_c_diode_RULE22 = M4 OR EMPTY12_4
VIA3_c_diode_RULE22 = VIA3 OR EMPTY12_4
M5_c_diode_RULE22 = M5 OR EMPTY12_4
VIA4_c_diode_RULE22 = VIA4 OR EMPTY12_4
M6_c_diode_RULE22 = M6 OR EMPTY12_4
VIA5_c_diode_RULE22 = VIA5 OR EMPTY12_4
//====================================================================
// Build connection for waive Diode
//====================================================================
CONNECT M1_c_diode_RULE22 NDIO_w_c_diode_RULE22 BY CO_c_diode_RULE22
CONNECT M1_c_diode_RULE22 POLYi_c_diode_RULE22 BY CO_c_diode_RULE22
CONNECT NGATE_OD2_c_diode_RULE22 POLYi_c_diode_RULE22
CONNECT NGATE_Core_c_diode_RULE22 POLYi_c_diode_RULE22
LV_NACT_nact_c_ngate_M1_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M1_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M1_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M1_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M1_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M1_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M1_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M1_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M1_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M1_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M1_RULE22_CK = NGATE_OD2_nact_c_ngate_M1_RULE22 NOT NGATE_OD2_nact_c_ngate_M1_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M1_RULE22 connectted to LV_NACT_nact_c_ngate_M1_RULE22 
NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE22_CK LV_NACT_nact_c_ngate_M1_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M1_RULE22 connectted to LV_NACT_nact_c_ngate_M1_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M1_RULE22_CK LV_NACT_nact_c_ngate_M1_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M1_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT AND RW_B2Bconn_300_M1
// Filter all DNWi whose LV_NACT_nact_c_ngate_M1_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M1_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M1_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 = DFM PROPERTY STP_c_mesh_RULE22 M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M1 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M1 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 = DFM PROPERTY STP_c_mesh_RULE22 VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M1, VIA_AREA)]
//DNW.R.22.3.1 is checked by DNW.R.22.3.1_VIA1
//DNW.R.22.3.2 is checked by DNW.R.22.3.2_VIA1
DNW.R.22.3.1_VIA1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_3_1]  >= 0
   DFM RDB err DNW.R.22.3.1_VIA1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.1_VIA1_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.3.2_VIA1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, VIA_AREA)/AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_3_2]  >= 0
   DFM RDB err DNW.R.22.3.2_VIA1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.2_VIA1_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M1
DNW.R.22.1.1:NGATE_OD2_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M1_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M1
DNW.R.22.1.2:NGATE_OD2_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M1_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M1_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M1_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M1_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M1_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M1_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M1_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M1_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M1_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M1_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M1_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M1_RULE22_CK = NGATE_Core_nact_c_ngate_M1_RULE22 NOT NGATE_Core_nact_c_ngate_M1_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M1_RULE22 connectted to LV_NACT_nact_c_ngate_M1_RULE22 
NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE22_CK LV_NACT_nact_c_ngate_M1_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M1_RULE22 connectted to LV_NACT_nact_c_ngate_M1_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M1_RULE22_CK LV_NACT_nact_c_ngate_M1_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M1_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT AND RW_B2Bconn_300_M1
// Filter all DNWi whose LV_NACT_nact_c_ngate_M1_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M1_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M1_RULE22 
TAR_NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 = DFM PROPERTY STP_c_mesh_RULE22 M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1))/NARAC(M1_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M1, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_Core_M1 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_Core_M1 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_Core_M1)]
VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 = DFM PROPERTY STP_c_mesh_RULE22 VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 OVERLAP MULTI
            [ -= NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1))/NARAC(VIA1_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M1, VIA_AREA)]
//DNW.R.22.4.1 is checked by DNW.R.22.4.1_VIA1
//DNW.R.22.4.2 is checked by DNW.R.22.4.2_VIA1
DNW.R.22.4.1_VIA1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_4_1]  >= 0
   DFM RDB err DNW.R.22.4.1_VIA1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.1_VIA1_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.4.2_VIA1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, VIA_AREA)/AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_4_2]  >= 0
   DFM RDB err DNW.R.22.4.2_VIA1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.2_VIA1_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M1
DNW.R.22.2.1:NGATE_Core_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M1_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M1
DNW.R.22.2.2:NGATE_Core_M1 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M1_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M1_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M1_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M1_2.rdb NOEMPTY NOPSEUDO
}
CONNECT M2_nact_c_ngate_RULE22 M1_nact_c_ngate_RULE22 BY VIA1_nact_c_ngate_RULE22
CONNECT M2_pw_c_RULE22 M1_pw_c_RULE22 BY VIA1_pw_c_RULE22
CONNECT M2_c_mesh_RULE22 M1_c_mesh_RULE22 BY VIA1_c_mesh_RULE22
CONNECT M2_gate_c_pstp_RULE22 M1_gate_c_pstp_RULE22 BY VIA1_gate_c_pstp_RULE22
CONNECT M2_c_diode_RULE22 M1_c_diode_RULE22 BY VIA1_c_diode_RULE22
LV_NACT_nact_c_ngate_M2_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M2_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M2_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M2_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M2_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M2_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M2_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M2_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M2_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M2_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M2_RULE22_CK = NGATE_OD2_nact_c_ngate_M2_RULE22 NOT NGATE_OD2_nact_c_ngate_M2_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M2_RULE22 connectted to LV_NACT_nact_c_ngate_M2_RULE22 
NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE22_CK LV_NACT_nact_c_ngate_M2_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M2_RULE22 connectted to LV_NACT_nact_c_ngate_M2_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M2_RULE22_CK LV_NACT_nact_c_ngate_M2_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M2_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT AND RW_B2Bconn_300_M2
// Filter all DNWi whose LV_NACT_nact_c_ngate_M2_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M2_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M2_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 = DFM PROPERTY STP_c_mesh_RULE22 M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M2 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M2 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M2 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 = DFM PROPERTY STP_c_mesh_RULE22 VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M2, VIA_AREA)]
//DNW.R.22.3.1 is checked by DNW.R.22.3.1_VIA2
//DNW.R.22.3.2 is checked by DNW.R.22.3.2_VIA2
DNW.R.22.3.1_VIA2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_3_1]  >= 0
   DFM RDB err DNW.R.22.3.1_VIA2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.1_VIA2_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.3.2_VIA2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, VIA_AREA)/AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_3_2]  >= 0
   DFM RDB err DNW.R.22.3.2_VIA2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.2_VIA2_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M2
DNW.R.22.1.1:NGATE_OD2_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M2_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M2
DNW.R.22.1.2:NGATE_OD2_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M2_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M2_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M2_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M2_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M2_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M2_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M2_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M2_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M2_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M2_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M2_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M2_RULE22_CK = NGATE_Core_nact_c_ngate_M2_RULE22 NOT NGATE_Core_nact_c_ngate_M2_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M2_RULE22 connectted to LV_NACT_nact_c_ngate_M2_RULE22 
NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE22_CK LV_NACT_nact_c_ngate_M2_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M2_RULE22 connectted to LV_NACT_nact_c_ngate_M2_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M2_RULE22_CK LV_NACT_nact_c_ngate_M2_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M2_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT AND RW_B2Bconn_300_M2
// Filter all DNWi whose LV_NACT_nact_c_ngate_M2_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M2_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M2_RULE22 
TAR_NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 = DFM PROPERTY STP_c_mesh_RULE22 M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2))/NARAC(M2_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M2, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_Core_M2 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_Core_M2 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_Core_M2)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_Core_M2 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_Core_M2)]
VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 = DFM PROPERTY STP_c_mesh_RULE22 VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 OVERLAP MULTI
            [ -= NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2))/NARAC(VIA2_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M2, VIA_AREA)]
//DNW.R.22.4.1 is checked by DNW.R.22.4.1_VIA2
//DNW.R.22.4.2 is checked by DNW.R.22.4.2_VIA2
DNW.R.22.4.1_VIA2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_4_1]  >= 0
   DFM RDB err DNW.R.22.4.1_VIA2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.1_VIA2_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.4.2_VIA2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, VIA_AREA)/AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_4_2]  >= 0
   DFM RDB err DNW.R.22.4.2_VIA2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.2_VIA2_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M2
DNW.R.22.2.1:NGATE_Core_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M2_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M2
DNW.R.22.2.2:NGATE_Core_M2 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M2_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M2_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M2_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M2_2.rdb NOEMPTY NOPSEUDO
}
CONNECT M3_nact_c_ngate_RULE22 M2_nact_c_ngate_RULE22 BY VIA2_nact_c_ngate_RULE22
CONNECT M3_pw_c_RULE22 M2_pw_c_RULE22 BY VIA2_pw_c_RULE22
CONNECT M3_c_mesh_RULE22 M2_c_mesh_RULE22 BY VIA2_c_mesh_RULE22
CONNECT M3_gate_c_pstp_RULE22 M2_gate_c_pstp_RULE22 BY VIA2_gate_c_pstp_RULE22
CONNECT M3_c_diode_RULE22 M2_c_diode_RULE22 BY VIA2_c_diode_RULE22
LV_NACT_nact_c_ngate_M3_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M3_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M3_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M3_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M3_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M3_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M3_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M3_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M3_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M3_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M3_RULE22_CK = NGATE_OD2_nact_c_ngate_M3_RULE22 NOT NGATE_OD2_nact_c_ngate_M3_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M3_RULE22 connectted to LV_NACT_nact_c_ngate_M3_RULE22 
NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE22_CK LV_NACT_nact_c_ngate_M3_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M3_RULE22 connectted to LV_NACT_nact_c_ngate_M3_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M3_RULE22_CK LV_NACT_nact_c_ngate_M3_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M3_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT AND RW_B2Bconn_300_M3
// Filter all DNWi whose LV_NACT_nact_c_ngate_M3_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M3_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M3_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 = DFM PROPERTY STP_c_mesh_RULE22 M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M3 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M3 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M3 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 = DFM PROPERTY STP_c_mesh_RULE22 VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M3, VIA_AREA)]
//DNW.R.22.3.1 is checked by DNW.R.22.3.1_VIA3
//DNW.R.22.3.2 is checked by DNW.R.22.3.2_VIA3
DNW.R.22.3.1_VIA3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_3_1]  >= 0
   DFM RDB err DNW.R.22.3.1_VIA3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.1_VIA3_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.3.2_VIA3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, VIA_AREA)/AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_3_2]  >= 0
   DFM RDB err DNW.R.22.3.2_VIA3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.2_VIA3_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M3
DNW.R.22.1.1:NGATE_OD2_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M3_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M3
DNW.R.22.1.2:NGATE_OD2_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M3_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M3_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M3_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M3_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M3_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M3_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M3_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M3_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M3_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M3_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M3_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M3_RULE22_CK = NGATE_Core_nact_c_ngate_M3_RULE22 NOT NGATE_Core_nact_c_ngate_M3_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M3_RULE22 connectted to LV_NACT_nact_c_ngate_M3_RULE22 
NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE22_CK LV_NACT_nact_c_ngate_M3_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M3_RULE22 connectted to LV_NACT_nact_c_ngate_M3_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M3_RULE22_CK LV_NACT_nact_c_ngate_M3_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M3_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT AND RW_B2Bconn_300_M3
// Filter all DNWi whose LV_NACT_nact_c_ngate_M3_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M3_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M3_RULE22 
TAR_NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 = DFM PROPERTY STP_c_mesh_RULE22 M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3))/NARAC(M3_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M3, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_Core_M3 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_Core_M3 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_Core_M3 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_Core_M3)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_Core_M3)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_Core_M3 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_Core_M3)]
VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 = DFM PROPERTY STP_c_mesh_RULE22 VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 OVERLAP MULTI
            [ -= NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3))/NARAC(VIA3_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M3, VIA_AREA)]
//DNW.R.22.4.1 is checked by DNW.R.22.4.1_VIA3
//DNW.R.22.4.2 is checked by DNW.R.22.4.2_VIA3
DNW.R.22.4.1_VIA3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_4_1]  >= 0
   DFM RDB err DNW.R.22.4.1_VIA3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.1_VIA3_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.4.2_VIA3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, VIA_AREA)/AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_4_2]  >= 0
   DFM RDB err DNW.R.22.4.2_VIA3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.2_VIA3_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M3
DNW.R.22.2.1:NGATE_Core_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M3_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M3
DNW.R.22.2.2:NGATE_Core_M3 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M3_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M3_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M3_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M3_2.rdb NOEMPTY NOPSEUDO
}
CONNECT M4_nact_c_ngate_RULE22 M3_nact_c_ngate_RULE22 BY VIA3_nact_c_ngate_RULE22
CONNECT M4_pw_c_RULE22 M3_pw_c_RULE22 BY VIA3_pw_c_RULE22
CONNECT M4_c_mesh_RULE22 M3_c_mesh_RULE22 BY VIA3_c_mesh_RULE22
CONNECT M4_gate_c_pstp_RULE22 M3_gate_c_pstp_RULE22 BY VIA3_gate_c_pstp_RULE22
CONNECT M4_c_diode_RULE22 M3_c_diode_RULE22 BY VIA3_c_diode_RULE22
LV_NACT_nact_c_ngate_M4_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M4_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M4_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M4_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M4_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M4_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M4_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M4_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M4_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M4_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M4_RULE22_CK = NGATE_OD2_nact_c_ngate_M4_RULE22 NOT NGATE_OD2_nact_c_ngate_M4_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M4_RULE22 connectted to LV_NACT_nact_c_ngate_M4_RULE22 
NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE22_CK LV_NACT_nact_c_ngate_M4_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M4_RULE22 connectted to LV_NACT_nact_c_ngate_M4_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M4_RULE22_CK LV_NACT_nact_c_ngate_M4_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M4_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT AND RW_B2Bconn_300_M4
// Filter all DNWi whose LV_NACT_nact_c_ngate_M4_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M4_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M4_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 = DFM PROPERTY STP_c_mesh_RULE22 M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M4 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M4 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M4 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M4 = M4_C_mesh_RULE22 AND VIA4_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 = DFM PROPERTY STP_c_mesh_RULE22 VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M4, VIA_AREA)]
//DNW.R.22.3.1 is checked by DNW.R.22.3.1_VIA4
//DNW.R.22.3.2 is checked by DNW.R.22.3.2_VIA4
DNW.R.22.3.1_VIA4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_3_1]  >= 0
   DFM RDB err DNW.R.22.3.1_VIA4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.1_VIA4_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.3.2_VIA4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, VIA_AREA)/AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_3_2]  >= 0
   DFM RDB err DNW.R.22.3.2_VIA4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.2_VIA4_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M4
DNW.R.22.1.1:NGATE_OD2_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M4_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M4
DNW.R.22.1.2:NGATE_OD2_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M4_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M4_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M4_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M4_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M4_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M4_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M4_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M4_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M4_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M4_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M4_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M4_RULE22_CK = NGATE_Core_nact_c_ngate_M4_RULE22 NOT NGATE_Core_nact_c_ngate_M4_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M4_RULE22 connectted to LV_NACT_nact_c_ngate_M4_RULE22 
NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE22_CK LV_NACT_nact_c_ngate_M4_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M4_RULE22 connectted to LV_NACT_nact_c_ngate_M4_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M4_RULE22_CK LV_NACT_nact_c_ngate_M4_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M4_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT AND RW_B2Bconn_300_M4
// Filter all DNWi whose LV_NACT_nact_c_ngate_M4_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M4_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M4_RULE22 
TAR_NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 = DFM PROPERTY STP_c_mesh_RULE22 M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4))/NARAC(M4_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M4, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_Core_M4 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_Core_M4 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_Core_M4 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
VIA4_C_VIA_mesh_RULE22_NGATE_Core_M4 = M4_C_mesh_RULE22 AND VIA4_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_Core_M4)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_Core_M4)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_Core_M4)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO VIA4_C_VIA_mesh_RULE22_NGATE_Core_M4 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE22_NGATE_Core_M4)]
VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 = DFM PROPERTY STP_c_mesh_RULE22 VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 OVERLAP MULTI
            [ -= NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4))/NARAC(VIA4_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M4, VIA_AREA)]
//DNW.R.22.4.1 is checked by DNW.R.22.4.1_VIA4
//DNW.R.22.4.2 is checked by DNW.R.22.4.2_VIA4
DNW.R.22.4.1_VIA4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_4_1]  >= 0
   DFM RDB err DNW.R.22.4.1_VIA4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.1_VIA4_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.4.2_VIA4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, VIA_AREA)/AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_4_2]  >= 0
   DFM RDB err DNW.R.22.4.2_VIA4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.2_VIA4_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M4
DNW.R.22.2.1:NGATE_Core_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M4_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M4
DNW.R.22.2.2:NGATE_Core_M4 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M4_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M4_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M4_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M4_2.rdb NOEMPTY NOPSEUDO
}
CONNECT M5_nact_c_ngate_RULE22 M4_nact_c_ngate_RULE22 BY VIA4_nact_c_ngate_RULE22
CONNECT M5_pw_c_RULE22 M4_pw_c_RULE22 BY VIA4_pw_c_RULE22
CONNECT M5_c_mesh_RULE22 M4_c_mesh_RULE22 BY VIA4_c_mesh_RULE22
CONNECT M5_gate_c_pstp_RULE22 M4_gate_c_pstp_RULE22 BY VIA4_gate_c_pstp_RULE22
CONNECT M5_c_diode_RULE22 M4_c_diode_RULE22 BY VIA4_c_diode_RULE22
LV_NACT_nact_c_ngate_M5_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M5_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M5_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M5_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M5_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M5_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M5_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M5_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M5_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M5_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M5_RULE22_CK = NGATE_OD2_nact_c_ngate_M5_RULE22 NOT NGATE_OD2_nact_c_ngate_M5_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M5_RULE22 connectted to LV_NACT_nact_c_ngate_M5_RULE22 
NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE22_CK LV_NACT_nact_c_ngate_M5_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M5_RULE22 connectted to LV_NACT_nact_c_ngate_M5_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M5_RULE22_CK LV_NACT_nact_c_ngate_M5_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M5_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT AND RW_B2Bconn_300_M5
// Filter all DNWi whose LV_NACT_nact_c_ngate_M5_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M5_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M5_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO M5_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE22)]
M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 = DFM PROPERTY STP_c_mesh_RULE22 M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M5 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M5 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M5 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M5 = M4_C_mesh_RULE22 AND VIA4_C_mesh_RULE22
VIA5_C_VIA_mesh_RULE22_NGATE_OD2_M5 = M5_C_mesh_RULE22 AND VIA5_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE22_NGATE_OD2_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 = DFM PROPERTY STP_c_mesh_RULE22 VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_OD2_M5, VIA_AREA)]
//DNW.R.22.3.1 is checked by DNW.R.22.3.1_VIA5
//DNW.R.22.3.2 is checked by DNW.R.22.3.2_VIA5
DNW.R.22.3.1_VIA5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_3_1]  >= 0
   DFM RDB err DNW.R.22.3.1_VIA5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.1_VIA5_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.3.2_VIA5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_3_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, VIA_AREA)/AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_3_2]  >= 0
   DFM RDB err DNW.R.22.3.2_VIA5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.3.2_VIA5_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M5
DNW.R.22.1.1:NGATE_OD2_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M5_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M5
DNW.R.22.1.2:NGATE_OD2_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M5_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M5_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M5_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M5_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M5_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M5_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M5_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M5_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M5_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M5_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M5_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M5_RULE22_CK = NGATE_Core_nact_c_ngate_M5_RULE22 NOT NGATE_Core_nact_c_ngate_M5_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M5_RULE22 connectted to LV_NACT_nact_c_ngate_M5_RULE22 
NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE22_CK LV_NACT_nact_c_ngate_M5_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M5_RULE22 connectted to LV_NACT_nact_c_ngate_M5_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M5_RULE22_CK LV_NACT_nact_c_ngate_M5_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M5_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT AND RW_B2Bconn_300_M5
// Filter all DNWi whose LV_NACT_nact_c_ngate_M5_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M5_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M5_RULE22 
TAR_NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO M5_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE22)]
M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 = DFM PROPERTY STP_c_mesh_RULE22 M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5))/NARAC(M5_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M5, METAL_AREA)]
//Calculate VIA mesh of Target NBL/DNW
//VIA getting connectivity from metal.
VIA1_C_VIA_mesh_RULE22_NGATE_Core_M5 = M1_C_mesh_RULE22 AND VIA1_C_mesh_RULE22
VIA2_C_VIA_mesh_RULE22_NGATE_Core_M5 = M2_C_mesh_RULE22 AND VIA2_C_mesh_RULE22
VIA3_C_VIA_mesh_RULE22_NGATE_Core_M5 = M3_C_mesh_RULE22 AND VIA3_C_mesh_RULE22
VIA4_C_VIA_mesh_RULE22_NGATE_Core_M5 = M4_C_mesh_RULE22 AND VIA4_C_mesh_RULE22
VIA5_C_VIA_mesh_RULE22_NGATE_Core_M5 = M5_C_mesh_RULE22 AND VIA5_C_mesh_RULE22
STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22
VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO VIA1_C_VIA_mesh_RULE22_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA1_C_VIA_mesh_RULE22_NGATE_Core_M5)]
VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO VIA2_C_VIA_mesh_RULE22_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA2_C_VIA_mesh_RULE22_NGATE_Core_M5)]
VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO VIA3_C_VIA_mesh_RULE22_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA3_C_VIA_mesh_RULE22_NGATE_Core_M5)]
VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO VIA4_C_VIA_mesh_RULE22_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA4_C_VIA_mesh_RULE22_NGATE_Core_M5)]
VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO VIA5_C_VIA_mesh_RULE22_NGATE_Core_M5 STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 ACCUMULATE
            [AREA(VIA5_C_VIA_mesh_RULE22_NGATE_Core_M5)]
VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = NET AREA RATIO STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5)]
EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 = DFM PROPERTY STP_c_mesh_RULE22 VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5  VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 OVERLAP MULTI
            [ -= NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5)] > 0
            [ VIA_AREA = (NARAC(VIA1_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5) + NARAC(VIA2_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5) + NARAC(VIA3_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5) + NARAC(VIA4_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5) + NARAC(VIA5_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5))/NARAC(VIA5_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5)]


// Record the VIA AREA AND NBL AREA in the Target NBL.
RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [ VIA_AREA = PROPERTY(EACH_AREA_STP_ALL_C_VIA_mesh_RULE22_NGATE_Core_M5, VIA_AREA)]
//DNW.R.22.4.1 is checked by DNW.R.22.4.1_VIA5
//DNW.R.22.4.2 is checked by DNW.R.22.4.2_VIA5
DNW.R.22.4.1_VIA5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, VIA_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_4_1]  >= 0
   DFM RDB err DNW.R.22.4.1_VIA5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.1_VIA5_2.rdb NOEMPTY NOPSEUDO
}
DNW.R.22.4.2_VIA5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of VIA mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_4_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_VIA_AREA = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, VIA_AREA)]
            [VIA_AREA_RATIO = PROPERTY(RC_VIA_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, VIA_AREA)/AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_4_2]  >= 0
   DFM RDB err DNW.R.22.4.2_VIA5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.4.2_VIA5_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M5
DNW.R.22.2.1:NGATE_Core_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M5_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M5
DNW.R.22.2.2:NGATE_Core_M5 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M5_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M5_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M5_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M5_2.rdb NOEMPTY NOPSEUDO
}
CONNECT M6_nact_c_ngate_RULE22 CTM_nact_c_ngate_RULE22 CMM_nact_c_ngate_RULE22 M5_nact_c_ngate_RULE22 BY VIA5_nact_c_ngate_RULE22
CONNECT M6_pw_c_RULE22 CTM_pw_c_RULE22 CMM_pw_c_RULE22 M5_pw_c_RULE22 BY VIA5_pw_c_RULE22
CONNECT M6_c_mesh_RULE22 CTM_c_mesh_RULE22 CMM_c_mesh_RULE22 M5_c_mesh_RULE22 BY VIA5_c_mesh_RULE22
CONNECT M6_gate_c_pstp_RULE22 CTM_gate_c_pstp_RULE22 CMM_gate_c_pstp_RULE22 M5_gate_c_pstp_RULE22 BY VIA5_gate_c_pstp_RULE22
CONNECT M6_c_diode_RULE22 CTM_c_diode_RULE22 CMM_c_diode_RULE22 M5_c_diode_RULE22 BY VIA5_c_diode_RULE22
LV_NACT_nact_c_ngate_M6_RULE22 = LV_NACT_nact_c_ngate_RULE22 OUTSIDE DNWi
NGATE_OD2_nact_c_ngate_M6_RULE22 = NGATE_OD2_nact_c_ngate_RULE22 AND DNWi

NGATE_OD2_gate_c_pstp_M6_RULE22 = NGATE_OD2_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_OD2_gate_c_pstp_M6_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_OD2_c_diode_M6_RULE22 = NGATE_OD2_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_OD2_nact_c_ngate_M6_RULE22 connect to LV_PSTP_NGATE_OD2_gate_c_pstp_M6_RULE22 in same PWi_pw_c_RULE22 
NGATE_OD2_nact_c_ngate_M6_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_OD2_gate_c_pstp_M6_RULE22 LV_PSTP_NGATE_OD2_gate_c_pstp_M6_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_OD2_nact_c_ngate_M6_RULE22_CK = NGATE_OD2_nact_c_ngate_M6_RULE22 NOT NGATE_OD2_nact_c_ngate_M6_RULE22_Waive_C_PSTP
// select all NGATE_OD2_nact_c_ngate_M6_RULE22 connectted to LV_NACT_nact_c_ngate_M6_RULE22 
NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT = NET AREA RATIO NGATE_OD2_nact_c_ngate_M6_RULE22_CK LV_NACT_nact_c_ngate_M6_RULE22 > 0

// Select all NGATE_OD2_nact_c_ngate_M6_RULE22 connectted to LV_NACT_nact_c_ngate_M6_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_PW = NET AREA RATIO NGATE_OD2_nact_c_ngate_M6_RULE22_CK LV_NACT_nact_c_ngate_M6_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_OD2_nact_c_ngate_M6_RULE22 connected b2b diode
NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_B2B = NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT AND RW_B2Bconn_300_M6
// Filter all DNWi whose LV_NACT_nact_c_ngate_M6_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_OD2_c_diode_M6_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 = ((DNWi NOT INTERACT NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_PW) NOT INTERACT NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_B2B) NOT INTERACT NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M6_RULE22 
TAR_NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT = NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M5_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE22)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO M6_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE22)]
M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 = DFM PROPERTY STP_c_mesh_RULE22 M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_OD2_M6, METAL_AREA)]
// DNW.R.22.1.1 is checked by DNW.R.22.1.1:NGATE_OD2_M6
DNW.R.22.1.1:NGATE_OD2_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_1
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22)/ AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT) - DNW_R_22_1_1]  >= 0
   DFM RDB err DNW.R.22.1.1:NGATE_OD2_M6_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.1:NGATE_OD2_M6_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.1.2 is checked by DNW.R.22.1.2:NGATE_OD2_M6
DNW.R.22.1.2:NGATE_OD2_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_1_2
    err = DFM PROPERTY TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22)]
            [V_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_OD2_nact_c_ngate_M6_RULE22, METAL_AREA)/AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT) - DNW_R_22_1_2]  >= 0
   DFM RDB err DNW.R.22.1.2:NGATE_OD2_M6_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_OD2_nact_c_ngate_M6_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.1.2:NGATE_OD2_M6_2.rdb NOEMPTY NOPSEUDO
}
NGATE_Core_nact_c_ngate_M6_RULE22 = NGATE_Core_nact_c_ngate_RULE22 AND DNWi

NGATE_Core_gate_c_pstp_M6_RULE22 = NGATE_Core_gate_c_pstp_RULE22 AND DNWi
LV_PSTP_NGATE_Core_gate_c_pstp_M6_RULE22 = LV_PSTP_gate_c_pstp_RULE22 INSIDE DNWi

NGATE_Core_c_diode_M6_RULE22 = NGATE_Core_c_diode_RULE22 AND DNWi
// select all NGATE connectted to the PW STRAP sharing the same PW of NMOS gates
// Filter the NGATE_Core_nact_c_ngate_M6_RULE22 connect to LV_PSTP_NGATE_Core_gate_c_pstp_M6_RULE22 in same PWi_pw_c_RULE22 
NGATE_Core_nact_c_ngate_M6_RULE22_Waive_C_PSTP = NET AREA RATIO NGATE_Core_gate_c_pstp_M6_RULE22 LV_PSTP_NGATE_Core_gate_c_pstp_M6_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22
NGATE_Core_nact_c_ngate_M6_RULE22_CK = NGATE_Core_nact_c_ngate_M6_RULE22 NOT NGATE_Core_nact_c_ngate_M6_RULE22_Waive_C_PSTP
// select all NGATE_Core_nact_c_ngate_M6_RULE22 connectted to LV_NACT_nact_c_ngate_M6_RULE22 
NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT = NET AREA RATIO NGATE_Core_nact_c_ngate_M6_RULE22_CK LV_NACT_nact_c_ngate_M6_RULE22 > 0

// Select all NGATE_Core_nact_c_ngate_M6_RULE22 connectted to LV_NACT_nact_c_ngate_M6_RULE22, and their PWi_pw_c_RULE22 are connected
NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_PW = NET AREA RATIO NGATE_Core_nact_c_ngate_M6_RULE22_CK LV_NACT_nact_c_ngate_M6_RULE22 > 0 INSIDE OF LAYER PWi_pw_c_RULE22 BY NET

// Filter all DNWi whose pw of NGATE_Core_nact_c_ngate_M6_RULE22 connected b2b diode
NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_B2B = NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT AND RW_B2Bconn_300_M6
// Filter all DNWi whose LV_NACT_nact_c_ngate_M6_RULE22 connected NDIO_w_c_diode_RULE22

NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_DIO = (NET AREA RATIO NGATE_Core_c_diode_M6_RULE22 NDIO_w_c_diode_RULE22 > 0 INSIDE OF LAYER DNWi) AND NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT 
// select target DNWi 
TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 = ((DNWi NOT INTERACT NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_PW) NOT INTERACT NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_B2B) NOT INTERACT NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT_DIO

// select target LV_NACT_nact_c_ngate_M6_RULE22 
TAR_NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT = NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT INTERACT TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22
//Calculate METAL mesh of Target NBL/DNW
STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = STP_c_mesh_RULE22 AND TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22
M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M1_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M1_C_mesh_RULE22)]
M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M2_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M2_C_mesh_RULE22)]
M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M3_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M3_C_mesh_RULE22)]
M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M4_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M4_C_mesh_RULE22)]
M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M5_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M5_C_mesh_RULE22)]
M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO M6_C_mesh_RULE22 STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 ACCUMULATE
            [AREA(M6_C_mesh_RULE22)]
M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = NET AREA RATIO STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 > 0 INSIDE OF LAYER TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 ACCUMULATE
            [COUNT(STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6)]
EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 = DFM PROPERTY STP_c_mesh_RULE22 M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6  M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 OVERLAP MULTI
            [ -= NARAC(M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6)] > 0
            [ METAL_AREA = (NARAC(M1_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6) + NARAC(M2_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6) + NARAC(M3_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6) + NARAC(M4_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6) + NARAC(M5_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6) + NARAC(M6_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6))/NARAC(M6_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6)]


// Record the METAL AREA AND NBL AREA in the Target NBL.
RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6 OVERLAP MULTI
            [ DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22)]
            [ METAL_AREA = PROPERTY(EACH_AREA_STP_ALL_C_METAL_mesh_RULE22_NGATE_Core_M6, METAL_AREA)]
// DNW.R.22.2.1 is checked by DNW.R.22.2.1:NGATE_Core_M6
DNW.R.22.2.1:NGATE_Core_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of each target DNWi_NMOS gates area to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_1
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22, METAL_AREA)]
            [DNWi_AREA_RATIO = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22)/ AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT) - DNW_R_22_2_1]  >= 0
   DFM RDB err DNW.R.22.2.1:NGATE_Core_M6_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.1:NGATE_Core_M6_2.rdb NOEMPTY NOPSEUDO
}
// DNW.R.22.2.2 is checked by DNW.R.22.2.2:NGATE_Core_M6
DNW.R.22.2.2:NGATE_Core_M6 { @ If guideline is unable to comply, DRC will further flag the following condition:
                        @ The Maximum ratio of METAL mesh_NMOS gates area[extract from each target DNWi_NMOS gates] to total area of NMOS gates[INSIDE each target DNWi_NMOS gates, and connects to {N+ACTIVE_under_5V OUTSIDE DNWi}] < ^DNW_R_22_2_2
    err = DFM PROPERTY TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22 OVERLAP MULTI
            [DNWi_AREA = AREA(TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22)]
            [V_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)] > 0
            [V_GATE_COUNT = COUNT(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)]
            [ALL_METAL_AREA = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22, METAL_AREA)]
            [METAL_AREA_RATIO = PROPERTY(RC_METAL_TAR_DNWi_NGATE_Core_nact_c_ngate_M6_RULE22, METAL_AREA)/AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT) - DNW_R_22_2_2]  >= 0
   DFM RDB err DNW.R.22.2.2:NGATE_Core_M6_1.rdb NOEMPTY NOPSEUDO
   err1 =  DFM PROPERTY NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT err OVERLAP ABUT ALSO MULTI
            [SINGLE_GATE_AREA = AREA(NGATE_Core_nact_c_ngate_M6_RULE22_C_NACT)*!!AREA(err)] > 0
   DFM COPY err1
   DFM RDB err1 DNW.R.22.2.2:NGATE_Core_M6_2.rdb NOEMPTY NOPSEUDO
}




DISCONNECT
BULK_100 = SIZE CHIP BY 100
EMPTY_100 = CHIP NOT BULK_100
NBL_C_DNW_R_23 = AREA DNWi > DNW_R_23_A
GATE_IN_BIG_DNW = GATE INSIDE NBL_C_DNW_R_23 
GATE_OUT_DNW = GATE OUTSIDE DNWi 
GATE_IN_DNW_C_DNW_R_23 = GATE_IN_BIG_DNW NOT EMPTY_100
GATE_OUT_DNW_C_DNW_R_23 = GATE_OUT_DNW NOT EMPTY_100
GATE_C_DNW_R_23 = (POLYi INTERACT GATE) NOT EMPTY_100
CO_C_DNW_R_23 = CO NOT EMPTY_100
SD_C_DNW_R_23 = SD NOT EMPTY_100
M1_C_DNW_R_23 = M1 NOT EMPTY_100
VIA1_C_DNW_R_23 = VIA1 NOT EMPTY_100
M2_C_DNW_R_23 = M2 NOT EMPTY_100
VIA2_C_DNW_R_23 = VIA2 NOT EMPTY_100
M3_C_DNW_R_23 = M3 NOT EMPTY_100
VIA3_C_DNW_R_23 = VIA3 NOT EMPTY_100
M4_C_DNW_R_23 = M4 NOT EMPTY_100
VIA4_C_DNW_R_23 = VIA4 NOT EMPTY_100
M5_C_DNW_R_23 = M5 NOT EMPTY_100
VIA5_C_DNW_R_23 = VIA5 NOT EMPTY_100
M6_C_DNW_R_23 = M6 NOT EMPTY_100
CTM_C_DNW_R_23 = CTM5i NOT EMPTY_100
CMM_C_DNW_R_23 = CMM5i NOT EMPTY_100
CONNECT M1_C_DNW_R_23 GATE_C_DNW_R_23 SD_C_DNW_R_23 BY CO_C_DNW_R_23
CONNECT GATE_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23
CONNECT GATE_C_DNW_R_23 GATE_OUT_DNW_C_DNW_R_23

// DNW.R.23 is checked by DNW.R.23:M1
DNW.R.23:M1 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M1_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M1_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M1.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M1.rep NOEMPTY NOPSEUDO
}
CONNECT M2_C_DNW_R_23 M1_C_DNW_R_23 BY VIA1_C_DNW_R_23
// DNW.R.23 is checked by DNW.R.23:M2
DNW.R.23:M2 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M2_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M2_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M2.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M2.rep NOEMPTY NOPSEUDO
}
CONNECT M3_C_DNW_R_23 M2_C_DNW_R_23 BY VIA2_C_DNW_R_23
// DNW.R.23 is checked by DNW.R.23:M3
DNW.R.23:M3 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M3_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M3_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M3.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M3.rep NOEMPTY NOPSEUDO
}

CONNECT M4_C_DNW_R_23 M3_C_DNW_R_23 BY VIA3_C_DNW_R_23
// DNW.R.23 is checked by DNW.R.23:M4
DNW.R.23:M4 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M4_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M4_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M4.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M4.rep NOEMPTY NOPSEUDO
}

CONNECT M5_C_DNW_R_23 M4_C_DNW_R_23 BY VIA4_C_DNW_R_23
// DNW.R.23 is checked by DNW.R.23:M5
DNW.R.23:M5 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M5_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M5_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M5.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M5.rep NOEMPTY NOPSEUDO
}

CONNECT M6_C_DNW_R_23 CTM_C_DNW_R_23 CMM_C_DNW_R_23 M5_C_DNW_R_23 BY VIA5_C_DNW_R_23
// DNW.R.23 is checked by DNW.R.23:M6
DNW.R.23:M6 { @ The area ratio of {GATE INSIDE DNWi [area > ^DNW_R_23_A] } to {GATE OUTSIDE DNWi}[through metal and CO connection connect to {GATE INSIDE DNWi [area > ^DNW_R_23_A] }] < ^DNW_R_23
              @ If the net connects to {OD NOT PO}, DRC will not take into ratio calculation.
    err = NET AREA RATIO GATE_OUT_DNW_C_DNW_R_23 M6_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 SD_C_DNW_R_23 >= DNW_R_23
        [!!AREA(M6_C_DNW_R_23)*!AREA(SD_C_DNW_R_23)*(AREA(GATE_IN_DNW_C_DNW_R_23)/AREA(GATE_OUT_DNW_C_DNW_R_23))]
        RDB DNW.R.23.M6.rep GATE_OUT_DNW_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23 BY LAYER
    COPY err
    // output DNWi area to rdb
    GATE_IN_DNW_C_DNW_R_23_err = NET AREA RATIO GATE_IN_DNW_C_DNW_R_23 err > 0
    // Calcluate DNWi area under GATE INSIDE DNWi for violations and output location to RDB file
    GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA = DFM PROPERTY NBL_C_DNW_R_23 GATE_IN_DNW_C_DNW_R_23_err OVERLAP ABUT ALSO MULTI
        [NBL_AREA = AREA(NBL_C_DNW_R_23)*!!AREA(GATE_IN_DNW_C_DNW_R_23_err)] > 0
    DFM RDB GATE_IN_DNW_C_DNW_R_23_WI_NBL_AREA DNW.R.23.M6.rep NOEMPTY NOPSEUDO
}

